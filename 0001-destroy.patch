From 89566b62fe062b8a6596d3d124dac394dc3019b1 Mon Sep 17 00:00:00 2001
From: Nicolas Capens <capn@google.com>
Date: Mon, 10 Nov 2014 15:55:23 -0500
Subject: [PATCH] destroy

Change-Id: Ice9c3473453e669d4b4ea7e7337a6f02ce4d9c36
---
 src/OpenGL/libEGL/Image.hpp          | 24 +++++++++----
 src/OpenGL/libEGL/libEGL.cpp         |  6 +++-
 src/OpenGL/libEGL/libEGL.def         |  4 +++
 src/OpenGL/libGLES_CM/Image.cpp      |  2 +-
 src/OpenGL/libGLES_CM/Texture.cpp    | 27 +++++++-------
 src/OpenGL/libGLES_CM/Texture.h      |  4 +--
 src/OpenGL/libGLES_CM/libGLES_CM.cpp | 68 ++++++++++++++++++++++++------------
 src/OpenGL/libGLES_CM/libGLES_CM.def | 24 ++++++++++++-
 src/OpenGL/libGLESv2/Image.cpp       |  2 +-
 src/OpenGL/libGLESv2/Texture.cpp     | 27 +++++++-------
 src/OpenGL/libGLESv2/Texture.h       |  4 +--
 src/OpenGL/libGLESv2/libGLESv2.cpp   | 12 +++++--
 12 files changed, 140 insertions(+), 64 deletions(-)

diff --git a/src/OpenGL/libEGL/Image.hpp b/src/OpenGL/libEGL/Image.hpp
index 2ca4525..9a5c4f2 100644
--- a/src/OpenGL/libEGL/Image.hpp
+++ b/src/OpenGL/libEGL/Image.hpp
@@ -3,6 +3,8 @@
 
 #include "Renderer/Surface.hpp"
 
+#include <assert.h>
+
 namespace egl
 {
 // Types common between gl.h and gl2.h
@@ -58,27 +60,27 @@ public:
 		return multiSampleDepth;
 	}
 
-	bool Image::isShared() const
+	bool isShared() const
     {
         return shared;
     }
 
-    void Image::markShared()
+    void markShared()
     {
         shared = true;
     }
 
-	void *Image::lock(unsigned int left, unsigned int top, sw::Lock lock)
+	void *lock(unsigned int left, unsigned int top, sw::Lock lock)
 	{
 		return lockExternal(left, top, 0, lock, sw::PUBLIC);
 	}
 
-	unsigned int Image::getPitch() const
+	unsigned int getPitch() const
 	{
 		return getExternalPitchB();
 	}
 
-	void Image::unlock()
+	void unlock()
 	{
 		unlockExternal();
 	}
@@ -87,10 +89,21 @@ public:
 	virtual void release() = 0;
 	virtual void unbind() = 0;   // Break parent ownership and release
 
+	void destroyShared()   // Release a shared image
+    {
+		assert(shared);
+        shared = false;
+		release();
+    }
+
 	virtual void loadImageData(GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, GLint unpackAlignment, const void *input) = 0;
 	virtual void loadCompressedData(GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLsizei imageSize, const void *pixels) = 0;
 
 protected:
+	virtual ~Image() = 0
+	{
+	}
+
 	const GLsizei width;
 	const GLsizei height;
 	const GLenum format;
@@ -98,7 +111,6 @@ protected:
 	const sw::Format internalFormat;
 	const int multiSampleDepth;
 
-private:
 	bool shared;   // Used as an EGLImage
 };
 }
diff --git a/src/OpenGL/libEGL/libEGL.cpp b/src/OpenGL/libEGL/libEGL.cpp
index 7a6d56d..ef0b570 100644
--- a/src/OpenGL/libEGL/libEGL.cpp
+++ b/src/OpenGL/libEGL/libEGL.cpp
@@ -1080,6 +1080,8 @@ EGLBoolean EGLAPIENTRY eglCopyBuffers(EGLDisplay dpy, EGLSurface surface, EGLNat
 
 EGLImageKHR EGLAPIENTRY eglCreateImageKHR(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list)
 {
+	TRACE("(EGLDisplay dpy = 0x%0.8p, EGLContext ctx = 0x%0.8p, EGLenum target = 0x%X, buffer = 0x%0.8p, const EGLint attrib_list = 0x%0.8p)", dpy, ctx, target, buffer, attrib_list);
+
     try
     {
         egl::Display *display = static_cast<egl::Display*>(dpy);
@@ -1154,6 +1156,8 @@ EGLImageKHR EGLAPIENTRY eglCreateImageKHR(EGLDisplay dpy, EGLContext ctx, EGLenu
 
 EGLBoolean EGLAPIENTRY eglDestroyImageKHR(EGLDisplay dpy, EGLImageKHR image)
 {
+	TRACE("(EGLDisplay dpy = 0x%0.8p, EGLImageKHR image = 0x%0.8p)", dpy, image);
+
     try
     {
         egl::Display *display = static_cast<egl::Display*>(dpy);
@@ -1169,7 +1173,7 @@ EGLBoolean EGLAPIENTRY eglDestroyImageKHR(EGLDisplay dpy, EGLImageKHR image)
         }
 
         egl::Image *glImage = static_cast<egl::Image*>(image);
-        glImage->release();
+        glImage->destroyShared();
 
         return success(EGL_TRUE);
     }
diff --git a/src/OpenGL/libEGL/libEGL.def b/src/OpenGL/libEGL/libEGL.def
index 8b4caf5..4555d71 100644
--- a/src/OpenGL/libEGL/libEGL.def
+++ b/src/OpenGL/libEGL/libEGL.def
@@ -35,6 +35,10 @@ EXPORTS
 	eglWaitGL                       @30
 	eglWaitNative                   @31
 
+	; Extensions
+	eglCreateImageKHR
+	eglDestroyImageKHR
+
 	; Functions that don't change the error code, for use by client APIs
 	clientGetCurrentContext
 	clientGetCurrentDisplay
\ No newline at end of file
diff --git a/src/OpenGL/libGLES_CM/Image.cpp b/src/OpenGL/libGLES_CM/Image.cpp
index 5268845..981cfc9 100644
--- a/src/OpenGL/libGLES_CM/Image.cpp
+++ b/src/OpenGL/libGLES_CM/Image.cpp
@@ -72,7 +72,7 @@ namespace es1
 			sw::atomicDecrement(&referenceCount);
 		}
 
-		if(referenceCount == 0)
+		if(referenceCount == 0 && !shared)
 		{
 			delete this;
 		}
diff --git a/src/OpenGL/libGLES_CM/Texture.cpp b/src/OpenGL/libGLES_CM/Texture.cpp
index 7f12933..19ea8ab 100644
--- a/src/OpenGL/libGLES_CM/Texture.cpp
+++ b/src/OpenGL/libGLES_CM/Texture.cpp
@@ -536,6 +536,18 @@ void Texture2D::copySubImage(GLenum target, GLint level, GLint xoffset, GLint yo
 	renderTarget->release();
 }
 
+void Texture2D::setImage(egl::Image *sharedImage)
+{
+	sharedImage->addRef();
+
+    if(image[0])
+    {
+        image[0]->unbind();
+    }
+
+    image[0] = sharedImage;
+}
+
 // Tests for 2D texture sampling completeness. [OpenGL ES 2.0.24] section 3.8.2 page 85.
 bool Texture2D::isSamplerComplete() const
 {
@@ -707,23 +719,12 @@ GLenum TextureExternal::getTarget() const
     return GL_TEXTURE_EXTERNAL_OES;
 }
 
-void TextureExternal::setImage(Image *sharedImage)
-{
-    if(image[0])
-    {
-        image[0]->release();
-    }
-
-    sharedImage->addRef();
-    image[0] = sharedImage;
-}
-
 }
 
 // Exported functions for use by EGL
 extern "C"
 {
-	es1::Image *createBackBuffer(int width, int height, const egl::Config *config)
+	egl::Image *createBackBuffer(int width, int height, const egl::Config *config)
 	{
 		if(config)
 		{
@@ -733,7 +734,7 @@ extern "C"
 		return 0;
 	}
 
-	es1::Image *createDepthStencil(unsigned int width, unsigned int height, sw::Format format, int multiSampleDepth, bool discard)
+	egl::Image *createDepthStencil(unsigned int width, unsigned int height, sw::Format format, int multiSampleDepth, bool discard)
 	{
 		if(width == 0 || height == 0 || height > OUTLINE_RESOLUTION)
 		{
diff --git a/src/OpenGL/libGLES_CM/Texture.h b/src/OpenGL/libGLES_CM/Texture.h
index 553a00c..d5f75d2 100644
--- a/src/OpenGL/libGLES_CM/Texture.h
+++ b/src/OpenGL/libGLES_CM/Texture.h
@@ -136,6 +136,8 @@ public:
     void copyImage(GLint level, GLenum format, GLint x, GLint y, GLsizei width, GLsizei height, Framebuffer *source);
     void copySubImage(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, Framebuffer *source);
 
+	void setImage(egl::Image *image);
+
     virtual bool isSamplerComplete() const;
     virtual bool isCompressed(GLenum target, GLint level) const;
 	virtual bool isDepth(GLenum target, GLint level) const;
@@ -174,8 +176,6 @@ public:
     virtual ~TextureExternal();
 
     virtual GLenum getTarget() const;
-
-    void setImage(Image *image);
 };
 }
 
diff --git a/src/OpenGL/libGLES_CM/libGLES_CM.cpp b/src/OpenGL/libGLES_CM/libGLES_CM.cpp
index 2be66e6..3930ecd 100644
--- a/src/OpenGL/libGLES_CM/libGLES_CM.cpp
+++ b/src/OpenGL/libGLES_CM/libGLES_CM.cpp
@@ -513,6 +513,13 @@ void GL_APIENTRY glBindTexture(GLenum target, GLuint texture)
     }
 }
 
+void GL_APIENTRY glBlendEquationSeparateOES(GLenum modeRGB, GLenum modeAlpha);
+
+void GL_APIENTRY glBlendEquationOES(GLenum mode)
+{
+    glBlendEquationSeparateOES(mode, mode);
+}
+
 void GL_APIENTRY glBlendEquationSeparateOES(GLenum modeRGB, GLenum modeAlpha)
 {
     TRACE("(GLenum modeRGB = 0x%X, GLenum modeAlpha = 0x%X)", modeRGB, modeAlpha);
@@ -556,6 +563,8 @@ void GL_APIENTRY glBlendEquationSeparateOES(GLenum modeRGB, GLenum modeAlpha)
     }
 }
 
+void GL_APIENTRY glBlendFuncSeparateOES(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
+
 void GL_APIENTRY glBlendFunc(GLenum sfactor, GLenum dfactor)
 {
     glBlendFuncSeparateOES(sfactor, dfactor, sfactor, dfactor);
@@ -4187,6 +4196,7 @@ void GL_APIENTRY glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image
     {
         switch(target)
         {
+		case GL_TEXTURE_2D:
         case GL_TEXTURE_EXTERNAL_OES:
             break;
         default:
@@ -4202,14 +4212,21 @@ void GL_APIENTRY glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image
 
         if(context)
         {
-            es1::TextureExternal *texture = context->getTextureExternal();
+            es1::Texture2D *texture = 0;
+			
+			switch(target)
+			{
+			case GL_TEXTURE_2D:           texture = context->getTexture2D();       break;
+			case GL_TEXTURE_EXTERNAL_OES: texture = context->getTextureExternal(); break;
+			default:                      UNREACHABLE();
+			}
 
             if(!texture)
             {
                 return error(GL_INVALID_OPERATION);
             }
 
-            es1::Image *glImage = static_cast<es1::Image*>(image);
+            egl::Image *glImage = static_cast<egl::Image*>(image);
 
             texture->setImage(glImage);
         }
@@ -4220,6 +4237,11 @@ void GL_APIENTRY glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image
     }
 }
 
+void GL_APIENTRY glEGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image)
+{
+	UNIMPLEMENTED();
+}
+
 __eglMustCastToProperFunctionPointerType glGetProcAddress(const char *procname)
 {
     struct Extension
@@ -4232,28 +4254,30 @@ __eglMustCastToProperFunctionPointerType glGetProcAddress(const char *procname)
     {
 		#define EXTENSION(name) {#name, (__eglMustCastToProperFunctionPointerType)name}
 
-        EXTENSION(glEGLImageTargetTexture2DOES),
- 		EXTENSION(glIsRenderbufferOES),
- 		EXTENSION(glBindRenderbufferOES),
- 		EXTENSION(glDeleteRenderbuffersOES),
- 		EXTENSION(glGenRenderbuffersOES),
- 		EXTENSION(glRenderbufferStorageOES),
- 		EXTENSION(glGetRenderbufferParameterivOES),
- 		EXTENSION(glIsFramebufferOES),
- 		EXTENSION(glBindFramebufferOES),
- 		EXTENSION(glDeleteFramebuffersOES),
- 		EXTENSION(glGenFramebuffersOES),
- 		EXTENSION(glCheckFramebufferStatusOES),
- 		EXTENSION(glFramebufferRenderbufferOES),
- 		EXTENSION(glFramebufferTexture2DOES),
- 		EXTENSION(glGetFramebufferAttachmentParameterivOES),
- 		EXTENSION(glGenerateMipmapOES),
- 		EXTENSION(glBlendEquationSeparateOES),
- 		EXTENSION(glBlendFuncSeparateOES),
- 		EXTENSION(glPointSizePointerOES),
+		EXTENSION(glEGLImageTargetTexture2DOES),
+		EXTENSION(glEGLImageTargetRenderbufferStorageOES),
+		EXTENSION(glIsRenderbufferOES),
+		EXTENSION(glBindRenderbufferOES),
+		EXTENSION(glDeleteRenderbuffersOES),
+		EXTENSION(glGenRenderbuffersOES),
+		EXTENSION(glRenderbufferStorageOES),
+		EXTENSION(glGetRenderbufferParameterivOES),
+		EXTENSION(glIsFramebufferOES),
+		EXTENSION(glBindFramebufferOES),
+		EXTENSION(glDeleteFramebuffersOES),
+		EXTENSION(glGenFramebuffersOES),
+		EXTENSION(glCheckFramebufferStatusOES),
+		EXTENSION(glFramebufferRenderbufferOES),
+		EXTENSION(glFramebufferTexture2DOES),
+		EXTENSION(glGetFramebufferAttachmentParameterivOES),
+		EXTENSION(glGenerateMipmapOES),
+		EXTENSION(glBlendEquationOES),
+		EXTENSION(glBlendEquationSeparateOES),
+		EXTENSION(glBlendFuncSeparateOES),
+		EXTENSION(glPointSizePointerOES),
 
 		#undef EXTENSION
-     };
+	};
 
     for(int ext = 0; ext < sizeof(glExtensions) / sizeof(Extension); ext++)
     {
diff --git a/src/OpenGL/libGLES_CM/libGLES_CM.def b/src/OpenGL/libGLES_CM/libGLES_CM.def
index 253c1c5..d894976 100644
--- a/src/OpenGL/libGLES_CM/libGLES_CM.def
+++ b/src/OpenGL/libGLES_CM/libGLES_CM.def
@@ -137,7 +137,6 @@ EXPORTS
     glPointParameterx    @166
     glPointParameterxv    @167
     glPointSize    @101
-    glPointSizePointerOES    @168
     glPointSizex    @102
     glPolygonOffset    @103
     glPolygonOffsetx    @104
@@ -175,6 +174,29 @@ EXPORTS
     glVertexPointer    @130
     glViewport    @131
 
+	; Extensions
+	glPointSizePointerOES    @168
+    glEGLImageTargetTexture2DOES
+    glEGLImageTargetRenderbufferStorageOES
+    glIsRenderbufferOES
+    glBindRenderbufferOES
+    glDeleteRenderbuffersOES
+    glGenRenderbuffersOES
+    glRenderbufferStorageOES
+    glGetRenderbufferParameterivOES
+    glIsFramebufferOES
+    glBindFramebufferOES
+    glDeleteFramebuffersOES
+    glGenFramebuffersOES
+    glCheckFramebufferStatusOES
+    glFramebufferRenderbufferOES
+    glFramebufferTexture2DOES
+    glGetFramebufferAttachmentParameterivOES
+    glGenerateMipmapOES
+    glBlendEquationOES
+    glBlendEquationSeparateOES
+    glBlendFuncSeparateOES
+
     ; EGL dependencies
     glCreateContext
     glGetProcAddress
diff --git a/src/OpenGL/libGLESv2/Image.cpp b/src/OpenGL/libGLESv2/Image.cpp
index 541923f..2c5dcda 100644
--- a/src/OpenGL/libGLESv2/Image.cpp
+++ b/src/OpenGL/libGLESv2/Image.cpp
@@ -71,7 +71,7 @@ namespace es2
 			sw::atomicDecrement(&referenceCount);
 		}
 
-		if(referenceCount == 0)
+		if(referenceCount == 0 && !shared)
 		{
 			delete this;
 		}
diff --git a/src/OpenGL/libGLESv2/Texture.cpp b/src/OpenGL/libGLESv2/Texture.cpp
index 318ccaf..7d2386e 100644
--- a/src/OpenGL/libGLESv2/Texture.cpp
+++ b/src/OpenGL/libGLESv2/Texture.cpp
@@ -536,6 +536,18 @@ void Texture2D::copySubImage(GLenum target, GLint level, GLint xoffset, GLint yo
 	renderTarget->release();
 }
 
+void Texture2D::setImage(egl::Image *sharedImage)
+{
+	sharedImage->addRef();
+
+    if(image[0])
+    {
+        image[0]->unbind();
+    }
+
+    image[0] = sharedImage;
+}
+
 // Tests for 2D texture sampling completeness. [OpenGL ES 2.0.24] section 3.8.2 page 85.
 bool Texture2D::isSamplerComplete() const
 {
@@ -1140,23 +1152,12 @@ GLenum TextureExternal::getTarget() const
     return GL_TEXTURE_EXTERNAL_OES;
 }
 
-void TextureExternal::setImage(Image *sharedImage)
-{
-    if(image[0])
-    {
-        image[0]->release();
-    }
-
-    sharedImage->addRef();
-    image[0] = sharedImage;
-}
-
 }
 
 // Exported functions for use by EGL
 extern "C"
 {
-	es2::Image *createBackBuffer(int width, int height, const egl::Config *config)
+	egl::Image *createBackBuffer(int width, int height, const egl::Config *config)
 	{
 		if(config)
 		{
@@ -1166,7 +1167,7 @@ extern "C"
 		return 0;
 	}
 
-	es2::Image *createDepthStencil(unsigned int width, unsigned int height, sw::Format format, int multiSampleDepth, bool discard)
+	egl::Image *createDepthStencil(unsigned int width, unsigned int height, sw::Format format, int multiSampleDepth, bool discard)
 	{
 		if(width == 0 || height == 0 || height > OUTLINE_RESOLUTION)
 		{
diff --git a/src/OpenGL/libGLESv2/Texture.h b/src/OpenGL/libGLESv2/Texture.h
index 2d1e2fe..841c01f 100644
--- a/src/OpenGL/libGLESv2/Texture.h
+++ b/src/OpenGL/libGLESv2/Texture.h
@@ -136,6 +136,8 @@ public:
     void copyImage(GLint level, GLenum format, GLint x, GLint y, GLsizei width, GLsizei height, Framebuffer *source);
     void copySubImage(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, Framebuffer *source);
 
+	void setImage(egl::Image *image);
+
     virtual bool isSamplerComplete() const;
     virtual bool isCompressed(GLenum target, GLint level) const;
 	virtual bool isDepth(GLenum target, GLint level) const;
@@ -231,8 +233,6 @@ public:
     virtual ~TextureExternal();
 
     virtual GLenum getTarget() const;
-
-    void setImage(Image *image);
 };
 }
 
diff --git a/src/OpenGL/libGLESv2/libGLESv2.cpp b/src/OpenGL/libGLESv2/libGLESv2.cpp
index cf263dc..e03d6da 100644
--- a/src/OpenGL/libGLESv2/libGLESv2.cpp
+++ b/src/OpenGL/libGLESv2/libGLESv2.cpp
@@ -6110,6 +6110,7 @@ void GL_APIENTRY glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image
     {
         switch(target)
         {
+		case GL_TEXTURE_2D:
         case GL_TEXTURE_EXTERNAL_OES:
             break;
         default:
@@ -6125,14 +6126,21 @@ void GL_APIENTRY glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image
 
         if(context)
         {
-            es2::TextureExternal *texture = context->getTextureExternal();
+            es2::Texture2D *texture = 0;
+			
+			switch(target)
+			{
+			case GL_TEXTURE_2D:           texture = context->getTexture2D();       break;
+			case GL_TEXTURE_EXTERNAL_OES: texture = context->getTextureExternal(); break;
+			default:                      UNREACHABLE();
+			}
 
             if(!texture)
             {
                 return error(GL_INVALID_OPERATION);
             }
 
-            es2::Image *glImage = static_cast<es2::Image*>(image);
+            egl::Image *glImage = static_cast<egl::Image*>(image);
 
             texture->setImage(glImage);
         }
-- 
1.8.5.2.msysgit.0

