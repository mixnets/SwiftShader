{
  "comments": [
    {
      "key": {
        "uuid": "7eac1b70_a6eff321",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-11-07T15:25:09Z",
      "side": 1,
      "message": "Is this a strict necessity? If so, do you have a link to a document stating that?\n\nI vaguely recall EGL guaranteeing 565 window surface support, but I can\u0027t seem to find the exact spec text for it immediately. I just want to make sure we dot our i\u0027s and cross or t\u0027s, and aren\u0027t missing some conditions or other mandatory formats.",
      "range": {
        "startLine": 9,
        "startChar": 13,
        "endLine": 9,
        "endChar": 18
      },
      "revId": "3ca96964f8f80fa6e5835f645787ff27ee4b3594",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c774e89_52b313d5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 33117
      },
      "writtenOn": "2019-11-07T15:55:33Z",
      "side": 1,
      "message": "565 is still a relatively common format for apps to use in Android. Since we\u0027ve seen issues specific to that format we\u0027d like SwiftShader to support as well so that we can repro such issues entirely in SW.",
      "parentUuid": "7eac1b70_a6eff321",
      "range": {
        "startLine": 9,
        "startChar": 13,
        "endLine": 9,
        "endChar": 18
      },
      "revId": "3ca96964f8f80fa6e5835f645787ff27ee4b3594",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b6df8f0_b6b1e326",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-11-07T18:16:46Z",
      "side": 1,
      "message": "Understood, but my question was more about why dEQP \"wants\" it. I just want to check that this is not an invalid assumption, so that Android devices which choose to remove support for it can get certified, and ANGLE supports them too.\n\nAlso note that EGL red/green/blue/alpha attributes only specify the minimum required bit depth. Implementations can return configs with higher bit depth per component. So we\u0027ll want to determine if that\u0027s desired or not. Personally I wouldn\u0027t mind if 565 went the way of the dodo, especially as a surface format, and I imagine some vendors feel the same way so they may not expose it through Vulkan. As a reference implementation, I think SwiftShader should also set an example as a clean, forward-looking implementation and not one that supports outdated functionality.",
      "parentUuid": "9c774e89_52b313d5",
      "range": {
        "startLine": 9,
        "startChar": 13,
        "endLine": 9,
        "endChar": 18
      },
      "revId": "3ca96964f8f80fa6e5835f645787ff27ee4b3594",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ecabfe2_81db77e5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 33117
      },
      "writtenOn": "2019-11-07T21:27:20Z",
      "side": 1,
      "message": "On mobile, 565 is a performance and resource win on many devices.\nI am not aware of any requirement for 565 support on Android, but every device I\u0027ve seen supports it and there are many apps that will use it to reduce resource impact on the device.\nSwiftShader isn\u0027t as useful as a development vehicle for ANGLE on Android if we can\u0027t support common features like this. I would love to see it go away as well, but the ecosystem isn\u0027t ready yet.",
      "parentUuid": "8b6df8f0_b6b1e326",
      "range": {
        "startLine": 9,
        "startChar": 13,
        "endLine": 9,
        "endChar": 18
      },
      "revId": "3ca96964f8f80fa6e5835f645787ff27ee4b3594",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "545ff79b_7247af39",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-11-07T15:25:09Z",
      "side": 1,
      "message": "Under what situation are you running into this? We shouldn\u0027t typically change LLVM code. It\u0027s more likely we need to change some LLVM setup code in Reactor or build config.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 16,
        "endChar": 13
      },
      "revId": "3ca96964f8f80fa6e5835f645787ff27ee4b3594",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e354a270_4942419f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 33117
      },
      "writtenOn": "2019-11-07T15:55:33Z",
      "side": 1,
      "message": "This was fixed shortly after I did this. I\u0027ll remove this part of the change.",
      "parentUuid": "545ff79b_7247af39",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 16,
        "endChar": 13
      },
      "revId": "3ca96964f8f80fa6e5835f645787ff27ee4b3594",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}