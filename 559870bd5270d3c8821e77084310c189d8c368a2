{
  "comments": [
    {
      "key": {
        "uuid": "63c2a294_31c78682",
        "filename": "src/Pipeline/ComputeProgram.cpp",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-12-11T02:21:29Z",
      "side": 1,
      "message": "This is a bit ugly",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 33,
        "endChar": 2
      },
      "revId": "559870bd5270d3c8821e77084310c189d8c368a2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6166fee6_c8ad46b8",
        "filename": "src/Pipeline/ComputeProgram.cpp",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-12-11T10:09:12Z",
      "side": 1,
      "message": "Unfortunate side-effect of insisting the opening brace starts on a newline.",
      "parentUuid": "63c2a294_31c78682",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 33,
        "endChar": 2
      },
      "revId": "559870bd5270d3c8821e77084310c189d8c368a2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d4a8a75_9eafbd49",
        "filename": "src/Pipeline/ComputeProgram.cpp",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 6070
      },
      "writtenOn": "2019-12-12T08:14:57Z",
      "side": 1,
      "message": "FWIW note that in the review of the code that introduced this enum I argued we shouldn\u0027t have these short names. When I see \"numWorkgroups[X]\" I expect X to be a local variable, not a constant.\n\nSo I hope one day this will get refactored and become moot.\n\nThat said I do think single-line enums can be useful, but that probably becomes a case for \"// clang-format off\", or a feature request.",
      "parentUuid": "6166fee6_c8ad46b8",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 33,
        "endChar": 2
      },
      "revId": "559870bd5270d3c8821e77084310c189d8c368a2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7de959d3_4dbccc2c",
        "filename": "src/Pipeline/ComputeProgram.cpp",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-12-12T09:31:26Z",
      "side": 1,
      "message": "I still argue that they\u0027re beneficial to indicate that we\u0027re indexing based on dimensionality instead of an array element, especially as this file accesses builtins that are a mix of both.\n\n\u003e I expect X to be a local variable, not a constant.\n\nI would if it were \u0027x\u0027, but capitalized symbols are typically understood to be static and constant, much like MY_BIG_SHOUTY_FLAG.",
      "parentUuid": "1d4a8a75_9eafbd49",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 33,
        "endChar": 2
      },
      "revId": "559870bd5270d3c8821e77084310c189d8c368a2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e5b508a_f7a81650",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 4
      },
      "lineNbr": 477,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-12-11T02:21:29Z",
      "side": 1,
      "message": "this is weird",
      "range": {
        "startLine": 476,
        "startChar": 0,
        "endLine": 477,
        "endChar": 36
      },
      "revId": "559870bd5270d3c8821e77084310c189d8c368a2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a7b2526_14e3033b",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 4
      },
      "lineNbr": 477,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-12-11T10:09:12Z",
      "side": 1,
      "message": "It\u0027s because there\u0027s a missing semicolon at the end of Until() and it thinks this is a continuation.\nFixed in parent change.",
      "parentUuid": "4e5b508a_f7a81650",
      "range": {
        "startLine": 476,
        "startChar": 0,
        "endLine": 477,
        "endChar": 36
      },
      "revId": "559870bd5270d3c8821e77084310c189d8c368a2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ee1398c_94f1e0aa",
        "filename": "src/Pipeline/ShaderCore.hpp",
        "patchSetId": 4
      },
      "lineNbr": 545,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-12-11T02:21:29Z",
      "side": 1,
      "message": "This looks weird",
      "range": {
        "startLine": 514,
        "startChar": 0,
        "endLine": 545,
        "endChar": 36
      },
      "revId": "559870bd5270d3c8821e77084310c189d8c368a2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "435dbb94_e5bc2fef",
        "filename": "src/Pipeline/ShaderCore.hpp",
        "patchSetId": 4
      },
      "lineNbr": 545,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-12-11T10:09:12Z",
      "side": 1,
      "message": "It\u0027s preserving the string breaks from the old formatting.\nFixed in parent change.",
      "parentUuid": "7ee1398c_94f1e0aa",
      "range": {
        "startLine": 514,
        "startChar": 0,
        "endLine": 545,
        "endChar": 36
      },
      "revId": "559870bd5270d3c8821e77084310c189d8c368a2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07e13465_fe53799c",
        "filename": "src/System/CPUID.cpp",
        "patchSetId": 4
      },
      "lineNbr": 294,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-12-11T02:21:29Z",
      "side": 1,
      "message": "Don\u0027t know what rule causes all these spaces to be added",
      "range": {
        "startLine": 294,
        "startChar": 1,
        "endLine": 294,
        "endChar": 28
      },
      "revId": "559870bd5270d3c8821e77084310c189d8c368a2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b007466f_c7b17f0f",
        "filename": "src/System/CPUID.cpp",
        "patchSetId": 4
      },
      "lineNbr": 294,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-12-11T10:09:12Z",
      "side": 1,
      "message": "Yeah, this one has me a little stumped. It goes away with a newline between the #else and the comment.\nDoesn\u0027t seem to be affected by continuation settings.",
      "parentUuid": "07e13465_fe53799c",
      "range": {
        "startLine": 294,
        "startChar": 1,
        "endLine": 294,
        "endChar": 28
      },
      "revId": "559870bd5270d3c8821e77084310c189d8c368a2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9061cdea_34660c80",
        "filename": "src/Vulkan/VkPhysicalDevice.cpp",
        "patchSetId": 4
      },
      "lineNbr": 234,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-12-11T02:21:29Z",
      "side": 1,
      "message": "meh",
      "range": {
        "startLine": 230,
        "startChar": 0,
        "endLine": 234,
        "endChar": 81
      },
      "revId": "559870bd5270d3c8821e77084310c189d8c368a2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8779ad72_93c6ec47",
        "filename": "src/Vulkan/VkPhysicalDevice.cpp",
        "patchSetId": 4
      },
      "lineNbr": 234,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-12-11T10:09:12Z",
      "side": 1,
      "message": "It\u0027s done that because of the trailing comma.\nFixed in parent change.",
      "parentUuid": "9061cdea_34660c80",
      "range": {
        "startLine": 230,
        "startChar": 0,
        "endLine": 234,
        "endChar": 81
      },
      "revId": "559870bd5270d3c8821e77084310c189d8c368a2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51c295c0_d903d853",
        "filename": "src/Vulkan/VkPhysicalDevice.cpp",
        "patchSetId": 4
      },
      "lineNbr": 859,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-12-11T02:21:29Z",
      "side": 1,
      "message": "why",
      "range": {
        "startLine": 856,
        "startChar": 10,
        "endLine": 859,
        "endChar": 49
      },
      "revId": "559870bd5270d3c8821e77084310c189d8c368a2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "caf5ed92_3bb3a663",
        "filename": "src/Vulkan/VkPhysicalDevice.cpp",
        "patchSetId": 4
      },
      "lineNbr": 859,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-12-11T10:09:12Z",
      "side": 1,
      "message": "It\u0027s an expression line continuation.\nCan we worked around by wrapping the expression in parenthesis, due to `AlignAfterOpenBracket: BAS_Align`\n(https://clang.llvm.org/docs/ClangFormatStyleOptions.html)\n\nFixed in parent change.",
      "parentUuid": "51c295c0_d903d853",
      "range": {
        "startLine": 856,
        "startChar": 10,
        "endLine": 859,
        "endChar": 49
      },
      "revId": "559870bd5270d3c8821e77084310c189d8c368a2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}