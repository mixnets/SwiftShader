{
  "comments": [
    {
      "key": {
        "uuid": "8b3abef4_5a919570",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-04-12T15:56:22Z",
      "side": 1,
      "message": "I think this extension might be of little use on its own. It\u0027s typically combined with GL_NV_draw_buffers, which makes it practically the same as GL_EXT_draw_buffers. The latter in turn directly corresponds to the functionality we already support for OpenGL ES 3.0. See b/19353282. It\u0027s also the more generic extension, instead of an NVIDIA specific one. Furthermore, it\u0027s also exposed as a WebGL extension, and we have good test coverage for it.\n\nWould you mind implementing it in a separate patch? Or do you really specifically and only need GL_NV_fbo_color_attachments?",
      "range": {
        "startLine": 7,
        "startChar": 37,
        "endLine": 7,
        "endChar": 64
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebbdfaca_b3dd585c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 5655
      },
      "writtenOn": "2016-04-12T17:38:16Z",
      "side": 1,
      "message": "MAX_COLOR_ATTACHMENTS is not specified for glGetIntegerv in GLES 2.0, but it is specified by this extension, which is why I put it in.  Ion (http://go/ion), notably, assumes the presence of MAX_COLOR_ATTACHMENTS, so I added GL_NV_fbo_color_attachments as sort of the \"lowest-cost\" way to add that in.\n\nI think it\u0027s pretty trivial (it just means removing the UNIMPLEMENTED() block in the GetIntegerv entry point for this parameter), but if you\u0027d like it in a separate patch I can do that.",
      "parentUuid": "8b3abef4_5a919570",
      "range": {
        "startLine": 7,
        "startChar": 37,
        "endLine": 7,
        "endChar": 64
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bcb66e2_6f742108",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-04-13T21:41:37Z",
      "side": 1,
      "message": "Are you implementing the MAX_COLOR_ATTACHMENTS query just to avoid the assert, or because Ion really uses the return value? The assert is a bug. It should simply return GL_INVALID_ENUM if the GL version is less than 3.0, by returning false from Context::getIntegerv(). There are some other queries in that function which already do that.",
      "parentUuid": "ebbdfaca_b3dd585c",
      "range": {
        "startLine": 7,
        "startChar": 37,
        "endLine": 7,
        "endChar": 64
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bcb66e2_3a99c9f7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 5655
      },
      "writtenOn": "2016-04-13T22:01:07Z",
      "side": 1,
      "message": "Both.  It shouldn\u0027t assert, but it would also be nice to get a readback value for that query.",
      "parentUuid": "4bcb66e2_6f742108",
      "range": {
        "startLine": 7,
        "startChar": 37,
        "endLine": 7,
        "endChar": 64
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b3abef4_bac8a174",
        "filename": "src/OpenGL/libGLESv2/Context.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3218,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-04-12T15:56:22Z",
      "side": 1,
      "message": "That\u0027s an interesting use of GL_INVALID_ENUM. It\u0027s an error code and not necessarily a placeholder for an actual invalid enumeration value. We\u0027ve typically been using GL_NONE for that. The important thing is to ensure that it\u0027s not aliased by any other valid enum. But it looks like there\u0027s no risk of that for GL_INVALID_ENUM, while GL_NONE aliases GL_POINTS, and GL_NONE wasn\u0027t even defined before framebuffer support.\n\nSo I think we should GL_INVALID_ENUM in some other parts of the code as well. I\u0027ll file a bug for that.\n\nThanks!",
      "range": {
        "startLine": 3217,
        "startChar": 1,
        "endLine": 3218,
        "endChar": 35
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebbdfaca_93793c05",
        "filename": "src/OpenGL/libGLESv2/Context.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3218,
      "author": {
        "id": 5655
      },
      "writtenOn": "2016-04-12T17:38:16Z",
      "side": 1,
      "message": "Should I use GL_NONE here in keeping with convention and let y\u0027all change it en masse, or start using GL_INVALID_ENUM here?",
      "parentUuid": "8b3abef4_bac8a174",
      "range": {
        "startLine": 3217,
        "startChar": 1,
        "endLine": 3218,
        "endChar": 35
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bcb66e2_7aa34123",
        "filename": "src/OpenGL/libGLESv2/Context.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3218,
      "author": {
        "id": 5655
      },
      "writtenOn": "2016-04-13T22:01:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ebbdfaca_93793c05",
      "range": {
        "startLine": 3217,
        "startChar": 1,
        "endLine": 3218,
        "endChar": 35
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bcb66e2_1a2dedd7",
        "filename": "src/OpenGL/libGLESv2/Context.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3229,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-04-13T21:41:37Z",
      "side": 1,
      "message": "If I\u0027m reading the extension spec correctly, then it actually doesn\u0027t have an implementation-chosen format and type for depth. It only applies to the color buffer.",
      "range": {
        "startLine": 3217,
        "startChar": 1,
        "endLine": 3229,
        "endChar": 2
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bcb66e2_bad65970",
        "filename": "src/OpenGL/libGLESv2/Context.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3229,
      "author": {
        "id": 5655
      },
      "writtenOn": "2016-04-13T22:01:07Z",
      "side": 1,
      "message": "I suppose not, but the logic is the same.  Should it be renamed?",
      "parentUuid": "4bcb66e2_1a2dedd7",
      "range": {
        "startLine": 3217,
        "startChar": 1,
        "endLine": 3229,
        "endChar": 2
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b3abef4_7a6d7901",
        "filename": "src/OpenGL/libGLESv2/Context.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3265,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-04-12T15:56:22Z",
      "side": 1,
      "message": "I think this should be GL_INVALID_OPERATION (even before your change). The framebuffer can be complete but not have a depth buffer. I\u0027m not entirely sure if there\u0027s an extension which allows to not have a color buffer, but even without that this is not the right location to generate a GL_OUT_OF_MEMORY if the pointer is unexpectedly null.",
      "range": {
        "startLine": 3265,
        "startChar": 15,
        "endLine": 3265,
        "endChar": 31
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebbdfaca_16e35af1",
        "filename": "src/OpenGL/libGLESv2/Context.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3265,
      "author": {
        "id": 5655
      },
      "writtenOn": "2016-04-12T17:38:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8b3abef4_7a6d7901",
      "range": {
        "startLine": 3265,
        "startChar": 15,
        "endLine": 3265,
        "endChar": 31
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bcb66e2_3a626911",
        "filename": "src/OpenGL/libGLESv2/Context.cpp",
        "patchSetId": 2
      },
      "lineNbr": 4280,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-04-13T21:41:37Z",
      "side": 1,
      "message": "I couldn\u0027t find any extension by that name in the registry: https://www.khronos.org/registry/gles/ There\u0027s only GL_NV_read_depth_stencil",
      "range": {
        "startLine": 4280,
        "startChar": 19,
        "endLine": 4280,
        "endChar": 35
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bcb66e2_fa6571aa",
        "filename": "src/OpenGL/libGLESv2/Context.cpp",
        "patchSetId": 2
      },
      "lineNbr": 4280,
      "author": {
        "id": 5655
      },
      "writtenOn": "2016-04-13T22:01:07Z",
      "side": 1,
      "message": "The GL_NV_read_depth_stencil extension defines three name strings:\n\nGL_NV_read_depth\nGL_NV_read_depth_stencil\nGL_NV_read_stencil\n\nso implementation do not have to implement all the behavior.  In our case we only implement GL_NV_read_depth.",
      "parentUuid": "4bcb66e2_3a626911",
      "range": {
        "startLine": 4280,
        "startChar": 19,
        "endLine": 4280,
        "endChar": 35
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b3abef4_5a007527",
        "filename": "src/OpenGL/libGLESv2/Framebuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 623,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-04-12T15:56:22Z",
      "side": 1,
      "message": "This is confusing at first glance, but maybe that\u0027s only because I\u0027m used to seeing GL_INVALID_ENUM being returned only when it\u0027s the error that will be generated.",
      "range": {
        "startLine": 622,
        "startChar": 1,
        "endLine": 623,
        "endChar": 24
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebbdfaca_338b084e",
        "filename": "src/OpenGL/libGLESv2/Framebuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 623,
      "author": {
        "id": 5655
      },
      "writtenOn": "2016-04-12T17:38:16Z",
      "side": 1,
      "message": "What do you think works better here then?  I\u0027d like to return something that indicates error.",
      "parentUuid": "8b3abef4_5a007527",
      "range": {
        "startLine": 622,
        "startChar": 1,
        "endLine": 623,
        "endChar": 24
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bcb66e2_ba63f9e7",
        "filename": "src/OpenGL/libGLESv2/utilities.cpp",
        "patchSetId": 2
      },
      "lineNbr": 671,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-04-13T21:41:37Z",
      "side": 1,
      "message": "Should validate that \"If the \u003ctype\u003e is FLOAT and the depth buffer is not a float buffer, an INVALID_OPERATION error occurs. If the \u003ctype\u003e is UNSIGNED_SHORT or UNSIGNED_INT_24_8_OES and the depth buffer is a float buffer, an INVALID_OPERATION error occurs.\"",
      "range": {
        "startLine": 655,
        "startChar": 3,
        "endLine": 671,
        "endChar": 9
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bcb66e2_3acb89cb",
        "filename": "src/OpenGL/libGLESv2/utilities.cpp",
        "patchSetId": 2
      },
      "lineNbr": 671,
      "author": {
        "id": 5655
      },
      "writtenOn": "2016-04-13T22:01:07Z",
      "side": 1,
      "message": "This is already validated by the (internalType !\u003d type) check.",
      "parentUuid": "4bcb66e2_ba63f9e7",
      "range": {
        "startLine": 655,
        "startChar": 3,
        "endLine": 671,
        "endChar": 9
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb617a20_d3be34f0",
        "filename": "src/Renderer/Blitter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 296,
      "author": {
        "id": 5050
      },
      "writtenOn": "2016-04-12T16:53:23Z",
      "side": 1,
      "message": "I think this is equivalent to:\n*Pointer\u003cInt\u003e(element)",
      "range": {
        "startLine": 296,
        "startChar": 15,
        "endLine": 296,
        "endChar": 45
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebbdfaca_33a4e8de",
        "filename": "src/Renderer/Blitter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 296,
      "author": {
        "id": 5655
      },
      "writtenOn": "2016-04-12T17:38:16Z",
      "side": 1,
      "message": "Probably, but I\u0027m using the same convention as the rest of the code.  If you\u0027d still like, I can change it.",
      "parentUuid": "eb617a20_d3be34f0",
      "range": {
        "startLine": 296,
        "startChar": 15,
        "endLine": 296,
        "endChar": 45
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb617a20_b6a446cd",
        "filename": "src/Renderer/Blitter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 296,
      "author": {
        "id": 5050
      },
      "writtenOn": "2016-04-12T17:45:42Z",
      "side": 1,
      "message": "It\u0027s all right, it was just a nit, I can simplify the blitter code later.",
      "parentUuid": "ebbdfaca_33a4e8de",
      "range": {
        "startLine": 296,
        "startChar": 15,
        "endLine": 296,
        "endChar": 45
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bcb66e2_3a78a98e",
        "filename": "src/Renderer/Blitter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 296,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-04-13T21:41:37Z",
      "side": 1,
      "message": "Alexis, please file a cleanup bug.",
      "parentUuid": "eb617a20_b6a446cd",
      "range": {
        "startLine": 296,
        "startChar": 15,
        "endLine": 296,
        "endChar": 45
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb617a20_339fa891",
        "filename": "src/Renderer/Blitter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 299,
      "author": {
        "id": 5050
      },
      "writtenOn": "2016-04-12T16:53:23Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 299,
        "startChar": 15,
        "endLine": 299,
        "endChar": 45
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebbdfaca_53a964b5",
        "filename": "src/Renderer/Blitter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 299,
      "author": {
        "id": 5655
      },
      "writtenOn": "2016-04-12T17:38:16Z",
      "side": 1,
      "message": "(see above)",
      "parentUuid": "eb617a20_339fa891",
      "range": {
        "startLine": 299,
        "startChar": 15,
        "endLine": 299,
        "endChar": 45
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb617a20_13a42cde",
        "filename": "src/Renderer/Blitter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 655,
      "author": {
        "id": 5050
      },
      "writtenOn": "2016-04-12T16:53:23Z",
      "side": 1,
      "message": "I think this is equivalent to:\n*Pointer\u003cInt\u003e(element) \u003d RoundInt(Float(c.x));",
      "range": {
        "startLine": 655,
        "startChar": 3,
        "endLine": 655,
        "endChar": 56
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebbdfaca_73ae60c0",
        "filename": "src/Renderer/Blitter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 655,
      "author": {
        "id": 5655
      },
      "writtenOn": "2016-04-12T17:38:16Z",
      "side": 1,
      "message": "(see above)",
      "parentUuid": "eb617a20_13a42cde",
      "range": {
        "startLine": 655,
        "startChar": 3,
        "endLine": 655,
        "endChar": 56
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb617a20_73a920b6",
        "filename": "src/Renderer/Blitter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 658,
      "author": {
        "id": 5050
      },
      "writtenOn": "2016-04-12T16:53:23Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 658,
        "startChar": 3,
        "endLine": 658,
        "endChar": 55
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebbdfaca_93921c81",
        "filename": "src/Renderer/Blitter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 658,
      "author": {
        "id": 5655
      },
      "writtenOn": "2016-04-12T17:38:16Z",
      "side": 1,
      "message": "(see above)",
      "parentUuid": "eb617a20_73a920b6",
      "range": {
        "startLine": 658,
        "startChar": 3,
        "endLine": 658,
        "endChar": 55
      },
      "revId": "02c0c747b4dc7e5440c1d9aa6a221827e762e639",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}