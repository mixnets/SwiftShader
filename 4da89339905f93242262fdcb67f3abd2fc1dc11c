{
  "comments": [
    {
      "key": {
        "uuid": "1069fc46_caaa8a38",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-01-22T06:15:06Z",
      "side": 1,
      "message": "Generally we can\u0027t use submodules because other repositories that include SwiftShader may not support them (Android, Chrome, Piper, etc.).",
      "range": {
        "startLine": 10,
        "startChar": 28,
        "endLine": 10,
        "endChar": 37
      },
      "revId": "4da89339905f93242262fdcb67f3abd2fc1dc11c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80f081bb_0f2352b1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-01-23T05:53:41Z",
      "side": 1,
      "message": "OK.. this is not the first submodule, though :).\n\nIn Android build system we wouldn\u0027t want to use the submodule at all -- we already have a good blueprint setup for SPIRV-Tools. I don\u0027t know what the Chrome or Piper situations are.",
      "parentUuid": "1069fc46_caaa8a38",
      "range": {
        "startLine": 10,
        "startChar": 28,
        "endLine": 10,
        "endChar": 37
      },
      "revId": "4da89339905f93242262fdcb67f3abd2fc1dc11c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12d5994d_d1c74f53",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 5065
      },
      "writtenOn": "2019-01-24T15:01:13Z",
      "side": 1,
      "message": "The SPIRV-Tools repo contains the necessary BUILD.gn file. When compiling in Chromium we should use the copy of SPIRV-Tools in chromium\u0027s src/third_party/SPIRV-Tools directory.",
      "parentUuid": "80f081bb_0f2352b1",
      "range": {
        "startLine": 10,
        "startChar": 28,
        "endLine": 10,
        "endChar": 37
      },
      "revId": "4da89339905f93242262fdcb67f3abd2fc1dc11c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a762b9da_c5e4b6d5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-01-28T20:54:44Z",
      "side": 1,
      "message": "@Chris: Indeed it\u0027s not the first submodule, but googletest is not essential to building SwiftShader libraries, and every platform where we currently run the unit tests have it available (although I notice there was a little hickup for Kokoro).\n\nThere are many advantages to using a subtree:\n- Universally supported\n- Single checkout (independence of external repo availability)\n- Single setup (no separate approach for Android, Chrome, Piper, etc.)\n- Supports temporarily diverging (or permanently if justified)\n\nThat said, if SPIRV-Tools would be used for non-essential development tools then a submodule seems appropriate to me.\n\n@Corentin: I\u0027m hesitant adding that kind of dependency. SwiftShader is used in many projects (and more to come), and the maintenance burden can get significant if we don\u0027t have a unified approach for dependency handling. For example how do we update them all at the same time without breakages? Also what if Chrome can\u0027t update to a newer version for a while, while we need the latest revision? With a subtree these aren\u0027t an issue.",
      "parentUuid": "12d5994d_d1c74f53",
      "range": {
        "startLine": 10,
        "startChar": 28,
        "endLine": 10,
        "endChar": 37
      },
      "revId": "4da89339905f93242262fdcb67f3abd2fc1dc11c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd103c6f_727bdd9e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-01-22T06:15:06Z",
      "side": 1,
      "message": "Haven\u0027t looked into this in depth yet, but will we want this in the longer term? In other words, do you expect several other Vulkan drivers to use SPIRV-Tools, or is it aimed more at use by applications/engines/frameworks?",
      "range": {
        "startLine": 12,
        "startChar": 57,
        "endLine": 13,
        "endChar": 40
      },
      "revId": "4da89339905f93242262fdcb67f3abd2fc1dc11c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "435c2bc4_80ea9ff8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-01-23T05:53:41Z",
      "side": 1,
      "message": "I expect that we will continue using SPIRV-Tools for some time. It\u0027s aimed at \"anything that wants to consume and reason about SPIRV\". Most other drivers don\u0027t use it, but only because the interesting capabilities (a useful SPIRV-to-SPIRV transforms) arrived fairly late, after those implementations were well underway. I don\u0027t see much benefit in us doing our own implementation of constant specialization \u0026 propagation, for example, unless the performance turns out to be hilarious.",
      "parentUuid": "cd103c6f_727bdd9e",
      "range": {
        "startLine": 12,
        "startChar": 57,
        "endLine": 13,
        "endChar": 40
      },
      "revId": "4da89339905f93242262fdcb67f3abd2fc1dc11c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6f5121f_178ace12",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-01-23T05:56:22Z",
      "side": 1,
      "message": "On perf note from last comment -- if that turns out to be interesting, pipeline cache objects are a good place to stash things like post-optimization SPIRV :)",
      "parentUuid": "435c2bc4_80ea9ff8",
      "range": {
        "startLine": 12,
        "startChar": 57,
        "endLine": 13,
        "endChar": 40
      },
      "revId": "4da89339905f93242262fdcb67f3abd2fc1dc11c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32febc84_17562f0b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-01-28T20:54:44Z",
      "side": 1,
      "message": "Thanks for elaborating. As a follow-up question, do we actually need SPIRV-Tools at this point? I see it \"includes an assembler, binary module parser, disassembler, validator, and optimizer\". Aside from a parser I don\u0027t think Pastel 1.0 strictly needs these parts, and this parser might be much more specialized for these other purposes than what we need.\n\nFor future optimization work we could pick the parts we need instead of including the whole thing, which still seems to me like it\u0027s aimed primarily at software above the driver level.",
      "parentUuid": "f6f5121f_178ace12",
      "range": {
        "startLine": 12,
        "startChar": 57,
        "endLine": 13,
        "endChar": 40
      },
      "revId": "4da89339905f93242262fdcb67f3abd2fc1dc11c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4346ca0f_03cfb136",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-01-28T21:10:01Z",
      "side": 1,
      "message": "I need some optimization passes to normalize the SPIRV before our backend sees it. The first obvious case is specialization constant substitution, freezing, and constant propagation. The second is exhaustive inlining, so we don\u0027t have to care about functions on day 1.",
      "parentUuid": "32febc84_17562f0b",
      "range": {
        "startLine": 12,
        "startChar": 57,
        "endLine": 13,
        "endChar": 40
      },
      "revId": "4da89339905f93242262fdcb67f3abd2fc1dc11c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54d404f0_f62cc64e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-01-22T06:15:06Z",
      "side": 1,
      "message": "Should probably get it working early on. You could let CMake generate the project file and then make it path relative, or create a custom one if that\u0027s cleaner (Alexis might be able to help).",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 29
      },
      "revId": "4da89339905f93242262fdcb67f3abd2fc1dc11c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    }
  ]
}