{
  "comments": [
    {
      "key": {
        "uuid": "847d58ac_04b8fb93",
        "filename": "src/Pipeline/SpirvShader.cpp",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 5065
      },
      "writtenOn": "2019-01-02T10:17:16Z",
      "side": 1,
      "message": "How do you plan to deal with primitive types and vector/matrices of them vs. user-defined types?",
      "revId": "73aa019f1150f6b90fb94465ae846e7834222214",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66fa35df_860e796e",
        "filename": "src/Pipeline/SpirvShader.cpp",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-01-02T16:02:49Z",
      "side": 1,
      "message": "I want to lower every object to Object::sizeInComponents scalars (per lane, for nonuniform objects).",
      "parentUuid": "847d58ac_04b8fb93",
      "revId": "73aa019f1150f6b90fb94465ae846e7834222214",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f41dcff_db569f21",
        "filename": "src/Pipeline/SpirvShader.cpp",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 5065
      },
      "writtenOn": "2019-01-02T10:17:16Z",
      "side": 1,
      "message": "nit: can we spell out autos?",
      "revId": "73aa019f1150f6b90fb94465ae846e7834222214",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14330db3_2d092414",
        "filename": "src/Pipeline/SpirvShader.cpp",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-01-02T16:02:49Z",
      "side": 1,
      "message": "Not keen. In this case it\u0027s not painful, but elsewhere there\u0027s plenty of iterator types etc.\n\nNicolas: we\u0027ve only just introduced c++11 in swiftshader -- what are your thoughts on use of auto?",
      "parentUuid": "0f41dcff_db569f21",
      "revId": "73aa019f1150f6b90fb94465ae846e7834222214",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef7d968e_1afa9b1b",
        "filename": "src/Pipeline/SpirvShader.cpp",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-01-03T03:27:54Z",
      "side": 1,
      "message": "I think https://google.github.io/styleguide/cppguide.html#auto offers sound advice in this case. Auto is great to avoid the unnecessary verbosity often encountered with templated types (which hurt readability), but in other cases repeating the type can also improve readability and make the intent more explicit.\n\nNote that SwiftShader is a fairly low-level project, and many types are set in stone by the API spec, so we generally don\u0027t want the \"hide all implementation details\" properties of Sutter\u0027s AAA style.\n\nThat said, I don\u0027t think your relatively liberal use of auto has been harmful thus far. Just keep practicing judgement for each individual case, with a focus on readability.",
      "parentUuid": "14330db3_2d092414",
      "revId": "73aa019f1150f6b90fb94465ae846e7834222214",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8251719d_84a309a4",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-01-02T06:48:51Z",
      "side": 1,
      "message": "FYI I think this is a very good practice and not paranoid at all.",
      "range": {
        "startLine": 99,
        "startChar": 27,
        "endLine": 99,
        "endChar": 35
      },
      "revId": "73aa019f1150f6b90fb94465ae846e7834222214",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7ad1337_84d28645",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-01-02T06:48:51Z",
      "side": 1,
      "message": "nit: I would split the type definition from the member variable declaration here.",
      "range": {
        "startLine": 103,
        "startChar": 3,
        "endLine": 103,
        "endChar": 26
      },
      "revId": "73aa019f1150f6b90fb94465ae846e7834222214",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d1b4d35_9f7c33a0",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-01-02T16:02:49Z",
      "side": 1,
      "message": "OK.",
      "parentUuid": "c7ad1337_84d28645",
      "range": {
        "startLine": 103,
        "startChar": 3,
        "endLine": 103,
        "endChar": 26
      },
      "revId": "73aa019f1150f6b90fb94465ae846e7834222214",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4f77bbf_4686cb01",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 5065
      },
      "writtenOn": "2019-01-02T10:17:16Z",
      "side": 1,
      "message": "Would it make sense to have a map for types, a map for variables / values? Then we could have a getter that ASSERTs that the id queried is in the map.",
      "revId": "73aa019f1150f6b90fb94465ae846e7834222214",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f73f0e92_65956e11",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-01-02T16:02:49Z",
      "side": 1,
      "message": "I could split this, yes. Do you want just types vs values, or more fine-grained?",
      "parentUuid": "f4f77bbf_4686cb01",
      "revId": "73aa019f1150f6b90fb94465ae846e7834222214",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26024987_25292b6c",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 5065
      },
      "writtenOn": "2019-01-03T09:09:52Z",
      "side": 1,
      "message": "I think types vs values gives the most bang for buck right now. Do you think variable vs. constants is important? I\u0027m not 100% sure.",
      "parentUuid": "f73f0e92_65956e11",
      "revId": "73aa019f1150f6b90fb94465ae846e7834222214",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa2d21c9_2bcb60b6",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-01-14T22:34:44Z",
      "side": 1,
      "message": "Until we want to flatten constants early, I don\u0027t think it\u0027s super interesting.\n\nI want labels separate. (but not touching labels here yet, so won\u0027t do it now).",
      "parentUuid": "26024987_25292b6c",
      "revId": "73aa019f1150f6b90fb94465ae846e7834222214",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}