{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3f4acf58_4be63d5d",
        "filename": "tests/VulkanBenchmarks/VulkanBenchmarks.cpp",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-01-20T04:06:14Z",
      "side": 1,
      "message": "I\u0027m not a huge fan of this extra namespace. For unit tests and benchmarks we should never have multiple classes with the same name (that we ourselves wrote, i.e. vulkan.hpp\u0027s vk:: namespace helps clarify which are the \"native\" Vulkan types). I don\u0027t think it helps reading nor writing.\n\nLikewise the extra vkw/ subdirectory for the include files seems redundant.",
      "range": {
        "startLine": 208,
        "startChar": 19,
        "endLine": 208,
        "endChar": 24
      },
      "revId": "40e1716b78f150ef6ac56d09394ab3da82bbf710",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e61cb7d6_bc02988f",
        "filename": "tests/VulkanBenchmarks/VulkanBenchmarks.cpp",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 9669
      },
      "writtenOn": "2021-01-20T16:22:20Z",
      "side": 1,
      "message": "In general, I would disagree only because namespacing is good practice in C++, especially for reusable libraries. It is also good practice to \"namespace\" include directories so that you can tell at a glance when looking at includes what the dependencies are. However, I know that we don\u0027t generally follow this practice in SwiftShader, so I will go ahead and remove the namespace in code and in the include directory.",
      "parentUuid": "3f4acf58_4be63d5d",
      "range": {
        "startLine": 208,
        "startChar": 19,
        "endLine": 208,
        "endChar": 24
      },
      "revId": "40e1716b78f150ef6ac56d09394ab3da82bbf710",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f588620_5516967f",
        "filename": "tests/VulkanBenchmarks/VulkanBenchmarks.cpp",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 9669
      },
      "writtenOn": "2021-01-20T18:17:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e61cb7d6_bc02988f",
      "range": {
        "startLine": 208,
        "startChar": 19,
        "endLine": 208,
        "endChar": 24
      },
      "revId": "40e1716b78f150ef6ac56d09394ab3da82bbf710",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24ab0132_b880f11e",
        "filename": "tests/VulkanBenchmarks/VulkanBenchmarks.cpp",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-01-20T19:21:50Z",
      "side": 1,
      "message": "FWIW, I don\u0027t think not following this practice in other parts of SwiftShader should be a direct factor here. I generally agree namespacing is useful, but I don\u0027t think it should be used without weighing the pros and cons. It affects readability and writability, and hides the problem of things using the same generic name when we should really use more descriptive ones.\n\nIf we\u0027re not careful it leads to falling into the \"Every problem in computer science can be solved with another level of indirection, except for the problem of too many layers of indirection.\" trap. We can add it back if for some reason it becomes useful later. Admittedly in some cases that\u0027s harder than doing it from the get go, but that\u0027s what design/architecture is about, and at this point I don\u0027t think our test/benchmark suite will evolve to the point where we would end up with name clashes with other libraries, with that being an indication of a problem that needs a different resolution.\n\nAnyway, just my 2 cents. Thanks for the revision.",
      "parentUuid": "9f588620_5516967f",
      "range": {
        "startLine": 208,
        "startChar": 19,
        "endLine": 208,
        "endChar": 24
      },
      "revId": "40e1716b78f150ef6ac56d09394ab3da82bbf710",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9b7c553_6a974402",
        "filename": "tests/VulkanBenchmarks/VulkanBenchmarks.cpp",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 9669
      },
      "writtenOn": "2021-01-20T19:27:50Z",
      "side": 1,
      "message": "Yes, I understand your point, but I actually am pro-namespacing, both in-code and include path namespacing, because I believe it actually increases readability -- with the caveat that namespaces be short (stuff like \"MyFramework::MyLibrary::MyComponent::MyType\" is terrible, but \"vkw::MyType\" seems alright). For paths, in particular, I find it very helpful when reading code to understand where my dependencies come from. I like to think of each library as a layer, and seeing the layer dependencies in-code is useful.\n\nAnyway, just an opinion ðŸ˜Š",
      "parentUuid": "24ab0132_b880f11e",
      "range": {
        "startLine": 208,
        "startChar": 19,
        "endLine": 208,
        "endChar": 24
      },
      "revId": "40e1716b78f150ef6ac56d09394ab3da82bbf710",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08e18b57_a6ad205e",
        "filename": "tests/VulkanBenchmarks/VulkanBenchmarks.cpp",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-01-25T21:20:13Z",
      "side": 1,
      "message": "I agree 100% it\u0027s useful for discerning between layers. For project Bunker I think we should get much stricter about what goes in the vk:: namespace and what goes in sw::\n\nFor Reactor we already have a better separation now than prior to Pastel, but there might be room for a layer of utilities which is built on top of Reactor\u0027s basic interface but which is not SwiftShader specific (especially once Reactor has been made a standalone project and we want others to benefit from this layer as well). We\u0027ll also have an rr::SIMD:: namespace for wide vector types.\n\nThat said, for microbenchmarks it seems like overkill. I don\u0027t think I want to have to worry about what goes in the abstraction layer and what does not. It seems the distinction is too arbitrary, since we should be free to make any Vulkan API call we might need for the test. Again, I\u0027m not dead set on keeping it this way, a namespace can be introduced when the benefits clearly outweigh the downsides, but at the moment I don\u0027t see it yet.",
      "parentUuid": "f9b7c553_6a974402",
      "range": {
        "startLine": 208,
        "startChar": 19,
        "endLine": 208,
        "endChar": 24
      },
      "revId": "40e1716b78f150ef6ac56d09394ab3da82bbf710",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}