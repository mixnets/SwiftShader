{
  "comments": [
    {
      "key": {
        "uuid": "2fa8ae47_70cfc65a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 9,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-07-31T20:27:33Z",
      "side": 1,
      "message": "typo: complements",
      "range": {
        "startLine": 9,
        "startChar": 5,
        "endLine": 9,
        "endChar": 16
      },
      "revId": "b524c65095051ad483a9a59862abbacc65b2d126",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "530c5312_318db7ac",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 14,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-07-31T20:27:33Z",
      "side": 1,
      "message": "Awesome, this confirms it\u0027s equally effective, as expected. It looks though that the constant cache is still helping out too, meaning this demo has at least one case where a sampling instruction isn\u0027t statically using the same descriptors. Would be interesting to know where exactly that is, so we can use it as a test case when we start doing sampler call inlining. Whenever you have time.",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 36
      },
      "revId": "b524c65095051ad483a9a59862abbacc65b2d126",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f28465b7_5a6e6871",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 14,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-07-31T20:32:46Z",
      "side": 1,
      "message": "\u003e meaning this demo has at least one case where a sampling instruction isn\u0027t statically using the same descriptors\n\nNot necessarily. Each start of the shader invocation clears the cache, so we\u0027ll hit the \"L2 cache\" at least once. This will still likely cause thread contention.",
      "parentUuid": "530c5312_318db7ac",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 36
      },
      "revId": "b524c65095051ad483a9a59862abbacc65b2d126",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1082a4a3_e8372afc",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 7
      },
      "lineNbr": 1257,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-07-31T20:27:33Z",
      "side": 1,
      "message": "Should be null initialized to avoid the case where they happen to match the descriptor pointers and we call an uninitialized sampler function.",
      "range": {
        "startLine": 1256,
        "startChar": 3,
        "endLine": 1257,
        "endChar": 25
      },
      "revId": "b524c65095051ad483a9a59862abbacc65b2d126",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "464ceb69_5de6ea5b",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 7
      },
      "lineNbr": 1257,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-07-31T20:32:46Z",
      "side": 1,
      "message": "Yeah... I\u0027m not sure how to do that. Will try and find a solution tomorrow.",
      "parentUuid": "1082a4a3_e8372afc",
      "range": {
        "startLine": 1256,
        "startChar": 3,
        "endLine": 1257,
        "endChar": 25
      },
      "revId": "b524c65095051ad483a9a59862abbacc65b2d126",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "444ce3a9_110ede2b",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 7
      },
      "lineNbr": 1257,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-07-31T23:55:13Z",
      "side": 1,
      "message": "Looks like this might be done automatically for us:\nhttps://swiftshader.googlesource.com/SwiftShader/+/refs/heads/master/src/Reactor/Reactor.hpp#2813",
      "parentUuid": "464ceb69_5de6ea5b",
      "range": {
        "startLine": 1256,
        "startChar": 3,
        "endLine": 1257,
        "endChar": 25
      },
      "revId": "b524c65095051ad483a9a59862abbacc65b2d126",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a5ffd4c_af552d2f",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 7
      },
      "lineNbr": 1257,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-08-01T01:46:25Z",
      "side": 1,
      "message": "Heh, I forgot about that. There was some hardening work when SwiftShader was initially integrated into Chrome for WebGL fallback, to weed out random crashes we couldn\u0027t reproduce locally. Looks like it never was reverted back to C behavior.\n\nThis makes me comfortable to land this as-is, and follow up with a patch to add operator\u003d(nullptr_t) and remove the default initialization.",
      "parentUuid": "444ce3a9_110ede2b",
      "range": {
        "startLine": 1256,
        "startChar": 3,
        "endLine": 1257,
        "endChar": 25
      },
      "revId": "b524c65095051ad483a9a59862abbacc65b2d126",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8b2dec9_16ce4fba",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 7
      },
      "lineNbr": 1257,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-08-01T12:41:27Z",
      "side": 1,
      "message": "https://swiftshader-review.googlesource.com/c/SwiftShader/+/34548\nhttps://swiftshader-review.googlesource.com/c/SwiftShader/+/34549",
      "parentUuid": "5a5ffd4c_af552d2f",
      "range": {
        "startLine": 1256,
        "startChar": 3,
        "endLine": 1257,
        "endChar": 25
      },
      "revId": "b524c65095051ad483a9a59862abbacc65b2d126",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}