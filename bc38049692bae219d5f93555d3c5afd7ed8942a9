{
  "comments": [
    {
      "key": {
        "uuid": "d2c3fe31_d3e502e5",
        "filename": "src/System/Debug.cpp",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-02-20T19:43:34Z",
      "side": 1,
      "message": "Log ?",
      "range": {
        "startLine": 101,
        "startChar": 1,
        "endLine": 101,
        "endChar": 7
      },
      "revId": "bc38049692bae219d5f93555d3c5afd7ed8942a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcdb2e7a_4df2148e",
        "filename": "src/System/Debug.cpp",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 7183
      },
      "writtenOn": "2020-02-20T20:19:00Z",
      "side": 1,
      "message": "This seems like an orthogonal flag to the level. There\u0027s usually one level less critical to Debug, which is Verbose.\nI\u0027d suggest using Verbose and not special casing it. Debug can be the normal lowest filter level, and we can re-enable the logging of these (if we want them) by enabling Verbose mode.",
      "parentUuid": "d2c3fe31_d3e502e5",
      "range": {
        "startLine": 101,
        "startChar": 1,
        "endLine": 101,
        "endChar": 7
      },
      "revId": "bc38049692bae219d5f93555d3c5afd7ed8942a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f15f8709_554f6a41",
        "filename": "src/System/Debug.cpp",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-02-20T22:03:28Z",
      "side": 1,
      "message": "That could work. If everything looks clean at Debug log level but an app still misbehaves, the info produced by the Verbose level, such as extension structs it\u0027s using, can be useful both as log-only or printed to stderr/out as well.\n\nHow about we have a control knob for which level we output to stderr/stdout, and one for which level gets printed to the logs? Or would it be too confusing to see differences between the two?",
      "parentUuid": "bcdb2e7a_4df2148e",
      "range": {
        "startLine": 101,
        "startChar": 1,
        "endLine": 101,
        "endChar": 7
      },
      "revId": "bc38049692bae219d5f93555d3c5afd7ed8942a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7eec2ae9_4ddfada6",
        "filename": "src/System/Debug.cpp",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 7183
      },
      "writtenOn": "2020-02-20T22:29:05Z",
      "side": 1,
      "message": "\u003e How about we have a control knob for which level we output to stderr/stdout, and one for which level gets printed to the logs? \n\nThat could work. Given that the only way we currently write to logs is to change the:\n\n   const bool traceToFile \u003d false;\n\nLine with either a code edit or a debugger, I don\u0027t see why this couldn\u0027t be changed to:\n\n   const Level traceToFileLevel \u003d Level::Disabled;\n\nAnd we add `Disabled` as a level one higher than Fatal. Then you get both your knobs.",
      "parentUuid": "f15f8709_554f6a41",
      "range": {
        "startLine": 101,
        "startChar": 1,
        "endLine": 101,
        "endChar": 7
      },
      "revId": "bc38049692bae219d5f93555d3c5afd7ed8942a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42fa01fc_8cccb2f1",
        "filename": "src/System/Debug.cpp",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 9035
      },
      "writtenOn": "2020-02-24T16:55:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7eec2ae9_4ddfada6",
      "range": {
        "startLine": 101,
        "startChar": 1,
        "endLine": 101,
        "endChar": 7
      },
      "revId": "bc38049692bae219d5f93555d3c5afd7ed8942a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f82e9a27_39e16d7e",
        "filename": "src/System/Debug.hpp",
        "patchSetId": 6
      },
      "lineNbr": 50,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-02-20T19:43:34Z",
      "side": 1,
      "message": "nit: This is pre-existing, but I find this confusing. Asserts what?\n\nMaybe this should be called break or trap?",
      "range": {
        "startLine": 50,
        "startChar": 42,
        "endLine": 50,
        "endChar": 49
      },
      "revId": "bc38049692bae219d5f93555d3c5afd7ed8942a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cee53987_47e32b04",
        "filename": "src/System/Debug.hpp",
        "patchSetId": 6
      },
      "lineNbr": 50,
      "author": {
        "id": 7183
      },
      "writtenOn": "2020-02-20T20:19:00Z",
      "side": 1,
      "message": "I agree. Assert is usually a verb to verify some condition. We\u0027re not testing anything here.\nI\u0027d second \u0027trap\u0027",
      "parentUuid": "f82e9a27_39e16d7e",
      "range": {
        "startLine": 50,
        "startChar": 42,
        "endLine": 50,
        "endChar": 49
      },
      "revId": "bc38049692bae219d5f93555d3c5afd7ed8942a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12485336_11fc28be",
        "filename": "src/System/Debug.hpp",
        "patchSetId": 6
      },
      "lineNbr": 50,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-02-20T20:36:51Z",
      "side": 1,
      "message": "Yeah, I\u0027ve often struggled with this one, because we use \"assert\" to mean \"assert this thing is true\", but also to talk about when the assert fails, like \"it asserted during this run\", which is confusing when you think about it, since passing an assert means we\u0027ve asserted that it\u0027s true! Personally, I say \"trips the assert\", which I suppose is very close to \"traps\".",
      "parentUuid": "cee53987_47e32b04",
      "range": {
        "startLine": 50,
        "startChar": 42,
        "endLine": 50,
        "endChar": 49
      },
      "revId": "bc38049692bae219d5f93555d3c5afd7ed8942a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f580913a_f52ea4ab",
        "filename": "src/System/Debug.hpp",
        "patchSetId": 6
      },
      "lineNbr": 50,
      "author": {
        "id": 9035
      },
      "writtenOn": "2020-02-24T16:55:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "12485336_11fc28be",
      "range": {
        "startLine": 50,
        "startChar": 42,
        "endLine": 50,
        "endChar": 49
      },
      "revId": "bc38049692bae219d5f93555d3c5afd7ed8942a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}