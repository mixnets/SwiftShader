{
  "comments": [
    {
      "key": {
        "uuid": "44fbae23_5b282bc9",
        "filename": "src/Device/PixelProcessor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 9669
      },
      "writtenOn": "2019-10-24T22:14:39Z",
      "side": 1,
      "message": "I wonder if it would be more clear to derive from VkStencilOpState, and have operator\u003d(const VkStencilOpState \u0026rhs) copy all of it, and then clear reference to 0. Something like:\n\n    struct StencilOpState : vkStencilOpState\n    {\n        void operator\u003d(const VkStencilOpState \u0026rhs)\n        {\n            static_cast\u003cvkStencilOpState\u0026\u003e(*this) \u003d rhs;\n            reference \u003d 0; // Clear to avoid generating a different program\n        }\n    }\n\nI just like seeing the explicit reset of \"reference\" to 0, I think. But I\u0027m not sure.",
      "revId": "ddbe8575a081880bd47d9331f17ebc9d571c3900",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab9969fc_cf84a66d",
        "filename": "src/Device/PixelProcessor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-10-24T22:53:31Z",
      "side": 1,
      "message": "Since this structure is repeatedly entirely memcmp\u0027d when looking for a match, I\u0027d like to have it as small as possible. We could even start packing it tighter, like packing 8 bools in a byte.",
      "parentUuid": "44fbae23_5b282bc9",
      "revId": "ddbe8575a081880bd47d9331f17ebc9d571c3900",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40cd42af_92df4aeb",
        "filename": "src/Device/PixelProcessor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 9669
      },
      "writtenOn": "2019-10-24T23:06:30Z",
      "side": 1,
      "message": "You\u0027re referring to States in general, right? Not sure what you\u0027d pack in StencilOpState as you can\u0027t pack enums like VkStencilOp without creating a new type to wrap that, right? And we can\u0027t pack the two mask fields.",
      "parentUuid": "ab9969fc_cf84a66d",
      "revId": "ddbe8575a081880bd47d9331f17ebc9d571c3900",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "516287bc_e2a2c22a",
        "filename": "src/Device/PixelProcessor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-10-25T18:59:04Z",
      "side": 1,
      "message": "Yes, I\u0027m referring to the States members below.",
      "parentUuid": "40cd42af_92df4aeb",
      "revId": "ddbe8575a081880bd47d9331f17ebc9d571c3900",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e7e769c_16520ce7",
        "filename": "src/Device/PixelProcessor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 9669
      },
      "writtenOn": "2019-10-25T19:01:07Z",
      "side": 1,
      "message": "Okay, so deriving from VkStencilOpState wouldn\u0027t be that bad since we can\u0027t pack it anyway. We\u0027d only pay the size cost of the \u0027reference\u0027 member. Anyway, it\u0027s up to you. I\u0027ll +2 it.",
      "parentUuid": "516287bc_e2a2c22a",
      "revId": "ddbe8575a081880bd47d9331f17ebc9d571c3900",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6438e494_20ee3f38",
        "filename": "src/Device/PixelProcessor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-10-25T19:09:31Z",
      "side": 1,
      "message": "I\u0027ll land it to get the perf gains. We can revisit this later if necessary.",
      "parentUuid": "0e7e769c_16520ce7",
      "revId": "ddbe8575a081880bd47d9331f17ebc9d571c3900",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff2f2fa4_7507a224",
        "filename": "src/Device/PixelProcessor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-11-07T22:20:34Z",
      "side": 1,
      "message": "Great discussion. If SwiftShader was following GPU design a little more closely, then we\u0027d have a separate ROP stage, for which it would be reasonable to consider the stencil reference value a state that gets baked into the routine, instead of externally loaded data. Note that it could still end up as constant data somewhere as part of the routine\u0027s code or data portion, but it may also give the JIT compiler an opportunity to optimize it in some way instead of being an unknown value.\n\nBut since making the ROP code part of our pixel routine is much more likely to be a valuable optimization than whatever would be gained from knowing the reference value, if any, I do believe the best course of action is to remove it from the state we use for pixel routine generation.\n\nI think compareMask and writeMask should be removed for the same reasons... ?",
      "parentUuid": "6438e494_20ee3f38",
      "revId": "ddbe8575a081880bd47d9331f17ebc9d571c3900",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e192630f_032647c9",
        "filename": "src/Device/PixelProcessor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-11-08T13:33:01Z",
      "side": 1,
      "message": "compareMask:\nhttps://cs.chromium.org/chromium/src/third_party/swiftshader/src/Pipeline/PixelRoutine.cpp?l\u003d262\nand writeMask:\nhttps://cs.chromium.org/chromium/src/third_party/swiftshader/src/Pipeline/PixelRoutine.cpp?l\u003d721\n\nactually affect the generated routine, currently.",
      "parentUuid": "ff2f2fa4_7507a224",
      "revId": "ddbe8575a081880bd47d9331f17ebc9d571c3900",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f24f7e9_dbf4d410",
        "filename": "src/Device/PixelProcessor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-11-08T15:02:26Z",
      "side": 1,
      "message": "b/143288278#comment5",
      "parentUuid": "e192630f_032647c9",
      "revId": "ddbe8575a081880bd47d9331f17ebc9d571c3900",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}