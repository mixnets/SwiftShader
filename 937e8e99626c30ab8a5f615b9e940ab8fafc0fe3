{
  "comments": [
    {
      "key": {
        "uuid": "518a5d4d_d65c9ca4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-21T14:08:54Z",
      "side": 1,
      "message": "Can we do this in a separate patch?",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 62
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "123b6fc7_3f144547",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-21T18:25:12Z",
      "side": 1,
      "message": "The changes are somewhat intertwined. The switch to mmap means that struct Allocation and associated code are unnecessary, similarly posix_memalign makes it unnecessary. To do another CL means creating an intermediate state that is made redundant when transitioning to mmaps... So its possible to do this work in two CLs but not trivial as well as increasing the review/testing load. The intermediate state is not really any better for a roll-back than just rolling back this whole CL.",
      "parentUuid": "518a5d4d_d65c9ca4",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 62
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1788d51_bdbbacb5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-21T14:08:54Z",
      "side": 1,
      "message": "Isn\u0027t there any (internal) bug describing this in a bit more detail? I\u0027d like to know why the profiling tools get \"confused\" and why the solution isn\u0027t to fix said profiling tools.",
      "range": {
        "startLine": 14,
        "startChar": 5,
        "endLine": 14,
        "endChar": 9
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "991a7a54_fd4ad724",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-21T18:25:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1788d51_bdbbacb5",
      "range": {
        "startLine": 14,
        "startChar": 5,
        "endLine": 14,
        "endChar": 9
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3a1cedf_e3531186",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-21T14:08:54Z",
      "side": 1,
      "message": "Please move to around line 32. We like to make sure our own headers don\u0027t implicitly depend on system level headers they\u0027re not including themselves.",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 19
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbb6fa51_5618ba86",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-21T18:25:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3a1cedf_e3531186",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 19
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f2f6b3d_91bd7526",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-21T14:08:54Z",
      "side": 1,
      "message": "nit: result",
      "range": {
        "startLine": 51,
        "startChar": 5,
        "endLine": 51,
        "endChar": 8
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0255b4c1_ace4f0d5",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-21T18:25:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f2f6b3d_91bd7526",
      "range": {
        "startLine": 51,
        "startChar": 5,
        "endLine": 51,
        "endChar": 8
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28b7cf65_daeee77d",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-21T14:08:54Z",
      "side": 1,
      "message": "Shouldn\u0027t we use the one defined by \u003csys/memfd.h\u003e instead?",
      "range": {
        "startLine": 58,
        "startChar": 4,
        "endLine": 58,
        "endChar": 16
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e23b0513_35069029",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-21T18:25:12Z",
      "side": 1,
      "message": "Sadly not, from \"man memfd_create\":\n\nNote: There is no glibc wrapper for this system call; see NOTES.\n...\nGlibc does not provide a wrapper for this system call; call it using syscall(2).",
      "parentUuid": "28b7cf65_daeee77d",
      "range": {
        "startLine": 58,
        "startChar": 4,
        "endLine": 58,
        "endChar": 16
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a41a8585_8c2a6b45",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-21T14:08:54Z",
      "side": 1,
      "message": "These hard-coded values look fragile. Is this documented anywhere?",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 68,
        "endChar": 29
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18b06ed5_d7d5c703",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-21T18:25:12Z",
      "side": 1,
      "message": "Agreed. Sadly this is how it is done in Google 3, see: google_glibc_extensions.h",
      "parentUuid": "a41a8585_8c2a6b45",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 68,
        "endChar": 29
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12f07daa_c4c2d9a5",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-21T14:08:54Z",
      "side": 1,
      "message": "This is only called once. Why have a separate function for it?",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 84,
        "endChar": 1
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34191308_dfda34b9",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-21T18:25:12Z",
      "side": 1,
      "message": "Anonymous/static functions called once are trivially inlined by the compiler, so there\u0027s no performance reason not to do this. The intent was clarity of, and to reduce the scope of, the file descriptor. In the case below the fileSize static is only used on an else branch.",
      "parentUuid": "12f07daa_c4c2d9a5",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 84,
        "endChar": 1
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3eef7bc_aeb27b43",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-21T14:08:54Z",
      "side": 1,
      "message": "This is only called once. Why have a separate function for it?",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 94,
        "endChar": 1
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "286d1899_9fa8022b",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-21T18:25:12Z",
      "side": 1,
      "message": "See above.",
      "parentUuid": "b3eef7bc_aeb27b43",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 94,
        "endChar": 1
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b383fd8_b0aed363",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-21T14:08:54Z",
      "side": 1,
      "message": "We can only change the access flags on a per-page basis, so we need to make sure this gets rounded up to the next multiple of the page size.",
      "range": {
        "startLine": 139,
        "startChar": 17,
        "endLine": 139,
        "endChar": 22
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c60e2375_9de99e33",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-21T18:25:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b383fd8_b0aed363",
      "range": {
        "startLine": 139,
        "startChar": 17,
        "endLine": 139,
        "endChar": 22
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}