{
  "comments": [
    {
      "key": {
        "uuid": "518a5d4d_d65c9ca4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-21T14:08:54Z",
      "side": 1,
      "message": "Can we do this in a separate patch?",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 62
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "123b6fc7_3f144547",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-21T18:25:12Z",
      "side": 1,
      "message": "The changes are somewhat intertwined. The switch to mmap means that struct Allocation and associated code are unnecessary, similarly posix_memalign makes it unnecessary. To do another CL means creating an intermediate state that is made redundant when transitioning to mmaps... So its possible to do this work in two CLs but not trivial as well as increasing the review/testing load. The intermediate state is not really any better for a roll-back than just rolling back this whole CL.",
      "parentUuid": "518a5d4d_d65c9ca4",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 62
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b963f146_e1b53277",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-23T16:33:54Z",
      "side": 1,
      "message": "posix_memalign() isn\u0027t available on Windows, so unfortunately this doesn\u0027t compile.",
      "parentUuid": "123b6fc7_3f144547",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 62
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1788d51_bdbbacb5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-21T14:08:54Z",
      "side": 1,
      "message": "Isn\u0027t there any (internal) bug describing this in a bit more detail? I\u0027d like to know why the profiling tools get \"confused\" and why the solution isn\u0027t to fix said profiling tools.",
      "range": {
        "startLine": 14,
        "startChar": 5,
        "endLine": 14,
        "endChar": 9
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "991a7a54_fd4ad724",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-21T18:25:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1788d51_bdbbacb5",
      "range": {
        "startLine": 14,
        "startChar": 5,
        "endLine": 14,
        "endChar": 9
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eda4396a_4a8f1eb6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-23T16:33:54Z",
      "side": 1,
      "message": "Thanks!",
      "parentUuid": "991a7a54_fd4ad724",
      "range": {
        "startLine": 14,
        "startChar": 5,
        "endLine": 14,
        "endChar": 9
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3a1cedf_e3531186",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-21T14:08:54Z",
      "side": 1,
      "message": "Please move to around line 32. We like to make sure our own headers don\u0027t implicitly depend on system level headers they\u0027re not including themselves.",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 19
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbb6fa51_5618ba86",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-21T18:25:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3a1cedf_e3531186",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 19
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f2f6b3d_91bd7526",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-21T14:08:54Z",
      "side": 1,
      "message": "nit: result",
      "range": {
        "startLine": 51,
        "startChar": 5,
        "endLine": 51,
        "endChar": 8
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0255b4c1_ace4f0d5",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-21T18:25:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f2f6b3d_91bd7526",
      "range": {
        "startLine": 51,
        "startChar": 5,
        "endLine": 51,
        "endChar": 8
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28b7cf65_daeee77d",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-21T14:08:54Z",
      "side": 1,
      "message": "Shouldn\u0027t we use the one defined by \u003csys/memfd.h\u003e instead?",
      "range": {
        "startLine": 58,
        "startChar": 4,
        "endLine": 58,
        "endChar": 16
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e23b0513_35069029",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-21T18:25:12Z",
      "side": 1,
      "message": "Sadly not, from \"man memfd_create\":\n\nNote: There is no glibc wrapper for this system call; see NOTES.\n...\nGlibc does not provide a wrapper for this system call; call it using syscall(2).",
      "parentUuid": "28b7cf65_daeee77d",
      "range": {
        "startLine": 58,
        "startChar": 4,
        "endLine": 58,
        "endChar": 16
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a41a8585_8c2a6b45",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-21T14:08:54Z",
      "side": 1,
      "message": "These hard-coded values look fragile. Is this documented anywhere?",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 68,
        "endChar": 29
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18b06ed5_d7d5c703",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-21T18:25:12Z",
      "side": 1,
      "message": "Agreed. Sadly this is how it is done in Google 3, see: google_glibc_extensions.h",
      "parentUuid": "a41a8585_8c2a6b45",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 68,
        "endChar": 29
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a4981c4_6255ef34",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-23T16:33:54Z",
      "side": 1,
      "message": "Thanks for clarifying that. It looks like memfd_create() is relatively new and requires a kernel version of 3.17 or up. SwiftShader needs to support older kernels too (mainly for Android Emulator). So we\u0027re going to need a fallback for this. I\u0027d even recommend to restring the use of memfd_create() to google3, for now.",
      "parentUuid": "18b06ed5_d7d5c703",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 68,
        "endChar": 29
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "412d1027_f34ff3d2",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-23T17:10:33Z",
      "side": 1,
      "message": "In the event the kernel doesn\u0027t support the system call the ENOSYS result is -1, so we get the intended behavior. Worth a comment :-)",
      "parentUuid": "6a4981c4_6255ef34",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 68,
        "endChar": 29
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57bea888_19f59e35",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-28T19:37:12Z",
      "side": 1,
      "message": "Good to know. Thanks for clarifying it in a comment. Still, at the risk of sounding overly cautious, I\u0027d feel better if we didn\u0027t use this code path unless necessary. We don\u0027t know if all the kernels of all the OS variants where we\u0027re using SwiftShader function properly both in the case where this functionality is or isn\u0027t supported. It feels like not having a GNU C wrapper for it is an indication that there might be unresolved issues.",
      "parentUuid": "412d1027_f34ff3d2",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 68,
        "endChar": 29
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bdcdd3a5_e7a82a08",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-28T19:58:25Z",
      "side": 1,
      "message": "We could make this defined __linux__? posix_memalign for unixs and _aligned_malloc on windows. Sound good?\nAsking others, the lack of a GNU wrapper is an indication that this is new but there are no known unresolved issues.",
      "parentUuid": "57bea888_19f59e35",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 68,
        "endChar": 29
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12f07daa_c4c2d9a5",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-21T14:08:54Z",
      "side": 1,
      "message": "This is only called once. Why have a separate function for it?",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 84,
        "endChar": 1
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34191308_dfda34b9",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-21T18:25:12Z",
      "side": 1,
      "message": "Anonymous/static functions called once are trivially inlined by the compiler, so there\u0027s no performance reason not to do this. The intent was clarity of, and to reduce the scope of, the file descriptor. In the case below the fileSize static is only used on an else branch.",
      "parentUuid": "12f07daa_c4c2d9a5",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 84,
        "endChar": 1
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f1f276a_5bcdf200",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-23T16:33:54Z",
      "side": 1,
      "message": "Oh, I see, the file descriptor is the same for all executable memory allocations. I\u0027m a bit confused by that though. Aren\u0027t you mapping all these allocations to the same physical memory? Or does this happen to work because it\u0027s never \u0027flushed\u0027 back to the \u0027file\u0027?\n\nOn another note, is the lambda necessary here?",
      "parentUuid": "34191308_dfda34b9",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 84,
        "endChar": 1
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f707934d_35b9229e",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-23T17:10:33Z",
      "side": 1,
      "message": "The mappings are MAP_PRIVATE and not MAP_SHARED, so they don\u0027t share the same underlying pages. I\u0027ll add a comment and remove the unnecessary lambda.",
      "parentUuid": "5f1f276a_5bcdf200",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 84,
        "endChar": 1
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80c3a35e_f9ee0ae3",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-28T19:37:12Z",
      "side": 1,
      "message": "I see. Thank you!",
      "parentUuid": "f707934d_35b9229e",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 84,
        "endChar": 1
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3eef7bc_aeb27b43",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-21T14:08:54Z",
      "side": 1,
      "message": "This is only called once. Why have a separate function for it?",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 94,
        "endChar": 1
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "286d1899_9fa8022b",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-21T18:25:12Z",
      "side": 1,
      "message": "See above.",
      "parentUuid": "b3eef7bc_aeb27b43",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 94,
        "endChar": 1
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9161a3a8_dcc72d89",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-23T16:33:54Z",
      "side": 1,
      "message": "If my interpretation above is correct, does it even matter if the file is large enough? I assume this just satisfied mmap()\u0027s checks, and ensures that a flush can\u0027t fail (at least not due to mapping size)?",
      "parentUuid": "286d1899_9fa8022b",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 94,
        "endChar": 1
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df15de46_68f14fb9",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-23T17:10:33Z",
      "side": 1,
      "message": "As the file is theoretically coming from TMPFS then without it having an fallocate/ftruncate mmaps beyond its size will fail.",
      "parentUuid": "9161a3a8_dcc72d89",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 94,
        "endChar": 1
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b383fd8_b0aed363",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-02-21T14:08:54Z",
      "side": 1,
      "message": "We can only change the access flags on a per-page basis, so we need to make sure this gets rounded up to the next multiple of the page size.",
      "range": {
        "startLine": 139,
        "startChar": 17,
        "endLine": 139,
        "endChar": 22
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c60e2375_9de99e33",
        "filename": "src/Common/Memory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 6866
      },
      "writtenOn": "2018-02-21T18:25:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b383fd8_b0aed363",
      "range": {
        "startLine": 139,
        "startChar": 17,
        "endLine": 139,
        "endChar": 22
      },
      "revId": "937e8e99626c30ab8a5f615b9e940ab8fafc0fe3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}