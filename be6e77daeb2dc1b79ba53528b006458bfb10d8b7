{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8fc622c7_dfd27f9c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-12-16T15:01:11Z",
      "side": 1,
      "message": "+Alexis, for awareness and to make sure I didn\u0027t miss anything.",
      "revId": "be6e77daeb2dc1b79ba53528b006458bfb10d8b7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6b67989_df945b71",
        "filename": "src/Reactor/Reactor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 4665,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-12-16T16:50:55Z",
      "side": 1,
      "message": "This seems out of place, but I don\u0027t have a better option ðŸ˜•",
      "range": {
        "startLine": 4662,
        "startChar": 0,
        "endLine": 4665,
        "endChar": 67
      },
      "revId": "be6e77daeb2dc1b79ba53528b006458bfb10d8b7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d413a5a2_ae2f7b70",
        "filename": "src/Reactor/Reactor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 4665,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-12-16T17:22:09Z",
      "side": 1,
      "message": "I think it\u0027s fine. If we organized our code such that public headers would be in an \"include\" folder, while private headers and source would go in a \"src\" folder, then I\u0027d say we could move these to a \"ReactorInternal.hpp\" that would be in \"src\", and there would be no danger of it being included from client libraries of Reactor. But right now, all headers and src are in the same place, so this is the best way to keep these internal.",
      "parentUuid": "f6b67989_df945b71",
      "range": {
        "startLine": 4662,
        "startChar": 0,
        "endLine": 4665,
        "endChar": 67
      },
      "revId": "be6e77daeb2dc1b79ba53528b006458bfb10d8b7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dce9a4cf_ce082e35",
        "filename": "src/Reactor/Reactor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 4665,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-12-16T21:25:52Z",
      "side": 1,
      "message": "Done. Going to leave as is until we find a better solution.",
      "parentUuid": "d413a5a2_ae2f7b70",
      "range": {
        "startLine": 4662,
        "startChar": 0,
        "endLine": 4665,
        "endChar": 67
      },
      "revId": "be6e77daeb2dc1b79ba53528b006458bfb10d8b7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "998c7ef5_77451655",
        "filename": "src/Reactor/Reactor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 4674,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-12-16T16:50:55Z",
      "side": 1,
      "message": "It seems unnecessarily complicated and error prone to have to perform those #if checks both here and within HasRcpApprox().\nMaybe it would be simpler to just pass \u0027p\u0027 as an argument?\nLine 4678 below could then just be:\nif(HasRcpApprox(p))",
      "range": {
        "startLine": 4670,
        "startChar": 0,
        "endLine": 4674,
        "endChar": 6
      },
      "revId": "be6e77daeb2dc1b79ba53528b006458bfb10d8b7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44b1fe1d_8014a5ba",
        "filename": "src/Reactor/Reactor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 4674,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-12-16T17:22:09Z",
      "side": 1,
      "message": "Hmm, I see your point, but then I\u0027d have to rename HasRcpApprox since it would no longer return whether the current target has the ability to perform the approximate reciprocal. We may want to perform this query and use RcpApprox elsewhere, regardless of the Precision parameter, so I think it\u0027s better to keep this here.",
      "parentUuid": "998c7ef5_77451655",
      "range": {
        "startLine": 4670,
        "startChar": 0,
        "endLine": 4674,
        "endChar": 6
      },
      "revId": "be6e77daeb2dc1b79ba53528b006458bfb10d8b7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9307d257_e772c114",
        "filename": "src/Reactor/Reactor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 4674,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-12-16T17:49:27Z",
      "side": 1,
      "message": "In general, this file doesn\u0027t have a lot of platform specific code, whereas other Reactor files do, so I would rather have this moved elsewhere, honestly, if that\u0027s possible.\n\nIf you want to keep HasRcpApprox() in the other files, that fine, but this file probably only requires something like:\nbool PerformApproximation(Precision p); // \u003c-- this would call HasRcpApprox()\n\nUnless you know of an upcoming use case for having HasRcpApprox() available everywhere, I\u0027m not sure it\u0027s necessary to have this function public.",
      "parentUuid": "44b1fe1d_8014a5ba",
      "range": {
        "startLine": 4670,
        "startChar": 0,
        "endLine": 4674,
        "endChar": 6
      },
      "revId": "be6e77daeb2dc1b79ba53528b006458bfb10d8b7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13206a38_48806f85",
        "filename": "src/Reactor/Reactor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 4674,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-12-16T18:31:18Z",
      "side": 1,
      "message": "I hear you about this file not having platform-specific stuff, but unfortunately, the only files that do are the backend-specific ones, and this code is generic, so I\u0027m not sure where to put it. Reactor.cpp is the only place we have for backend-agnostic code like this. Nicolas, do you have any thoughts on this? I agree with Alexis that it\u0027s weird to have the x86 check here, but I\u0027m sure where to put it. Passing in a bool to HasRcpApprox is a possible solution, but it somewhat changes the semantics of this function, and also means I repeat the x86 logic in each backend (return false if Precision::Full).",
      "parentUuid": "9307d257_e772c114",
      "range": {
        "startLine": 4670,
        "startChar": 0,
        "endLine": 4674,
        "endChar": 6
      },
      "revId": "be6e77daeb2dc1b79ba53528b006458bfb10d8b7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d58cbd7_00f5888b",
        "filename": "src/Reactor/Reactor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 4674,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-12-16T19:42:51Z",
      "side": 1,
      "message": "Reactor.cpp should be backend-agnostic but not necessarily target/platform-agnostic. For what it\u0027s worth, LLVM also has target/platform-specific stuff at its \"high\" IR level, especially when it comes to these types of optimizations. Not ever target supports every abstract LLVM intrinsics. Which is precisely what HasRcpApprox() here deals with.\n\nEither way I think this is a big step forward, and its fine if some stuff under Reactor\u0027s hood still changes at a later point. So I think this can land as-is even if we agreed on a follow-up that is more elegant.",
      "parentUuid": "13206a38_48806f85",
      "range": {
        "startLine": 4670,
        "startChar": 0,
        "endLine": 4674,
        "endChar": 6
      },
      "revId": "be6e77daeb2dc1b79ba53528b006458bfb10d8b7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f58844a2_4e881e34",
        "filename": "src/Reactor/Reactor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 4674,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-12-16T21:25:52Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4d58cbd7_00f5888b",
      "range": {
        "startLine": 4670,
        "startChar": 0,
        "endLine": 4674,
        "endChar": 6
      },
      "revId": "be6e77daeb2dc1b79ba53528b006458bfb10d8b7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f476401_4b8b4223",
        "filename": "src/Reactor/Reactor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 4684,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-12-16T16:50:55Z",
      "side": 1,
      "message": "It would be nice to add a comment here explaining this line",
      "range": {
        "startLine": 4684,
        "startChar": 9,
        "endLine": 4684,
        "endChar": 39
      },
      "revId": "be6e77daeb2dc1b79ba53528b006458bfb10d8b7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b9b968e_a6b34230",
        "filename": "src/Reactor/Reactor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 4684,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-12-16T17:22:09Z",
      "side": 1,
      "message": "I agree, but there was no such comment in sw::reciprocal. I think this minimizes the error of the initial rcp estimate by performing 1 (or more?) iterations of Newton-Rhapson division (https://en.wikipedia.org/wiki/Division_algorithm#Newton%E2%80%93Raphson_division), but I\u0027m not quite able to correlate it to that wikipedia article.",
      "parentUuid": "5f476401_4b8b4223",
      "range": {
        "startLine": 4684,
        "startChar": 9,
        "endLine": 4684,
        "endChar": 39
      },
      "revId": "be6e77daeb2dc1b79ba53528b006458bfb10d8b7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31fc641f_0d01658d",
        "filename": "src/Reactor/Reactor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 4684,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-12-16T17:49:27Z",
      "side": 1,
      "message": "I think you\u0027re correct, but Nicolas could confirm.",
      "parentUuid": "0b9b968e_a6b34230",
      "range": {
        "startLine": 4684,
        "startChar": 9,
        "endLine": 4684,
        "endChar": 39
      },
      "revId": "be6e77daeb2dc1b79ba53528b006458bfb10d8b7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db409eee_19ca9510",
        "filename": "src/Reactor/Reactor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 4684,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-12-16T19:42:51Z",
      "side": 1,
      "message": "Exactly. At Wikipedia this corresponds to the X[i+1] \u003d X[i] * (2 - D * X[i]) formula, where D\u003dx and X[i]\u003drcp.\n\nIt can be written as 2 * X[i] - D * X[i]^2, or (X[i] + X[i]) - (D * X[i] * X[i]). The latter avoids requiring a constant 2 and a multiplication, and keeping the subtraction for last ensures minimal precision loss.",
      "parentUuid": "31fc641f_0d01658d",
      "range": {
        "startLine": 4684,
        "startChar": 9,
        "endLine": 4684,
        "endChar": 39
      },
      "revId": "be6e77daeb2dc1b79ba53528b006458bfb10d8b7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d34975b_ef0317fa",
        "filename": "src/Reactor/Reactor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 4684,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-12-16T21:25:52Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "db409eee_19ca9510",
      "range": {
        "startLine": 4684,
        "startChar": 9,
        "endLine": 4684,
        "endChar": 39
      },
      "revId": "be6e77daeb2dc1b79ba53528b006458bfb10d8b7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c6e6466_96663ac6",
        "filename": "src/Reactor/Reactor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 4694,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-12-16T16:50:55Z",
      "side": 1,
      "message": "Nit: This could be turned into a \u0027static constexpr float\u0027 right away",
      "range": {
        "startLine": 4694,
        "startChar": 2,
        "endLine": 4694,
        "endChar": 23
      },
      "revId": "be6e77daeb2dc1b79ba53528b006458bfb10d8b7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48a317fb_4e16909d",
        "filename": "src/Reactor/Reactor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 4694,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-12-16T17:22:09Z",
      "side": 1,
      "message": "Done. I made it constexpr. No need for static as constexpr means the compiler will definitely use the value as is, and no storage will be made for it. (\"const\" would also work, but doesn\u0027t guarantee that it will be used inline -- like if the address were taken).",
      "parentUuid": "1c6e6466_96663ac6",
      "range": {
        "startLine": 4694,
        "startChar": 2,
        "endLine": 4694,
        "endChar": 23
      },
      "revId": "be6e77daeb2dc1b79ba53528b006458bfb10d8b7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40745c40_5d0574eb",
        "filename": "src/Reactor/Reactor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 4694,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-12-16T17:49:27Z",
      "side": 1,
      "message": "I was more thinking of having the constant already be in floating point format, to avoid the cast below, but that\u0027s no big deal.",
      "parentUuid": "48a317fb_4e16909d",
      "range": {
        "startLine": 4694,
        "startChar": 2,
        "endLine": 4694,
        "endChar": 23
      },
      "revId": "be6e77daeb2dc1b79ba53528b006458bfb10d8b7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c503a0e3_b521064f",
        "filename": "src/Reactor/Reactor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 4694,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-12-16T18:31:18Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "40745c40_5d0574eb",
      "range": {
        "startLine": 4694,
        "startChar": 2,
        "endLine": 4694,
        "endChar": 23
      },
      "revId": "be6e77daeb2dc1b79ba53528b006458bfb10d8b7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}