{
  "comments": [
    {
      "key": {
        "uuid": "8e4a6810_294e6b9e",
        "filename": "src/Vulkan/VkSemaphore.cpp",
        "patchSetId": 11
      },
      "lineNbr": 27,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-10-03T10:52:28Z",
      "side": 1,
      "message": "remove?",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 29
      },
      "revId": "a126dc1a76bed2fbf8246cda6bb5314bdfbb33b2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd5d17bd_856bccac",
        "filename": "src/Vulkan/VkSemaphore.cpp",
        "patchSetId": 11
      },
      "lineNbr": 27,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-10-03T11:41:05Z",
      "side": 1,
      "message": "Will do :)",
      "parentUuid": "8e4a6810_294e6b9e",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 29
      },
      "revId": "a126dc1a76bed2fbf8246cda6bb5314bdfbb33b2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1298c9be_5b417d53",
        "filename": "src/Vulkan/VkSemaphore.cpp",
        "patchSetId": 11
      },
      "lineNbr": 78,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-10-03T10:52:28Z",
      "side": 1,
      "message": "nit: perhaps use a std::unique_ptr with a custom deleter?",
      "range": {
        "startLine": 74,
        "startChar": 2,
        "endLine": 78,
        "endChar": 3
      },
      "revId": "a126dc1a76bed2fbf8246cda6bb5314bdfbb33b2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6df4bfd1_bd788c0f",
        "filename": "src/Vulkan/VkSemaphore.cpp",
        "patchSetId": 11
      },
      "lineNbr": 78,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-10-03T11:41:05Z",
      "side": 1,
      "message": "I\u0027ve tried to make ComputeRequiredAllocationSize() return the actual total allocation size required for the Impl + optional External instance. That\u0027s why the External is stored inside Impl and initialized/destroyed in-place.\n\nI can replace that with an std::unique_ptr\u003c\u003e if you prefer, but this would break this computation. Is this something important for Swiftshader? I could also just use a simple new to allocate Impl as well then.\n\nApart from that, I feel that a std::unique_ptr\u003c\u003e with a custom deleter that does not delete anything would make the code a little bit more difficult to understand (i.e. it\u0027s really counter-intuitive), hence why I\u0027d prefer to avoid it if we use in-place init/destroy.",
      "parentUuid": "1298c9be_5b417d53",
      "range": {
        "startLine": 74,
        "startChar": 2,
        "endLine": 78,
        "endChar": 3
      },
      "revId": "a126dc1a76bed2fbf8246cda6bb5314bdfbb33b2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a32ac54_ba5237bd",
        "filename": "src/Vulkan/VkSemaphore.cpp",
        "patchSetId": 11
      },
      "lineNbr": 78,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-10-03T11:48:00Z",
      "side": 1,
      "message": "A benefit of not using in-place storage would be to allow several concurrent implementations of external semaphores in the same process. I\u0027ve actually implemented something similar for external memory at https://swiftshader-review.googlesource.com/c/SwiftShader/+/35152\n\nWe could use a similar method but it adds some complexity to the whole thing, so this CL goes for what works with the less headaches, but let me know if you insist on this.",
      "parentUuid": "6df4bfd1_bd788c0f",
      "range": {
        "startLine": 74,
        "startChar": 2,
        "endLine": 78,
        "endChar": 3
      },
      "revId": "a126dc1a76bed2fbf8246cda6bb5314bdfbb33b2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b54143f_307732ea",
        "filename": "src/Vulkan/VkSemaphore.cpp",
        "patchSetId": 11
      },
      "lineNbr": 78,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-10-03T12:06:31Z",
      "side": 1,
      "message": "Fair argument, no need to change.\nI do wonder if SwiftShader should provide a cleaner way to create smart-pointer for objects stored in the block of memory passed into these constructors.\nNot one to worry about now.",
      "parentUuid": "1a32ac54_ba5237bd",
      "range": {
        "startLine": 74,
        "startChar": 2,
        "endLine": 78,
        "endChar": 3
      },
      "revId": "a126dc1a76bed2fbf8246cda6bb5314bdfbb33b2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebf3bce2_237f9d57",
        "filename": "src/Vulkan/VkSemaphore.cpp",
        "patchSetId": 11
      },
      "lineNbr": 83,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-10-03T10:52:28Z",
      "side": 1,
      "message": "Ã¼bernit: I\u0027m not sure comment markup is used anywhere else in SwiftShader.",
      "range": {
        "startLine": 83,
        "startChar": 25,
        "endLine": 83,
        "endChar": 26
      },
      "revId": "a126dc1a76bed2fbf8246cda6bb5314bdfbb33b2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad260f99_a89f85f1",
        "filename": "src/Vulkan/VkSemaphore.cpp",
        "patchSetId": 11
      },
      "lineNbr": 87,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-10-03T10:52:28Z",
      "side": 1,
      "message": "nit: stray tab?",
      "range": {
        "startLine": 87,
        "startChar": 2,
        "endLine": 87,
        "endChar": 3
      },
      "revId": "a126dc1a76bed2fbf8246cda6bb5314bdfbb33b2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62201e28_674fe3de",
        "filename": "src/Vulkan/VkSemaphore.cpp",
        "patchSetId": 11
      },
      "lineNbr": 87,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-10-03T11:41:05Z",
      "side": 1,
      "message": "Yes, will remove :)",
      "parentUuid": "ad260f99_a89f85f1",
      "range": {
        "startLine": 87,
        "startChar": 2,
        "endLine": 87,
        "endChar": 3
      },
      "revId": "a126dc1a76bed2fbf8246cda6bb5314bdfbb33b2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ea91c52_ec8c089c",
        "filename": "src/Vulkan/VkSemaphore.cpp",
        "patchSetId": 11
      },
      "lineNbr": 114,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-10-03T11:41:05Z",
      "side": 1,
      "message": "It looks like marl::blocking_call() uses its own WaitGroup to wait on the result, I think I can simplify that to avoid the signalInternal() / waitInternal() then.\n\nIn the meantime, I\u0027ve replaced that with an explicit std::thread() creation + signaling of the internal semaphore.",
      "range": {
        "startLine": 114,
        "startChar": 4,
        "endLine": 114,
        "endChar": 18
      },
      "revId": "a126dc1a76bed2fbf8246cda6bb5314bdfbb33b2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "658e327c_c958cbd7",
        "filename": "src/Vulkan/VkSemaphore.cpp",
        "patchSetId": 11
      },
      "lineNbr": 114,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-10-03T12:06:31Z",
      "side": 1,
      "message": "\u003e It looks like marl::blocking_call() uses its own WaitGroup to wait on the result, I think I can simplify that to avoid the signalInternal() / waitInternal() then.\n\nmarl::blocking_call() blocks for the function to finish, so yes, the wait does seem unnecessary.  \n\n\u003e In the meantime, I\u0027ve replaced that with an explicit std::thread() creation + signaling of the internal semaphore.\n\nHave you pushed these changes somewhere? What\u0027s the benefit of this over using blocking_call?\nNote: We haven\u0027t had a need for it yet, but I may add additional logic to blocking_call() so that the scheduler is bound on the new thread - without this the new thread will assert if you try to schedule additional tasks. Not something we\u0027re doing here, but subtleties I\u0027d like to keep inside marl. If you\u0027re concerned with performance, I\u0027d be happy to upstream a thread-pool approach like the one you originally implemented. We\u0027d just have to have a think about thread lifetime, when they get reaped, etc.",
      "parentUuid": "8ea91c52_ec8c089c",
      "range": {
        "startLine": 114,
        "startChar": 4,
        "endLine": 114,
        "endChar": 18
      },
      "revId": "a126dc1a76bed2fbf8246cda6bb5314bdfbb33b2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23757dbb_21c2eeda",
        "filename": "src/Vulkan/VkSemaphore.cpp",
        "patchSetId": 11
      },
      "lineNbr": 139,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-10-03T10:52:28Z",
      "side": 1,
      "message": "Looks like we could do with a marl::Event. Created a marl feature request to track this: https://github.com/google/marl/issues/46.\nNote: I\u0027ve used \u0027Event\u0027 instead of \u0027Semaphore\u0027 as a semaphore is often associated with a count.",
      "range": {
        "startLine": 136,
        "startChar": 2,
        "endLine": 139,
        "endChar": 64
      },
      "revId": "a126dc1a76bed2fbf8246cda6bb5314bdfbb33b2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e6a58d5_228bd348",
        "filename": "src/Vulkan/VkSemaphoreExternalLinux.hpp",
        "patchSetId": 11
      },
      "lineNbr": 86,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-10-03T10:52:28Z",
      "side": 1,
      "message": "nit: Consider using std::make_shared? Less lock-contention, less code to maintain.",
      "range": {
        "startLine": 71,
        "startChar": 1,
        "endLine": 86,
        "endChar": 2
      },
      "revId": "a126dc1a76bed2fbf8246cda6bb5314bdfbb33b2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc3f4be7_5bb7cd7e",
        "filename": "src/Vulkan/VkSemaphoreExternalLinux.hpp",
        "patchSetId": 11
      },
      "lineNbr": 86,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-10-03T11:41:05Z",
      "side": 1,
      "message": "This would not work, since the reference count must be visible to all processes that share the semaphore.\n\nstd::make_shared places the reference-count in a heap-allocated control block that cannot be shared through multiple processes.\n\n(Similarly, std::mutex and std::condition_variable cannot be process-shared, hence the use of Pthread primitives here).\n\nAlso lock contention should not be an issue here, the reference count is only accessed when importing/exporting semaphores, which should happen very rarely compared to wait()/signal().",
      "parentUuid": "0e6a58d5_228bd348",
      "range": {
        "startLine": 71,
        "startChar": 1,
        "endLine": 86,
        "endChar": 2
      },
      "revId": "a126dc1a76bed2fbf8246cda6bb5314bdfbb33b2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68365e1d_12976dd5",
        "filename": "src/Vulkan/VkSemaphoreExternalLinux.hpp",
        "patchSetId": 11
      },
      "lineNbr": 86,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-10-03T12:06:31Z",
      "side": 1,
      "message": "Okay, sorry I ignored the fact this is process shared.",
      "parentUuid": "dc3f4be7_5bb7cd7e",
      "range": {
        "startLine": 71,
        "startChar": 1,
        "endLine": 86,
        "endChar": 2
      },
      "revId": "a126dc1a76bed2fbf8246cda6bb5314bdfbb33b2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d62c1306_92f0d152",
        "filename": "src/Vulkan/libVulkan.cpp",
        "patchSetId": 11
      },
      "lineNbr": 926,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-10-03T10:52:28Z",
      "side": 1,
      "message": "chrisforbes@ or sugoi@ - are you happy with this guard being dropped?",
      "range": {
        "startLine": 926,
        "startChar": 1,
        "endLine": 926,
        "endChar": 23
      },
      "revId": "a126dc1a76bed2fbf8246cda6bb5314bdfbb33b2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "585761c7_77d2845f",
        "filename": "src/Vulkan/libVulkan.cpp",
        "patchSetId": 11
      },
      "lineNbr": 926,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-10-03T11:41:05Z",
      "side": 1,
      "message": "for the record, this is necessary to be able to parse the pNext chain in Create() below (the previous implementation ignored it).",
      "parentUuid": "d62c1306_92f0d152",
      "range": {
        "startLine": 926,
        "startChar": 1,
        "endLine": 926,
        "endChar": 23
      },
      "revId": "a126dc1a76bed2fbf8246cda6bb5314bdfbb33b2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ba329d8_9df8c3a1",
        "filename": "src/Vulkan/libVulkan.cpp",
        "patchSetId": 11
      },
      "lineNbr": 926,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-10-03T12:06:31Z",
      "side": 1,
      "message": "Yup - its that we\u0027re no longer calling UNIMPLEMENTED() for pNext types that we aren\u0027t handling (only VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO currently).\nI\u0027m not too sure what our policy is here.",
      "parentUuid": "585761c7_77d2845f",
      "range": {
        "startLine": 926,
        "startChar": 1,
        "endLine": 926,
        "endChar": 23
      },
      "revId": "a126dc1a76bed2fbf8246cda6bb5314bdfbb33b2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    }
  ]
}