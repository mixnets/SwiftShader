{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ddadcc55_39ca2d41",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-02-12T19:13:54Z",
      "side": 1,
      "message": "Pretty good! I think this is already close to being landable. Only a few nits for possible minor improvements (your choice).",
      "revId": "80219b7720982965f26da97b2ec2a88609aa0eaa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5f8f087_63e86a78",
        "filename": "src/Vulkan/VkDevice.cpp",
        "patchSetId": 5
      },
      "lineNbr": 396,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-02-12T19:13:54Z",
      "side": 1,
      "message": "Nit: this has very similar logic to waitForFences. You might want to move it next to it.",
      "range": {
        "startLine": 396,
        "startChar": 0,
        "endLine": 396,
        "endChar": 90
      },
      "revId": "80219b7720982965f26da97b2ec2a88609aa0eaa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dba13fbe_a556c786",
        "filename": "src/Vulkan/VkDevice.cpp",
        "patchSetId": 5
      },
      "lineNbr": 403,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-02-12T19:13:54Z",
      "side": 1,
      "message": "Nit: This is an exact copy of the code in waitForFences. Maybe adding a utility function would be useful to remove some code duplication. Something like:\n\nusing time_point \u003d std::chrono::time_point\u003cstd::chrono::system_clock, std::chrono::nanoseconds\u003e;\nstatic time_point GetEndTimePoint(uint64_t timeout)\n{\n  const time_point start \u003d now();\n  const uint64_t max_timeout \u003d (LLONG_MAX - start.time_since_epoch().count());\n  return start + std::chrono::nanoseconds(std::min(max_timeout, timeout));\n}",
      "range": {
        "startLine": 399,
        "startChar": 0,
        "endLine": 403,
        "endChar": 92
      },
      "revId": "80219b7720982965f26da97b2ec2a88609aa0eaa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ff4e5e0_a9fd10de",
        "filename": "src/Vulkan/VkDevice.cpp",
        "patchSetId": 5
      },
      "lineNbr": 407,
      "author": {
        "id": 9669
      },
      "writtenOn": "2021-02-12T19:45:48Z",
      "side": 1,
      "message": "In C++, there\u0027s no need to copy-assign this way. Just:\n\nTimelineSempahore any;",
      "revId": "80219b7720982965f26da97b2ec2a88609aa0eaa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef7339af_34d9ae65",
        "filename": "src/Vulkan/VkDevice.hpp",
        "patchSetId": 5
      },
      "lineNbr": 76,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-02-12T19:13:54Z",
      "side": 1,
      "message": "nit: You might want to move this up close to the waitForFences/waitIdle cluster, so that it\u0027s grouped with similar wait themed functions.",
      "range": {
        "startLine": 76,
        "startChar": 1,
        "endLine": 76,
        "endChar": 84
      },
      "revId": "80219b7720982965f26da97b2ec2a88609aa0eaa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "709e1a21_9fe8ff6e",
        "filename": "src/Vulkan/VkQueue.cpp",
        "patchSetId": 5
      },
      "lineNbr": 51,
      "author": {
        "id": 9669
      },
      "writtenOn": "2021-02-12T19:45:48Z",
      "side": 1,
      "message": "Prefer to use \u0027auto\u0027 when the type is repeated. In this case:\n\nconst auto* tlsSubmitInfo \u003d reinterpret_cast\u003cconst VkTimelineSemaphoreSubmitInfo *\u003e(extension);\n\nThere are multiple examples of this in your changes.",
      "revId": "80219b7720982965f26da97b2ec2a88609aa0eaa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0364ea94_2c21bf38",
        "filename": "src/Vulkan/VkQueue.cpp",
        "patchSetId": 5
      },
      "lineNbr": 103,
      "author": {
        "id": 9669
      },
      "writtenOn": "2021-02-12T19:45:48Z",
      "side": 1,
      "message": "I don\u0027t understand this comment. The \"mem\" is already writable. Also, I think \"copy\" isn\u0027t a good name here, as you\u0027re not really making a copy, just another pointer to a location in the buffer. Perhaps just call it \"tlsSubmitInfo\" or something?",
      "revId": "80219b7720982965f26da97b2ec2a88609aa0eaa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c288a6d5_374c4428",
        "filename": "src/Vulkan/VkQueue.cpp",
        "patchSetId": 5
      },
      "lineNbr": 181,
      "author": {
        "id": 9669
      },
      "writtenOn": "2021-02-12T19:45:48Z",
      "side": 1,
      "message": "This variable should have \"timeline\" in the name so that the code below is easier to understand.",
      "revId": "80219b7720982965f26da97b2ec2a88609aa0eaa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc0a9bb0_d500c5cb",
        "filename": "src/Vulkan/VkQueue.cpp",
        "patchSetId": 5
      },
      "lineNbr": 198,
      "author": {
        "id": 9669
      },
      "writtenOn": "2021-02-12T19:45:48Z",
      "side": 1,
      "message": "Just to be sure, if semaphoreInfo is valid, and j \u003e\u003d semaphoreInfo-\u003ewaitSemaphoreValueCount, then we want to process submitInfo.pWaitSemaphores[j] as a BinarySemaphore?",
      "revId": "80219b7720982965f26da97b2ec2a88609aa0eaa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4889e08_42b3130f",
        "filename": "src/Vulkan/VkSemaphore.cpp",
        "patchSetId": 5
      },
      "lineNbr": 146,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-02-12T19:13:54Z",
      "side": 1,
      "message": "Nit: Maybe destroy() could just be a virtual function?",
      "range": {
        "startLine": 139,
        "startChar": 0,
        "endLine": 146,
        "endChar": 2
      },
      "revId": "80219b7720982965f26da97b2ec2a88609aa0eaa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e55c2c70_03f9d85d",
        "filename": "src/Vulkan/VkSemaphore.cpp",
        "patchSetId": 5
      },
      "lineNbr": 146,
      "author": {
        "id": 9669
      },
      "writtenOn": "2021-02-12T19:45:48Z",
      "side": 1,
      "message": "I was going to say the same thing.",
      "parentUuid": "c4889e08_42b3130f",
      "range": {
        "startLine": 139,
        "startChar": 0,
        "endLine": 146,
        "endChar": 2
      },
      "revId": "80219b7720982965f26da97b2ec2a88609aa0eaa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef97868d_99bb88b3",
        "filename": "src/Vulkan/VkSemaphore.hpp",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 9669
      },
      "writtenOn": "2021-02-12T19:45:48Z",
      "side": 1,
      "message": "Remove?",
      "revId": "80219b7720982965f26da97b2ec2a88609aa0eaa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52e1541c_e6a664ec",
        "filename": "src/Vulkan/VkSemaphore.hpp",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 9669
      },
      "writtenOn": "2021-02-12T19:45:48Z",
      "side": 1,
      "message": "Now that you added DynamicCast, we probably don\u0027t need \"as\" anymore, right?",
      "revId": "80219b7720982965f26da97b2ec2a88609aa0eaa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7221fa0_bf784e66",
        "filename": "src/Vulkan/VkSemaphore.hpp",
        "patchSetId": 5
      },
      "lineNbr": 83,
      "author": {
        "id": 9669
      },
      "writtenOn": "2021-02-12T19:45:48Z",
      "side": 1,
      "message": "Do we need this? Semaphore is the type that maps to a VkSemaphore. We don\u0027t expect Cast\u003c\u003e to work for this type. We already derive from Semaphore that is a Object\u003cSemaphore, VkSemaphore\u003e.",
      "range": {
        "startLine": 83,
        "startChar": 42,
        "endLine": 83,
        "endChar": 85
      },
      "revId": "80219b7720982965f26da97b2ec2a88609aa0eaa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "951f1a43_9c256a91",
        "filename": "src/Vulkan/VkSemaphore.hpp",
        "patchSetId": 5
      },
      "lineNbr": 216,
      "author": {
        "id": 9669
      },
      "writtenOn": "2021-02-12T19:45:48Z",
      "side": 1,
      "message": "As discussed on chat, make this \"vk::Cast(object)\".",
      "range": {
        "startLine": 216,
        "startChar": 24,
        "endLine": 216,
        "endChar": 39
      },
      "revId": "80219b7720982965f26da97b2ec2a88609aa0eaa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61db98f3_86916081",
        "filename": "src/Vulkan/VkTimelineSemaphore.hpp",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 9669
      },
      "writtenOn": "2021-02-12T19:45:48Z",
      "side": 1,
      "message": "Same comment as before - not sure we need this.",
      "range": {
        "startLine": 32,
        "startChar": 51,
        "endLine": 32,
        "endChar": 89
      },
      "revId": "80219b7720982965f26da97b2ec2a88609aa0eaa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed49eafb_d2dac800",
        "filename": "src/Vulkan/libVulkan.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1408,
      "author": {
        "id": 9669
      },
      "writtenOn": "2021-02-12T19:45:48Z",
      "side": 1,
      "message": "Make this \"else if (type \u003d\u003d ... Timeline) and have an else that asserts.",
      "revId": "80219b7720982965f26da97b2ec2a88609aa0eaa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a8a3375_d966a860",
        "filename": "src/Vulkan/libVulkan.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1433,
      "author": {
        "id": 9669
      },
      "writtenOn": "2021-02-12T19:45:48Z",
      "side": 1,
      "message": "DynamicCast will return nullptr if the client calls this function on the wrong type of sempahore (timeline in this case). This will crash with a nullptr-access. Is this okay, or should we do:\n\nif (auto* sem \u003d vk::DynamicCast\u003cvk::BinarySemaphore\u003e(pGetFdInfo-\u003esemaphore)\n{\n    return sem-\u003eexportFd(pFd);\n}\nreturn some error code;\n\n?",
      "revId": "80219b7720982965f26da97b2ec2a88609aa0eaa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}