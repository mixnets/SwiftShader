{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "994f5c12_1d8524ed",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-12-03T02:30:28Z",
      "side": 1,
      "message": "Is this really making tests run 1% faster or is this some noise?",
      "revId": "d2c8a9bfda5deb8a87daaae363aa1e559fd3f0d7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18ee414e_d0bf264e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-12-03T21:42:30Z",
      "side": 1,
      "message": "Good finds, but it doesn\u0027t look like this addresses any leaks, and only affects start time (which is nice)! I think there are more elegant ways to achieve the startup time benefit for each of these (while also keeping the benefit of not seeing allocations/deallocations happen on dlopen/dlclose):",
      "revId": "d2c8a9bfda5deb8a87daaae363aa1e559fd3f0d7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "378b760b_b0c6bd39",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-12-03T21:42:30Z",
      "side": 1,
      "message": "Looks legit! I checked several previous runs and they all take 26m40+",
      "parentUuid": "994f5c12_1d8524ed",
      "revId": "d2c8a9bfda5deb8a87daaae363aa1e559fd3f0d7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b954b61f_49101b77",
        "filename": "src/Device/BC_Decoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 742,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-12-03T21:42:30Z",
      "side": 1,
      "message": "I think this could remain static data by replacing the std::vector with a C array. While half of the modes are illegal so this would waste some space, that can be gained back by replacing most of the int types in the above structures by char (as well as making it the underlying type of the enums).\n\nSean, can you look into doing that as a separate change?",
      "range": {
        "startLine": 740,
        "startChar": 0,
        "endLine": 742,
        "endChar": 55
      },
      "revId": "d2c8a9bfda5deb8a87daaae363aa1e559fd3f0d7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb34d71f_37ad6247",
        "filename": "src/Device/BC_Decoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 956,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-12-03T21:42:30Z",
      "side": 1,
      "message": "I think this can be eliminated. There\u0027s always first a Mode, then several EP*, and then a Partition. So just lift the Mode and Partition handling out of the loop.\n\nIf blockDescs[] was split up into info for Mode, EP*s, and Partition, we wouldn\u0027t even need the Mode and Partition enums, it seems?",
      "range": {
        "startLine": 956,
        "startChar": 3,
        "endLine": 956,
        "endChar": 20
      },
      "revId": "d2c8a9bfda5deb8a87daaae363aa1e559fd3f0d7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8314f5f4_45f8c9c6",
        "filename": "src/Vulkan/VkGetProcAddress.cpp",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-12-03T21:42:30Z",
      "side": 1,
      "message": "I\u0027d rather make these C arrays, and have vk::Instance and vk::Device place them in member maps during construction.",
      "range": {
        "startLine": 36,
        "startChar": 1,
        "endLine": 36,
        "endChar": 65
      },
      "revId": "d2c8a9bfda5deb8a87daaae363aa1e559fd3f0d7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0b0f3bd_870bc0b0",
        "filename": "src/Vulkan/libVulkan.cpp",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-12-03T21:42:30Z",
      "side": 1,
      "message": "\u003ccinttypes\u003e",
      "range": {
        "startLine": 94,
        "startChar": 9,
        "endLine": 94,
        "endChar": 21
      },
      "revId": "d2c8a9bfda5deb8a87daaae363aa1e559fd3f0d7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91066cf5_cd98db80",
        "filename": "src/Vulkan/libVulkan.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1331,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-12-03T21:42:30Z",
      "side": 1,
      "message": "Although \u003ccinttypes\u003e is an official C++11 header, I have a vague recollection that these things are not always universally supported. That said, it\u0027s 2020, so we might be fine.\n\nLGTM, but please split this into a separate patch.",
      "range": {
        "startLine": 1331,
        "startChar": 131,
        "endLine": 1331,
        "endChar": 138
      },
      "revId": "d2c8a9bfda5deb8a87daaae363aa1e559fd3f0d7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "893d0c89_5afd0f6e",
        "filename": "src/WSI/XcbSurfaceKHR.cpp",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-12-03T21:42:30Z",
      "side": 1,
      "message": "I think this class can be left as-is. It didn\u0027t have any member fields, and no (explicit) constructor/destructor. It only does the loading of the exports on the first operator-\u003e usage.",
      "range": {
        "startLine": 54,
        "startChar": 6,
        "endLine": 54,
        "endChar": 12
      },
      "revId": "d2c8a9bfda5deb8a87daaae363aa1e559fd3f0d7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}