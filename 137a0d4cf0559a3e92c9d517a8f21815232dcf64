{
  "comments": [
    {
      "key": {
        "uuid": "99005a83_b2a9f662",
        "filename": "src/Reactor/SubzeroReactor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4513,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-03-27T18:20:08Z",
      "side": 1,
      "message": "Seems like it would be useful to add a \u0027wait\u0027 function on the fiber class that takes a predicate for when to stop waiting, just like condition_variable::wait.",
      "revId": "137a0d4cf0559a3e92c9d517a8f21815232dcf64",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b840f0e5_c5b06228",
        "filename": "src/Reactor/SubzeroReactor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4513,
      "author": {
        "id": 7183
      },
      "writtenOn": "2020-03-28T01:10:13Z",
      "side": 1,
      "message": "The versions of wait() that take a predicate aren\u0027t for convenience - they\u0027re there because it is necessary for wait() to handle the locking and unlocking of the mutex around calling the predicate in order to be atomically correct. I don\u0027t believe we should add a predicate on this form, as it doesn\u0027t give you anything more than looping on the wait() externally.\n\nFWIW: This while() could be an if(). I\u0027m only using while() here as a defensive precaution against sporadic wake-ups, which currently should never happen. Who knows what the future holds and all that, so I decided to play safe than have one real nasty bug to trace down in the future.",
      "parentUuid": "99005a83_b2a9f662",
      "revId": "137a0d4cf0559a3e92c9d517a8f21815232dcf64",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "599f9602_ccdf45fb",
        "filename": "src/Reactor/SubzeroReactor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4513,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-03-28T01:32:09Z",
      "side": 1,
      "message": "Sure, but it is convenient ðŸ˜Š. Also, that wait also loops for spurious wakeup, as you do, so it\u0027s not that different. \nAnyway, not at all necessary for this change, but it would simplify the code a bit.",
      "parentUuid": "b840f0e5_c5b06228",
      "revId": "137a0d4cf0559a3e92c9d517a8f21815232dcf64",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a95637f4_ca2dd835",
        "filename": "src/Reactor/SubzeroReactor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4513,
      "author": {
        "id": 7183
      },
      "writtenOn": "2020-03-28T16:57:27Z",
      "side": 1,
      "message": "If this were any other function in marl, I\u0027d probably agree with you, but this one shouldn\u0027t be convenient. It requires careful consideration for use, and adding predicate helpers might make it look safer than it is.\nAnyway, that doesn\u0027t mean we can\u0027t write a helper in SubzeroReactor.cpp.",
      "parentUuid": "599f9602_ccdf45fb",
      "revId": "137a0d4cf0559a3e92c9d517a8f21815232dcf64",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a6c29c6_83e68730",
        "filename": "src/Reactor/SubzeroReactor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4539,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-03-27T18:20:08Z",
      "side": 1,
      "message": "I know you did this throughout the change, but would you mind reverting \u0027data\u0027 back to \u0027coroData\u0027 (and making it consistent in suspend)? First, there will be less diffs here, and second, I can more easily search for instances of its usage.",
      "revId": "137a0d4cf0559a3e92c9d517a8f21815232dcf64",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "209262af_c753f740",
        "filename": "src/Reactor/SubzeroReactor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4539,
      "author": {
        "id": 7183
      },
      "writtenOn": "2020-03-28T01:10:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a6c29c6_83e68730",
      "revId": "137a0d4cf0559a3e92c9d517a8f21815232dcf64",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}