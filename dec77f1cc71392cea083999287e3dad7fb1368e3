{
  "comments": [
    {
      "key": {
        "uuid": "53c5b30c_05c030cb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 5065
      },
      "writtenOn": "2019-02-25T09:34:47Z",
      "side": 1,
      "message": "nit: I\u0027d say they are the raw Vulkan structure and not converted to an internal representation. bindlessness is independent and means that binding a descriptor sets is the cost of updating a pointer in O(1) instead of updating in O(number of resources in the descriptor set).",
      "range": {
        "startLine": 16,
        "startChar": 18,
        "endLine": 16,
        "endChar": 36
      },
      "revId": "dec77f1cc71392cea083999287e3dad7fb1368e3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85a6c634_8a91e193",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-02-22T11:42:46Z",
      "side": 1,
      "message": "nit: odd mix of naming styles here (underscore vs camel).",
      "range": {
        "startLine": 37,
        "startChar": 7,
        "endLine": 37,
        "endChar": 18
      },
      "revId": "dec77f1cc71392cea083999287e3dad7fb1368e3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8f1ab52_dfa8791c",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-02-22T21:29:13Z",
      "side": 1,
      "message": "Noted, will fix.",
      "parentUuid": "85a6c634_8a91e193",
      "range": {
        "startLine": 37,
        "startChar": 7,
        "endLine": 37,
        "endChar": 18
      },
      "revId": "dec77f1cc71392cea083999287e3dad7fb1368e3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5434e621_b4dec830",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 7184
      },
      "writtenOn": "2019-02-24T14:58:57Z",
      "side": 1,
      "message": "I think you have the last two types around the wrong way - this should be sizeof(VkBufferView)",
      "range": {
        "startLine": 105,
        "startChar": 16,
        "endLine": 105,
        "endChar": 38
      },
      "revId": "dec77f1cc71392cea083999287e3dad7fb1368e3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bc44c84_45c354db",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 2
      },
      "lineNbr": 110,
      "author": {
        "id": 7184
      },
      "writtenOn": "2019-02-24T14:58:57Z",
      "side": 1,
      "message": "And this should be sizeof(VkDescriptorBufferInfo)",
      "revId": "dec77f1cc71392cea083999287e3dad7fb1368e3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b27df26_08e540ca",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 2
      },
      "lineNbr": 171,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-02-22T11:42:46Z",
      "side": 1,
      "message": "I\u0027m thinking we could simplify a some of the pointer arithmetic here with something like:\n\nstruct DescriptorSet\n{\n    DescriptorSetLayout* layout;\n    uint8_t data[];\n};\n\nthen this code becomes a bit more followable:\n\n\tDescriptorSet* srcSet \u003d reinterpret_cast\u003cDescriptorSet*\u003e(descriptorCopies.srcSet);\n\tDescriptorSetLayout* srcLayout \u003d srcSet-\u003elayout;\n\tASSERT(srcLayout !\u003d nullptr);\n\n\tsize_t srcByteOffset \u003d 0;\n\tconst VkDescriptorSetLayoutBinding\u0026 srcBinding \u003d srcLayout-\u003egetBindingInfo(descriptorCopies.srcBinding, \u0026srcByteOffset);\n\tsize_t srcTypeSize \u003d GetDescriptorSize(srcBinding.descriptorType);\n\tsrcByteOffset +\u003d srcTypeSize * descriptorCopies.srcArrayElement; // Offset to the element.\n\tuint8_t* memToRead \u003d \u0026srcSet-\u003edata[srcByteOffset];\n\n\t...\n\nThis also gives a nice datatype for our implementation of VkDescriptorSet, and we could have a Cast() for it.\n\nIf we did go this way, then maybe these Update methods would have a more natural home on DescriptorSet?\n\nJust a suggestion, feel free to disagree.",
      "revId": "dec77f1cc71392cea083999287e3dad7fb1368e3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0734d218_25706c63",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 2
      },
      "lineNbr": 171,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-02-22T21:29:13Z",
      "side": 1,
      "message": "Thanks for the suggestion! I\u0027ll definitely look into doing it this way. I\u0027m always for improving code readability.",
      "parentUuid": "9b27df26_08e540ca",
      "revId": "dec77f1cc71392cea083999287e3dad7fb1368e3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "333c11cf_77f13e37",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 2
      },
      "lineNbr": 191,
      "author": {
        "id": 5065
      },
      "writtenOn": "2019-02-25T09:34:47Z",
      "side": 1,
      "message": "nit: I\u0027m fairly sure all these pointers are the same, maybe we could static_assert it and take a pointer to descriptorWrites directly?\n\nOr we just assume the compiler will notice all cases of the switch do the same thing.",
      "revId": "dec77f1cc71392cea083999287e3dad7fb1368e3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1cf8886_d22d2f67",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-02-22T11:42:46Z",
      "side": 1,
      "message": "We should assert that this doesn\u0027t write off the end of the DescriptorSetLayout.",
      "range": {
        "startLine": 214,
        "startChar": 1,
        "endLine": 214,
        "endChar": 7
      },
      "revId": "dec77f1cc71392cea083999287e3dad7fb1368e3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b10c909_e1db7df1",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-02-22T21:29:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e1cf8886_d22d2f67",
      "range": {
        "startLine": 214,
        "startChar": 1,
        "endLine": 214,
        "endChar": 7
      },
      "revId": "dec77f1cc71392cea083999287e3dad7fb1368e3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9df3081e_a373c6b6",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 2
      },
      "lineNbr": 228,
      "author": {
        "id": 5065
      },
      "writtenOn": "2019-02-25T09:34:47Z",
      "side": 1,
      "message": "Could we have a helper function on the layout to do this? Like getBindingOffset(binding, arrayElement) or maybe even getBindingPointer? It could also be used in initialize to write immutable samplers at the correct position and in WriteDescrtiproSets as well.",
      "range": {
        "startLine": 222,
        "startChar": 0,
        "endLine": 228,
        "endChar": 66
      },
      "revId": "dec77f1cc71392cea083999287e3dad7fb1368e3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85f6eb1f_0146e38a",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 2
      },
      "lineNbr": 243,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-02-22T11:42:46Z",
      "side": 1,
      "message": "Ditto",
      "range": {
        "startLine": 243,
        "startChar": 1,
        "endLine": 243,
        "endChar": 7
      },
      "revId": "dec77f1cc71392cea083999287e3dad7fb1368e3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ee1d19d_d7e6c0e1",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 2
      },
      "lineNbr": 243,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-02-22T21:29:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "85f6eb1f_0146e38a",
      "range": {
        "startLine": 243,
        "startChar": 1,
        "endLine": 243,
        "endChar": 7
      },
      "revId": "dec77f1cc71392cea083999287e3dad7fb1368e3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "312e2a1b_5471e46f",
        "filename": "src/Vulkan/VkDescriptorSetLayout.hpp",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 5065
      },
      "writtenOn": "2019-02-25T09:34:47Z",
      "side": 1,
      "message": "this isn\u0027t used in this header.",
      "revId": "dec77f1cc71392cea083999287e3dad7fb1368e3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cb26643_a0963d8e",
        "filename": "src/Vulkan/VkDescriptorSetLayout.hpp",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 5065
      },
      "writtenOn": "2019-02-25T09:34:47Z",
      "side": 1,
      "message": "nit: mismatched indentation style with the rest of the file.",
      "range": {
        "startLine": 46,
        "startChar": 8,
        "endLine": 46,
        "endChar": 15
      },
      "revId": "dec77f1cc71392cea083999287e3dad7fb1368e3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2632220d_496aa297",
        "filename": "src/Vulkan/VkDevice.cpp",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 5065
      },
      "writtenOn": "2019-02-25T09:34:47Z",
      "side": 1,
      "message": "nit: use different function names instead of overloads?",
      "range": {
        "startLine": 113,
        "startChar": 23,
        "endLine": 113,
        "endChar": 42
      },
      "revId": "dec77f1cc71392cea083999287e3dad7fb1368e3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    }
  ]
}