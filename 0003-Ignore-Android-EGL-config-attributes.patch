From 4522c5dc6b0271bb170f11c2afbea448b49d2865 Mon Sep 17 00:00:00 2001
From: Nicolas Capens <capn@google.com>
Date: Tue, 25 Nov 2014 13:31:46 -0500
Subject: [PATCH 3/5] Ignore Android EGL config attributes.

Change-Id: Id19a635b95e8bde227eb0cc76a450c4feb567e2d
---
 src/OpenGL/libEGL/Config.cpp | 71 ++++++++++++++++++++++++--------------------
 1 file changed, 38 insertions(+), 33 deletions(-)

diff --git a/src/OpenGL/libEGL/Config.cpp b/src/OpenGL/libEGL/Config.cpp
index 61a94d7..1b0f5ef 100644
--- a/src/OpenGL/libEGL/Config.cpp
+++ b/src/OpenGL/libEGL/Config.cpp
@@ -17,6 +17,9 @@
 
 #include "common/debug.h"
 
+#define EGLAPI
+#include <EGL/eglext.h>
+
 #include <algorithm>
 #include <vector>
 
@@ -288,39 +291,41 @@ bool ConfigSet::getConfigs(EGLConfig *configs, const EGLint *attribList, EGLint
         {
             switch(attribute[0])
             {
-            case EGL_BUFFER_SIZE:             match = config->mBufferSize >= attribute[1];                      break;
-            case EGL_ALPHA_SIZE:              match = config->mAlphaSize >= attribute[1];                       break;
-            case EGL_BLUE_SIZE:               match = config->mBlueSize >= attribute[1];                        break;
-            case EGL_GREEN_SIZE:              match = config->mGreenSize >= attribute[1];                       break;
-            case EGL_RED_SIZE:                match = config->mRedSize >= attribute[1];                         break;
-            case EGL_DEPTH_SIZE:              match = config->mDepthSize >= attribute[1];                       break;
-            case EGL_STENCIL_SIZE:            match = config->mStencilSize >= attribute[1];                     break;
-            case EGL_CONFIG_CAVEAT:           match = config->mConfigCaveat == attribute[1];                    break;
-            case EGL_CONFIG_ID:               match = config->mConfigID == attribute[1];                        break;
-            case EGL_LEVEL:                   match = config->mLevel >= attribute[1];                           break;
-            case EGL_NATIVE_RENDERABLE:       match = config->mNativeRenderable == attribute[1];                break;
-            case EGL_NATIVE_VISUAL_ID:        match = config->mNativeVisualID == attribute[1];                  break;
-            case EGL_NATIVE_VISUAL_TYPE:      match = config->mNativeVisualType == attribute[1];                break;
-            case EGL_SAMPLES:                 match = config->mSamples >= attribute[1];                         break;
-            case EGL_SAMPLE_BUFFERS:          match = config->mSampleBuffers >= attribute[1];                   break;
-            case EGL_SURFACE_TYPE:            match = (config->mSurfaceType & attribute[1]) == attribute[1];    break;
-            case EGL_TRANSPARENT_TYPE:        match = config->mTransparentType == attribute[1];                 break;
-            case EGL_TRANSPARENT_BLUE_VALUE:  match = config->mTransparentBlueValue == attribute[1];            break;
-            case EGL_TRANSPARENT_GREEN_VALUE: match = config->mTransparentGreenValue == attribute[1];           break;
-            case EGL_TRANSPARENT_RED_VALUE:   match = config->mTransparentRedValue == attribute[1];             break;
-            case EGL_BIND_TO_TEXTURE_RGB:     match = config->mBindToTextureRGB == attribute[1];                break;
-            case EGL_BIND_TO_TEXTURE_RGBA:    match = config->mBindToTextureRGBA == attribute[1];               break;
-            case EGL_MIN_SWAP_INTERVAL:       match = config->mMinSwapInterval == attribute[1];                 break;
-            case EGL_MAX_SWAP_INTERVAL:       match = config->mMaxSwapInterval == attribute[1];                 break;
-            case EGL_LUMINANCE_SIZE:          match = config->mLuminanceSize >= attribute[1];                   break;
-            case EGL_ALPHA_MASK_SIZE:         match = config->mAlphaMaskSize >= attribute[1];                   break;
-            case EGL_COLOR_BUFFER_TYPE:       match = config->mColorBufferType == attribute[1];                 break;
-            case EGL_RENDERABLE_TYPE:         match = (config->mRenderableType & attribute[1]) == attribute[1]; break;
-            case EGL_MATCH_NATIVE_PIXMAP:     match = false; UNIMPLEMENTED();                                   break;
-            case EGL_CONFORMANT:              match = (config->mConformant & attribute[1]) == attribute[1];     break;
-            case EGL_MAX_PBUFFER_WIDTH:       match = config->mMaxPBufferWidth >= attribute[1];                 break;
-            case EGL_MAX_PBUFFER_HEIGHT:      match = config->mMaxPBufferHeight >= attribute[1];                break;
-            case EGL_MAX_PBUFFER_PIXELS:      match = config->mMaxPBufferPixels >= attribute[1];                break;
+            case EGL_BUFFER_SIZE:                match = config->mBufferSize >= attribute[1];                      break;
+            case EGL_ALPHA_SIZE:                 match = config->mAlphaSize >= attribute[1];                       break;
+            case EGL_BLUE_SIZE:                  match = config->mBlueSize >= attribute[1];                        break;
+            case EGL_GREEN_SIZE:                 match = config->mGreenSize >= attribute[1];                       break;
+            case EGL_RED_SIZE:                   match = config->mRedSize >= attribute[1];                         break;
+            case EGL_DEPTH_SIZE:                 match = config->mDepthSize >= attribute[1];                       break;
+            case EGL_STENCIL_SIZE:               match = config->mStencilSize >= attribute[1];                     break;
+            case EGL_CONFIG_CAVEAT:              match = config->mConfigCaveat == attribute[1];                    break;
+            case EGL_CONFIG_ID:                  match = config->mConfigID == attribute[1];                        break;
+            case EGL_LEVEL:                      match = config->mLevel >= attribute[1];                           break;
+            case EGL_NATIVE_RENDERABLE:          match = config->mNativeRenderable == attribute[1];                break;
+            case EGL_NATIVE_VISUAL_ID:           match = config->mNativeVisualID == attribute[1];                  break;
+            case EGL_NATIVE_VISUAL_TYPE:         match = config->mNativeVisualType == attribute[1];                break;
+            case EGL_SAMPLES:                    match = config->mSamples >= attribute[1];                         break;
+            case EGL_SAMPLE_BUFFERS:             match = config->mSampleBuffers >= attribute[1];                   break;
+            case EGL_SURFACE_TYPE:               match = (config->mSurfaceType & attribute[1]) == attribute[1];    break;
+            case EGL_TRANSPARENT_TYPE:           match = config->mTransparentType == attribute[1];                 break;
+            case EGL_TRANSPARENT_BLUE_VALUE:     match = config->mTransparentBlueValue == attribute[1];            break;
+            case EGL_TRANSPARENT_GREEN_VALUE:    match = config->mTransparentGreenValue == attribute[1];           break;
+            case EGL_TRANSPARENT_RED_VALUE:      match = config->mTransparentRedValue == attribute[1];             break;
+            case EGL_BIND_TO_TEXTURE_RGB:        match = config->mBindToTextureRGB == attribute[1];                break;
+            case EGL_BIND_TO_TEXTURE_RGBA:       match = config->mBindToTextureRGBA == attribute[1];               break;
+            case EGL_MIN_SWAP_INTERVAL:          match = config->mMinSwapInterval == attribute[1];                 break;
+            case EGL_MAX_SWAP_INTERVAL:          match = config->mMaxSwapInterval == attribute[1];                 break;
+            case EGL_LUMINANCE_SIZE:             match = config->mLuminanceSize >= attribute[1];                   break;
+            case EGL_ALPHA_MASK_SIZE:            match = config->mAlphaMaskSize >= attribute[1];                   break;
+            case EGL_COLOR_BUFFER_TYPE:          match = config->mColorBufferType == attribute[1];                 break;
+            case EGL_RENDERABLE_TYPE:            match = (config->mRenderableType & attribute[1]) == attribute[1]; break;
+            case EGL_MATCH_NATIVE_PIXMAP:        match = false; UNIMPLEMENTED();                                   break;
+            case EGL_CONFORMANT:                 match = (config->mConformant & attribute[1]) == attribute[1];     break;
+            case EGL_MAX_PBUFFER_WIDTH:          match = config->mMaxPBufferWidth >= attribute[1];                 break;
+            case EGL_MAX_PBUFFER_HEIGHT:         match = config->mMaxPBufferHeight >= attribute[1];                break;
+            case EGL_MAX_PBUFFER_PIXELS:         match = config->mMaxPBufferPixels >= attribute[1];                break;
+			case EGL_RECORDABLE_ANDROID:         match = false;                                                    break;
+			case EGL_FRAMEBUFFER_TARGET_ANDROID: match = false;                                                    break;
 			default:
 				UNIMPLEMENTED();
 				match = false;
-- 
1.8.5.2.msysgit.0

