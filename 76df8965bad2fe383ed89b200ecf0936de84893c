{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "15d8a694_bb75c80b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-02T20:12:14Z",
      "side": 1,
      "message": "Looks good, just a minor question about the optional functionality:",
      "revId": "76df8965bad2fe383ed89b200ecf0936de84893c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bb1343d_19290418",
        "filename": "src/Pipeline/PixelRoutine.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2496,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-02T20:12:14Z",
      "side": 1,
      "message": "Could use a comment that this is the placeholder for the advanced blend mode alpha operation.",
      "revId": "76df8965bad2fe383ed89b200ecf0936de84893c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0c3a373_515b61c1",
        "filename": "src/Pipeline/PixelRoutine.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2496,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-11-04T18:53:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5bb1343d_19290418",
      "revId": "76df8965bad2fe383ed89b200ecf0936de84893c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad4c35ca_3f7ec8f2",
        "filename": "src/Vulkan/VkPhysicalDevice.cpp",
        "patchSetId": 8
      },
      "lineNbr": 337,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-02T20:12:14Z",
      "side": 1,
      "message": "This is false on most implementations. Even if we can support it, do we lose anything by setting it to false? Is it demanded by ES 3.2? If not, I think we should be conservative here. Possibly easier to enable it later than to disable it, and might help prevent applications assume it\u0027s available.\n\nhttps://vulkan.gpuinfo.org/listfeaturesextensions.php?extension\u003dVK_EXT_blend_operation_advanced\u0026platform\u003dall",
      "range": {
        "startLine": 337,
        "startChar": 45,
        "endLine": 337,
        "endChar": 52
      },
      "revId": "76df8965bad2fe383ed89b200ecf0936de84893c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b535c9d_68817e31",
        "filename": "src/Vulkan/VkPhysicalDevice.cpp",
        "patchSetId": 8
      },
      "lineNbr": 337,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-11-04T18:53:48Z",
      "side": 1,
      "message": "According to the spec:\n\"advancedBlendCoherentOperations specifies whether blending using advanced blend operations is guaranteed to execute atomically and in primitive order. If this is VK_TRUE, VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT is treated the same as VK_ACCESS_COLOR_ATTACHMENT_READ_BIT, and advanced blending needs no additional synchronization over basic blending. If this is VK_FALSE, then memory dependencies are required to guarantee order between two advanced blending operations that occur on the same sample.\"\n\nAFAIK, in SwiftShader, we don\u0027t have to do anything to support this, \"VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT is treated the same as VK_ACCESS_COLOR_ATTACHMENT_READ_BIT, and advanced blending needs no additional synchronization over basic blending\" is already true.\n\nI think it should be advertised properly, as applications using SwiftShader need to know that SwiftShader isn\u0027t a way to test whether their synchronization code works, since it doesn\u0027t require any.",
      "parentUuid": "ad4c35ca_3f7ec8f2",
      "range": {
        "startLine": 337,
        "startChar": 45,
        "endLine": 337,
        "endChar": 52
      },
      "revId": "76df8965bad2fe383ed89b200ecf0936de84893c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16da789a_70429a82",
        "filename": "src/Vulkan/VkPhysicalDevice.cpp",
        "patchSetId": 8
      },
      "lineNbr": 337,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-05T02:02:20Z",
      "side": 1,
      "message": "\u003e I think it should be advertised properly, as applications using SwiftShader need to know that SwiftShader isn\u0027t a way to test whether their synchronization code works, since it doesn\u0027t require any.\n\nIt\u0027s true that currently we wouldn\u0027t visually help detect when an application got the synchronization code wrong, but I don\u0027t think that should ever be expected. Also we can still decide later to effectively make it non-coherent. Note that OpenGL ES 3.2 doesn\u0027t demand coherency. I\u0027ve added some details to https://issuetracker.google.com/203652972#comment1.\n\nIt still appears that this will be a rarely used feature, so I\u0027d rather play it safe and keep the claimed features to a minimum until there\u0027s a demand for more. A comment could be added here to clarify that we currently do have coherency, but it\u0027s not required for OpenGL ES 3.2 translation.",
      "parentUuid": "8b535c9d_68817e31",
      "range": {
        "startLine": 337,
        "startChar": 45,
        "endLine": 337,
        "endChar": 52
      },
      "revId": "76df8965bad2fe383ed89b200ecf0936de84893c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64052ff8_6788e116",
        "filename": "src/Vulkan/VkPhysicalDevice.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1038,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-02T20:12:14Z",
      "side": 1,
      "message": "Some implementations set this to 1. We\u0027re not conceivably going to have problems supporting it on all attachments, right? I assume those other implementations might use an input attachment slot to do the operations in the shader and want to avoid running out of input attachments exposed to the application, or something like that.\n\nhttps://vulkan.gpuinfo.org/displayextensionproperty.php?extensionname\u003dVK_EXT_blend_operation_advanced\u0026extensionproperty\u003dadvancedBlendMaxColorAttachments\u0026platform\u003dall",
      "range": {
        "startLine": 1038,
        "startChar": 48,
        "endLine": 1038,
        "endChar": 69
      },
      "revId": "76df8965bad2fe383ed89b200ecf0936de84893c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "758de9cc_9465aa83",
        "filename": "src/Vulkan/VkPhysicalDevice.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1038,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-11-04T18:53:48Z",
      "side": 1,
      "message": "No, we don\u0027t have to do anything to support multiple attachments. In our implementation, there\u0027s no difference between how we treat advanced blend modes VS regular blend modes.",
      "parentUuid": "64052ff8_6788e116",
      "range": {
        "startLine": 1038,
        "startChar": 48,
        "endLine": 1038,
        "endChar": 69
      },
      "revId": "76df8965bad2fe383ed89b200ecf0936de84893c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10739b8b_5e35c4c1",
        "filename": "src/Vulkan/VkPhysicalDevice.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1038,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-05T02:02:20Z",
      "side": 1,
      "message": "Upon reading the OpenGL ES 3.2 spec, it clearly limits this to just 1 attachment, and I think we should follow suite so that the VVL can check that ANGLE behaves correctly on such implementations. A comment could be added here, in the commit message, or on b/203652972 to clarify that we could support multiple attachments.",
      "parentUuid": "758de9cc_9465aa83",
      "range": {
        "startLine": 1038,
        "startChar": 48,
        "endLine": 1038,
        "endChar": 69
      },
      "revId": "76df8965bad2fe383ed89b200ecf0936de84893c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f315c98_d90b585c",
        "filename": "src/Vulkan/libVulkan.cpp",
        "patchSetId": 8
      },
      "lineNbr": 374,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-02T20:12:14Z",
      "side": 1,
      "message": "nit: GL_KHR_",
      "range": {
        "startLine": 374,
        "startChar": 29,
        "endLine": 374,
        "endChar": 33
      },
      "revId": "76df8965bad2fe383ed89b200ecf0936de84893c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4347c722_32a555ad",
        "filename": "src/Vulkan/libVulkan.cpp",
        "patchSetId": 8
      },
      "lineNbr": 374,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-11-04T18:53:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f315c98_d90b585c",
      "range": {
        "startLine": 374,
        "startChar": 29,
        "endLine": 374,
        "endChar": 33
      },
      "revId": "76df8965bad2fe383ed89b200ecf0936de84893c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}