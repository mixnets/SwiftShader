{
  "comments": [
    {
      "key": {
        "uuid": "07f87ad1_63bd227f",
        "filename": "src/OpenGL/libGL/VertexDataManager.cpp",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-01-14T16:13:22Z",
      "side": 1,
      "message": "I think I changed this from UINT_MAX to -1 and back to UINT_MAX. I hope using ~0 settles it, although it\u0027s not immediately obvious that it\u0027s the largest possible unsigned value.",
      "range": {
        "startLine": 74,
        "startChar": 15,
        "endLine": 74,
        "endChar": 17
      },
      "revId": "b155dcbc4a70744d8d5f53274f71c12f58a53cd9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07f87ad1_83849ec8",
        "filename": "src/OpenGL/libGL/VertexDataManager.cpp",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 5050
      },
      "writtenOn": "2016-01-14T16:16:06Z",
      "side": 1,
      "message": "I think GL_INVALID_INDEX would also work (not necessarily using GL_INVALID_INDEX directly, but the 0xFFFFFFFFu value)",
      "parentUuid": "07f87ad1_63bd227f",
      "range": {
        "startLine": 74,
        "startChar": 15,
        "endLine": 74,
        "endChar": 17
      },
      "revId": "b155dcbc4a70744d8d5f53274f71c12f58a53cd9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07f87ad1_033f8eae",
        "filename": "src/OpenGL/libGL/VertexDataManager.cpp",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-01-14T18:20:12Z",
      "side": 1,
      "message": "Using GL_INVALID_INDEX is tempting, but those error enums have very specific semantics and are expected to be retrievable by glGetError() afterwards. Also, we\u0027re generating a real GL_OUT_OF_MEMORY in this case here, so that\u0027s even more confusing.\n\n0xFFFFFFFFu is a bit bug prone (how many F\u0027s)? \u003c/nit\u003e\n\nAnyway, ~0 is actually a signed integer, so we\u0027re back to the same warning generated by using -1...\n\nI think ~0u might work universally. I see it being used by LLVM.",
      "parentUuid": "07f87ad1_83849ec8",
      "range": {
        "startLine": 74,
        "startChar": 15,
        "endLine": 74,
        "endChar": 17
      },
      "revId": "b155dcbc4a70744d8d5f53274f71c12f58a53cd9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}