{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4658ee80_d07085b2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-10-14T08:33:14Z",
      "side": 1,
      "message": "Please rebase this to come after https://swiftshader-review.googlesource.com/c/SwiftShader/+/58148 so we can see which tests this fixes.\n\nI don\u0027t think this change is fixing things in the right place. The constructor and assignment operator were correct before. Re-setting the alpha just works around another bug, in an obscured way.\n\nI think we should also request dEQP\u0027s BC6h image sampling tests to be improved to also exercise use of the alpha channel.",
      "revId": "e18d819295529d6e62e6f5e083ba55f0d0981d09",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b205ed5d_b693f815",
        "filename": "src/Device/BC_Decoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 323,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-10-14T08:33:14Z",
      "side": 1,
      "message": "This is redundant. The C++ spec states that the default member initializer \"is used if the member is omitted from the member initializer list of a constructor.\"",
      "range": {
        "startLine": 323,
        "startChar": 8,
        "endLine": 323,
        "endChar": 21
      },
      "revId": "e18d819295529d6e62e6f5e083ba55f0d0981d09",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80008de6_bce5487e",
        "filename": "src/Device/BC_Decoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 323,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-10-14T13:44:46Z",
      "side": 1,
      "message": "Ack. Will remove.",
      "parentUuid": "b205ed5d_b693f815",
      "range": {
        "startLine": 323,
        "startChar": 8,
        "endLine": 323,
        "endChar": 21
      },
      "revId": "e18d819295529d6e62e6f5e083ba55f0d0981d09",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "265931cb_dee4108d",
        "filename": "src/Device/BC_Decoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 332,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-10-14T08:33:14Z",
      "side": 1,
      "message": "Unless we violate the constness somewhere, I don\u0027t see how this-\u003ea isn\u0027t already 1.0.",
      "range": {
        "startLine": 332,
        "startChar": 3,
        "endLine": 332,
        "endChar": 24
      },
      "revId": "e18d819295529d6e62e6f5e083ba55f0d0981d09",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "300fcd76_5b794607",
        "filename": "src/Device/BC_Decoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 332,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-10-14T13:44:46Z",
      "side": 1,
      "message": "See my comment below.",
      "parentUuid": "265931cb_dee4108d",
      "range": {
        "startLine": 332,
        "startChar": 3,
        "endLine": 332,
        "endChar": 24
      },
      "revId": "e18d819295529d6e62e6f5e083ba55f0d0981d09",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c88f0e70_cbd5601e",
        "filename": "src/Device/BC_Decoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1084,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-10-14T13:44:46Z",
      "side": 1,
      "message": "This does not call any constructor, it only casts the destination pointer to a Color pointer. The destination memory is not modified here.",
      "range": {
        "startLine": 1084,
        "startChar": 4,
        "endLine": 1084,
        "endChar": 74
      },
      "revId": "e18d819295529d6e62e6f5e083ba55f0d0981d09",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b49e9ff0_bccd7346",
        "filename": "src/Device/BC_Decoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1084,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-10-15T13:51:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c88f0e70_cbd5601e",
      "range": {
        "startLine": 1084,
        "startChar": 4,
        "endLine": 1084,
        "endChar": 74
      },
      "revId": "e18d819295529d6e62e6f5e083ba55f0d0981d09",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b721553_5e548a6e",
        "filename": "src/Device/BC_Decoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1085,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-10-14T13:44:46Z",
      "side": 1,
      "message": "This calls the assignment operator. If the assignment operator doesn\u0027t modify the alpha channel, it will stay unmodified.",
      "range": {
        "startLine": 1085,
        "startChar": 4,
        "endLine": 1085,
        "endChar": 17
      },
      "revId": "e18d819295529d6e62e6f5e083ba55f0d0981d09",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d20df5f_814c77e4",
        "filename": "src/Device/BC_Decoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1085,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-10-15T13:51:49Z",
      "side": 1,
      "message": "Yeah, this is the real bug. We can\u0027t treat *out as a valid Color because it was never constructed.\n\nThe proper fix is to use placement new here, and copy construct from `color`.",
      "parentUuid": "4b721553_5e548a6e",
      "range": {
        "startLine": 1085,
        "startChar": 4,
        "endLine": 1085,
        "endChar": 17
      },
      "revId": "e18d819295529d6e62e6f5e083ba55f0d0981d09",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e9e8132_49bfac65",
        "filename": "src/Device/BC_Decoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1085,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-10-15T14:55:55Z",
      "side": 1,
      "message": "While it\u0027s certainly possible, I disagree that this would be a proper solution, because Color is a union and unions don\u0027t call their inner members\u0027 default constructors, so using a placement new still hides a bug. IMHO, the current solution is safer.",
      "parentUuid": "3d20df5f_814c77e4",
      "range": {
        "startLine": 1085,
        "startChar": 4,
        "endLine": 1085,
        "endChar": 17
      },
      "revId": "e18d819295529d6e62e6f5e083ba55f0d0981d09",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32158aa3_1466a6db",
        "filename": "src/Device/BC_Decoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1085,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-10-15T18:25:11Z",
      "side": 1,
      "message": "I see. The union\u0027s default constructor can explicitly call a member\u0027s constructor though. Another solution would be to eliminate the need for it to be a union, which I think can be achieved by adding an operator[]\n\nSorry if I\u0027m sounding pedantic, but I think it\u0027s important that we can derive certain \"truths\" about a class just by looking at its definition. Placement new is the correct way to construct an instance in existing memory that preserves these truths. An assignment operator repeating what the constructor should have guaranteed is just a hack.",
      "parentUuid": "9e9e8132_49bfac65",
      "range": {
        "startLine": 1085,
        "startChar": 4,
        "endLine": 1085,
        "endChar": 17
      },
      "revId": "e18d819295529d6e62e6f5e083ba55f0d0981d09",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9aee302_dadd598c",
        "filename": "src/Device/BC_Decoder.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1085,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-10-15T18:41:30Z",
      "side": 1,
      "message": "I\u0027m sorry, but I think this is still incorrect.\nFor example, the Color copy constructor (line 353) is also currently broken, as it doesn\u0027t initialize the rgba member and then uses the operator\u003d from the RGBA struct to assign it, skipping the alpha initialization also here.\n\nIt feels like you\u0027re jumping through an awful lot of hoops to avoid simply treating this class as what it\u0027s supposed to be: a representation of a pixel. Everything less than that is error prone.\n\nSimply fixing the assignment operator of the RGBA struct fixes all potential issues and the rest of the code can stay clean. It is still my opinion that this is the best solution for this issue.",
      "parentUuid": "32158aa3_1466a6db",
      "range": {
        "startLine": 1085,
        "startChar": 4,
        "endLine": 1085,
        "endChar": 17
      },
      "revId": "e18d819295529d6e62e6f5e083ba55f0d0981d09",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}