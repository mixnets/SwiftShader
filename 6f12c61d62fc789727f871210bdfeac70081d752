{
  "comments": [
    {
      "key": {
        "uuid": "1395cf24_aeb36f52",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-09-11T15:52:50Z",
      "side": 1,
      "message": "What\u0027s the advantage of that? I\u0027ve always considered having to add the VK_LOADER_DATA magic value explicitly a bit of a flaw of the Queue class. I have a WIP patch to do the opposite of this: https://swiftshader-review.googlesource.com/c/SwiftShader/+/46370 (yes it break everything, haven\u0027t found the time yet to look more into this).",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 14,
        "endChar": 67
      },
      "revId": "6f12c61d62fc789727f871210bdfeac70081d752",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41ee2b22_4725e9a3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-09-11T16:35:16Z",
      "side": 1,
      "message": "For your cl, you probably just need to create DispatchableQueue objects in the Device constructor, but I\u0027m starting to think we should go the other way (the way this cl changes it). It\u0027s a bit weird right now in vk::destroy(), because we have an object that\u0027s a member of DispatchableObject, on which we call the destructor explicitly:\nhttps://cs.opensource.google/swiftshader/SwiftShader/+/master:src/Vulkan/VkDestroy.hpp;l\u003d61\nThat object no longer exists, and then we deallocate the DispatchableObject object:\nhttps://cs.opensource.google/swiftshader/SwiftShader/+/master:src/Vulkan/VkDestroy.hpp;l\u003d65\nI could be wrong, but I think it\u0027s undefined behavior to explicitly call the destructor of an object that wasn\u0027t itself created with an allocation, like a new, even if the parent object was created with an allocation.",
      "parentUuid": "1395cf24_aeb36f52",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 14,
        "endChar": 67
      },
      "revId": "6f12c61d62fc789727f871210bdfeac70081d752",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb069419_bf113a2e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-09-11T15:52:50Z",
      "side": 1,
      "message": "Note we actually want to work towards using flattening the command buffers, so we can send them over the wire for project Bunker. See also b/119409619",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 18,
        "endChar": 53
      },
      "revId": "6f12c61d62fc789727f871210bdfeac70081d752",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12e945f7_fd2ea352",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-09-11T16:35:16Z",
      "side": 1,
      "message": "I don\u0027t think this cl helps or hinders that.",
      "parentUuid": "bb069419_bf113a2e",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 18,
        "endChar": 53
      },
      "revId": "6f12c61d62fc789727f871210bdfeac70081d752",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f087a88_80f53875",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-09-11T15:52:50Z",
      "side": 1,
      "message": "It\u0027s not clear to me which of the above addresses this leak. Can you split it in two and point out the actual bugs in the commit messages?",
      "range": {
        "startLine": 20,
        "startChar": 5,
        "endLine": 20,
        "endChar": 21
      },
      "revId": "6f12c61d62fc789727f871210bdfeac70081d752",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15095a5f_fd845cee",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-09-11T16:35:16Z",
      "side": 1,
      "message": "Honest answer is I don\u0027t know if it fixes the leak. I don\u0027t have access to my Linux Workstation, so I\u0027m only trying to reduce the number of manual allocation/deallocations as much as possible to narrow down the issue.",
      "parentUuid": "7f087a88_80f53875",
      "range": {
        "startLine": 20,
        "startChar": 5,
        "endLine": 20,
        "endChar": 21
      },
      "revId": "6f12c61d62fc789727f871210bdfeac70081d752",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    }
  ]
}