{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "955c007a_60bb97de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 78381
      },
      "writtenOn": "2021-11-01T08:49:43Z",
      "side": 1,
      "message": "I have no access to those build logs.",
      "revId": "e34b3df8f0f3ab88d8cd29cc3358a6c5b3cd803f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1a8e7b1_6807a0b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-02T13:49:40Z",
      "side": 1,
      "message": "I triggered a new Kokoro test run and it passes now. Usually the NOT_BUILT result is caused by a timeout or other reason why it didn\u0027t run until the end.",
      "parentUuid": "955c007a_60bb97de",
      "revId": "e34b3df8f0f3ab88d8cd29cc3358a6c5b3cd803f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e50d2feb_f6ed9093",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-02T13:49:40Z",
      "side": 1,
      "message": "Thanks Ari, this looks good to me! Just one minor comment.\n\nAlexis, can you provide second Googler review?",
      "revId": "e34b3df8f0f3ab88d8cd29cc3358a6c5b3cd803f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24441a22_2247887c",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 5
      },
      "lineNbr": 207,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-02T13:49:40Z",
      "side": 1,
      "message": "Isn\u0027t this identical to the default case?",
      "range": {
        "startLine": 200,
        "startChar": 3,
        "endLine": 207,
        "endChar": 10
      },
      "revId": "e34b3df8f0f3ab88d8cd29cc3358a6c5b3cd803f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "542d49e0_908a3c8e",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 5
      },
      "lineNbr": 207,
      "author": {
        "id": 78381
      },
      "writtenOn": "2021-11-02T13:56:08Z",
      "side": 1,
      "message": "Since it did affect some tests I would say no. I can do some printing tomorrow to make sure.",
      "parentUuid": "24441a22_2247887c",
      "range": {
        "startLine": 200,
        "startChar": 3,
        "endLine": 207,
        "endChar": 10
      },
      "revId": "e34b3df8f0f3ab88d8cd29cc3358a6c5b3cd803f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdbaa86e_cf833b29",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 5
      },
      "lineNbr": 207,
      "author": {
        "id": 78381
      },
      "writtenOn": "2021-11-03T14:54:27Z",
      "side": 1,
      "message": "The difference is that the default case scales only the active components, but mine scales all. And using the default case breaks some of the CTS tests:\n\nTest case \u0027dEQP-VK.pipeline.sampler.border_swizzle.r16_unorm.rgba.opaque_white.gather_0.no_swizzle_hint\u0027..\n  Fail (Ref:(1, 1, 1, 1) Threshold:(0, 0, 0, 0) Color:(1, 65535, 65535, 65535) at vktPipelineSamplerBorderSwizzleTests.cpp:1059)\n  \n Reading the unused components should provide some default values (for example full alpha for formats without alpha channel), so maybe these values are now off?\n \n I\u0027m thinking of just replacing the current default case with the one I added for 16bit unorm formats.",
      "parentUuid": "542d49e0_908a3c8e",
      "range": {
        "startLine": 200,
        "startChar": 3,
        "endLine": 207,
        "endChar": 10
      },
      "revId": "e34b3df8f0f3ab88d8cd29cc3358a6c5b3cd803f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1c7dc15_42101bb8",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 5
      },
      "lineNbr": 207,
      "author": {
        "id": 78381
      },
      "writtenOn": "2021-11-03T14:58:00Z",
      "side": 1,
      "message": "Or more likely just making the for loop sized four to cover snorm correctly. I was also considering to remove the snorm case and let the default handle that too, but the default has no Max. But I fear the fault could also require that same Max if it\u0027s ever hit with a signed format.",
      "parentUuid": "cdbaa86e_cf833b29",
      "range": {
        "startLine": 200,
        "startChar": 3,
        "endLine": 207,
        "endChar": 10
      },
      "revId": "e34b3df8f0f3ab88d8cd29cc3358a6c5b3cd803f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a25b927_1dec6674",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 5
      },
      "lineNbr": 207,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-03T15:09:22Z",
      "side": 1,
      "message": "This code isn\u0027t meant to handle components that are not present in the format. The missing components are handled by the applySwizzle() calls below.\n\nSo there might be another bug somewhere. Can you have a look?",
      "parentUuid": "b1c7dc15_42101bb8",
      "range": {
        "startLine": 200,
        "startChar": 3,
        "endLine": 207,
        "endChar": 10
      },
      "revId": "e34b3df8f0f3ab88d8cd29cc3358a6c5b3cd803f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70489903_7da7f8e4",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 5
      },
      "lineNbr": 207,
      "author": {
        "id": 78381
      },
      "writtenOn": "2021-11-03T17:51:50Z",
      "side": 1,
      "message": "Sure, I\u0027ll have a look on Friday (I\u0027m off for Thursday)",
      "parentUuid": "9a25b927_1dec6674",
      "range": {
        "startLine": 200,
        "startChar": 3,
        "endLine": 207,
        "endChar": 10
      },
      "revId": "e34b3df8f0f3ab88d8cd29cc3358a6c5b3cd803f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "090c9f45_b916ea81",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 5
      },
      "lineNbr": 207,
      "author": {
        "id": 78381
      },
      "writtenOn": "2021-11-05T06:44:59Z",
      "side": 1,
      "message": "The failing case is using textureGather which in turn doesn\u0027t do the applySwizzle calls. The code only handles swizzle zero/one cases with a comment saying\n\n```\n// R/G/B/A swizzles affect the component collected from each texel earlier.\n// Handle the ZERO and ONE cases here because we don\u0027t need to know the format.\n```\n\nAdding the applySwizzle does fix the failing test, but I\u0027m not sure if we want this:\n\n```\nif(swizzle \u003d\u003d VK_COMPONENT_SWIZZLE_ZERO)\n{\n\tc.x \u003d c.y \u003d c.z \u003d c.w \u003d Float4(0);\n}\nelse if(swizzle \u003d\u003d VK_COMPONENT_SWIZZLE_ONE)\n{\n\tbool integer \u003d hasUnnormalizedIntegerTexture();\n\tc.x \u003d c.y \u003d c.z \u003d c.w \u003d integer ? As\u003cFloat4\u003e(Int4(1)) : RValue\u003cFloat4\u003e(Float4(1.0f));\n}\n// TODO Ari\nelse\n{\n\tconst Vector4f col \u003d c;\n\tbool integer \u003d hasUnnormalizedIntegerTexture();\n\tc.x \u003d applySwizzle(col, swizzle, integer);\n\tc.y \u003d applySwizzle(col, swizzle, integer);\n\tc.z \u003d applySwizzle(col, swizzle, integer);\n\tc.w \u003d applySwizzle(col, swizzle, integer);\n}\n```",
      "parentUuid": "70489903_7da7f8e4",
      "range": {
        "startLine": 200,
        "startChar": 3,
        "endLine": 207,
        "endChar": 10
      },
      "revId": "e34b3df8f0f3ab88d8cd29cc3358a6c5b3cd803f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb590bef_996ccc51",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 5
      },
      "lineNbr": 207,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-08T17:16:33Z",
      "side": 1,
      "message": "Ah, nice find! This normalization code doesn\u0027t take into account that gather operations produce four times the same component. I\u0027ve filed b/205576016\n\nThis is a separate bug that shouldn\u0027t block this border issue, so I suggest submitting this CL as-is (or with a TODO(b/205576016) comment).\n\nThanks Ari!",
      "parentUuid": "090c9f45_b916ea81",
      "range": {
        "startLine": 200,
        "startChar": 3,
        "endLine": 207,
        "endChar": 10
      },
      "revId": "e34b3df8f0f3ab88d8cd29cc3358a6c5b3cd803f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f4f886a_1a5331f0",
        "filename": "src/Vulkan/VkFormat.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2011,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-11-02T16:16:53Z",
      "side": 1,
      "message": "4?",
      "range": {
        "startLine": 2011,
        "startChar": 27,
        "endLine": 2011,
        "endChar": 28
      },
      "revId": "e34b3df8f0f3ab88d8cd29cc3358a6c5b3cd803f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9ecc435_4fc0ec84",
        "filename": "src/Vulkan/VkFormat.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2011,
      "author": {
        "id": 78381
      },
      "writtenOn": "2021-11-03T14:54:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f4f886a_1a5331f0",
      "range": {
        "startLine": 2011,
        "startChar": 27,
        "endLine": 2011,
        "endChar": 28
      },
      "revId": "e34b3df8f0f3ab88d8cd29cc3358a6c5b3cd803f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29add761_1fd9ee1b",
        "filename": "src/Vulkan/VkFormat.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2106,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-11-02T16:16:53Z",
      "side": 1,
      "message": "0?",
      "range": {
        "startLine": 2106,
        "startChar": 27,
        "endLine": 2106,
        "endChar": 28
      },
      "revId": "e34b3df8f0f3ab88d8cd29cc3358a6c5b3cd803f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4e58f04_d34e1e48",
        "filename": "src/Vulkan/VkFormat.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2106,
      "author": {
        "id": 78381
      },
      "writtenOn": "2021-11-03T14:54:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "29add761_1fd9ee1b",
      "range": {
        "startLine": 2106,
        "startChar": 27,
        "endLine": 2106,
        "endChar": 28
      },
      "revId": "e34b3df8f0f3ab88d8cd29cc3358a6c5b3cd803f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}