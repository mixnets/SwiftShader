{
  "comments": [
    {
      "key": {
        "uuid": "2e6d5d66_98c3ae79",
        "filename": "src/Device/Blitter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-06-22T17:26:43Z",
      "side": 1,
      "message": "I\u0027ve looked into whether we can replace the void* with a VkClearValue or other less bug prone structure, but it\u0027s non-trivial. There are three cases to deal with: color and depth/stencil image clears, and attachment image view clears. The generic code path of the Blitter treats clears as blitting from a 1x1 image, so it just wants that pointer to the pixel. If we have three clear() methods instead, the Blitter class\u0027s interface becomes a lot more specific for Vulkan\u0027s API, while still requiring obtaining a pointer to the pixel. It\u0027s no less bug prone.\n\nWe can still follow-up later if anyone has ideas.",
      "range": {
        "startLine": 157,
        "startChar": 24,
        "endLine": 157,
        "endChar": 40
      },
      "revId": "c715dcbf6eb7f059171b602b2093cab9e27d6957",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba35faa4_74508ac6",
        "filename": "src/Device/Blitter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 168,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-06-22T17:48:08Z",
      "side": 1,
      "message": "Is there any concern here about endianess wrt this struct? If the input data, clearValue, points to memory not in the exact same order as what the compiler produces for this union, it will be wrong. Technically, it\u0027s only safe if the same union was used to write and read the memory (or at least, two unions that are equivalent).",
      "revId": "c715dcbf6eb7f059171b602b2093cab9e27d6957",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "729bb7b2_a1d36b30",
        "filename": "src/Device/Blitter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 168,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-06-22T19:24:23Z",
      "side": 1,
      "message": "Indeed this wouldn\u0027t be endianness safe, but be only support little endian. ARM and Power also support LE now, so basically BE lost and I don\u0027t think we have to worry about it any more.",
      "parentUuid": "ba35faa4_74508ac6",
      "revId": "c715dcbf6eb7f059171b602b2093cab9e27d6957",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fe66896_a46bc533",
        "filename": "src/Device/Blitter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 168,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-06-22T19:43:01Z",
      "side": 1,
      "message": "ACK.",
      "parentUuid": "729bb7b2_a1d36b30",
      "revId": "c715dcbf6eb7f059171b602b2093cab9e27d6957",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}