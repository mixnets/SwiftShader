{
  "comments": [
    {
      "key": {
        "uuid": "22090ced_dd3f0079",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-02-26T17:26:38Z",
      "side": 1,
      "message": "I was thinking of calling these FloatN and IntN instead. That way it\u0027s still somewhat explicit that these are vectors of N elements. L for lane could be confused to mean a single-lane element (i.e. scalar Float and Int).",
      "range": {
        "startLine": 40,
        "startChar": 2,
        "endLine": 41,
        "endChar": 37
      },
      "revId": "bec227713cda80eada9c36a68f12e7818eb0d050",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f99178e7_9935358f",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-02-26T17:35:31Z",
      "side": 1,
      "message": "On the other hand, FloatN and IntN have nothing in their name to suggest it has anything to do with the number of lanes ;-)\nI\u0027ve worked on many codebases where FloatN is a vector template class that takes an int template parameter for N. If we had that, then: `using FloatL \u003d FloatN\u003cNumLanes\u003e`\n\nWill change if you feel strongly.",
      "parentUuid": "22090ced_dd3f0079",
      "range": {
        "startLine": 40,
        "startChar": 2,
        "endLine": 41,
        "endChar": 37
      },
      "revId": "bec227713cda80eada9c36a68f12e7818eb0d050",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c8f39e1_b02c42ae",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-02-27T07:07:17Z",
      "side": 1,
      "message": "Actually my plan for Reactor 2.0 is to have a SIMD::Float so that people can write methods in a namespace containing \"using SIMD;\" entirely as if it was scalar code (i.e. like a shader). SIMD::Float4 would then be a vector of N-wide SIMD vectors, the equivalent of vec4 in GLSL.\n\nSo I wouldn\u0027t mind replacing Float4 with SIMD::Float in these files (note, not SpirvShader::SIMD::Float).\n\nBarring that I do prefer FloatN over FloatL a fair bit. For now this implementation will deal explicitly with the vectorization of SPIR-V. So it shouldn\u0027t be hidden that it\u0027s really a vector as that would just cause confusion between FloatL and Float. In my opinion FloatL just doesn\u0027t clarify that it represents SIMD lanes. It reads like a random letter suffix to me, and the comment doesn\u0027t help much to stop it from looking weird, sorry.\n\nAnyway, what\u0027s your take on SIMD::Float?",
      "parentUuid": "f99178e7_9935358f",
      "range": {
        "startLine": 40,
        "startChar": 2,
        "endLine": 41,
        "endChar": 37
      },
      "revId": "bec227713cda80eada9c36a68f12e7818eb0d050",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9420b8fd_2ebb8a99",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-02-27T08:46:18Z",
      "side": 1,
      "message": "\u003e Anyway, what\u0027s your take on SIMD::Float?\n\nAssuming it complements and not replaces the existing vector types, I think this is good. However, I\u0027m not sure how you\u0027d mix both (SIMD vs SISD) without explicitly using fully qualified names (SIMD::Float vs SISD::Float), which does seem particularly verbose.\n\nI guess you could \u0027using SIMD\u0027 to default to SIMD, and be explicit about SISD types (or vice-versa), but I\u0027m not sure that works with your argument to clarify representation of SIMD lanes.\n\nGoing back to the original goals with this change:\n\nI feel a clear distinction here needs to be made between a:\n * Type that denotes per-lane scalars.\n * Type that denotes a non-per-lane vector.\n\nThe per-lane types should be readable (mostly) as if they were scalar, without the reader knowing or caring about the underlying number of lanes (vector width here is an implementation detail).\n\n  FloatL x, y, z;\n  return x + y * z;\n\nI read this ^ and my brain says: per shader invocation, x, y and z can be treated as a single scalar float.\n\nWhen I see Float4, my brain says: This is a 4-element wide vector and some cognitive work needs to be done to transform this to/from per-lane scalars.\nWhen I see FloatN, my brain says: This looks like an N-element wide vector, with no indication of vector width, nor anything to suggest that it represents per-lane data.\n\nFor that reason, I do not feel that FloatN is much better than Float4 in terms of distinction.\n\nIf the disagreement here is purely about the \u0027L\u0027 suffix, then maybe we can meet in the middle with a name we both agree on?\n\nLaneF? WarpF?\n\nI do like the idea of the SIMD namespace, but SIMD::Float is a whole lot of typing.\n\nAny other suggestions?",
      "parentUuid": "6c8f39e1_b02c42ae",
      "range": {
        "startLine": 40,
        "startChar": 2,
        "endLine": 41,
        "endChar": 37
      },
      "revId": "bec227713cda80eada9c36a68f12e7818eb0d050",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef68d769_834c7517",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-02-27T15:28:28Z",
      "side": 1,
      "message": "If we\u0027re bikeshedding the naming, I\u0027m still quite fond of PerLane\u003cFloat\u003e",
      "parentUuid": "9420b8fd_2ebb8a99",
      "range": {
        "startLine": 40,
        "startChar": 2,
        "endLine": 41,
        "endChar": 37
      },
      "revId": "bec227713cda80eada9c36a68f12e7818eb0d050",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    }
  ]
}