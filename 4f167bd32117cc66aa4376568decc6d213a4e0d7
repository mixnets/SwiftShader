{
  "comments": [
    {
      "key": {
        "uuid": "f8bfa169_12046e98",
        "filename": "src/Device/Color.hpp",
        "patchSetId": 10
      },
      "lineNbr": 23,
      "author": {
        "id": 6070
      },
      "writtenOn": "2019-12-12T08:14:57Z",
      "side": 1,
      "message": "I prefer no space here. My justification is that these can\u0027t exist separately, and thus they belong together. Conversely we put spaces around e.g. operators and after commas in argument lists because they separate expressions that could exist on their own. Also makes it consistent with e.g. Color\u003cshort\u003e and static_cast\u003cbyte\u003e also found in this file.",
      "range": {
        "startLine": 23,
        "startChar": 8,
        "endLine": 23,
        "endChar": 9
      },
      "revId": "4f167bd32117cc66aa4376568decc6d213a4e0d7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fbf148c_11b3480c",
        "filename": "src/Device/Color.hpp",
        "patchSetId": 10
      },
      "lineNbr": 23,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-12-12T09:31:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f8bfa169_12046e98",
      "range": {
        "startLine": 23,
        "startChar": 8,
        "endLine": 23,
        "endChar": 9
      },
      "revId": "4f167bd32117cc66aa4376568decc6d213a4e0d7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5a30447_211779cf",
        "filename": "src/Device/LRUCache.hpp",
        "patchSetId": 10
      },
      "lineNbr": 101,
      "author": {
        "id": 6070
      },
      "writtenOn": "2019-12-12T08:14:57Z",
      "side": 1,
      "message": "Took me a while to convince myself this is OK. Similarly I\u0027ve seen e.g \"(void *)\" and \"sizeof(int *)\" in several places. I would have previously omitted the space, when there\u0027s no variable name, just a type.\n\nFirst, for those who would suggest using \u0027PointerAlignment: Left\u0027 instead:\n\"int* a, b;\" is a pointer and an integer, not two pointers, so \"int *a, b;\" is more helpful. Likewise \"int*\u0026 a;\" can be misread as being a pointer to a reference, which doesn\u0027t exist, while \"int *\u0026a;\" encourages right-to-left reading to see this is a reference to a pointer. Also note \"int *(\u0026a);\" is the same thing while \"(int*)\u0026 a;\" doesn\u0027t parse. With \"const\" and function pointers added to the mix it becomes even more important to encourage right-to-left reading for correct interpretation, which \u0027PointerAlignment: Right\u0027 achieves better. Note \"int a[2];\" despite also having the array next the name instead of the type like \"int[2] a;\"\n\nThis works equally well when there\u0027s no variable name involved. \"new Key *;\" emphasizes that we\u0027re allocating memory for a pointer.",
      "range": {
        "startLine": 101,
        "startChar": 11,
        "endLine": 101,
        "endChar": 16
      },
      "revId": "4f167bd32117cc66aa4376568decc6d213a4e0d7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6727918_edfbc006",
        "filename": "src/Device/LRUCache.hpp",
        "patchSetId": 10
      },
      "lineNbr": 101,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-12-12T09:31:26Z",
      "side": 1,
      "message": "I assume there\u0027s nothing for me to do here?\n(I like to tick the \u0027Resolved\u0027 myself when commenting to indicate it is a non-actionable comment instead of a request-to-change).",
      "parentUuid": "c5a30447_211779cf",
      "range": {
        "startLine": 101,
        "startChar": 11,
        "endLine": 101,
        "endChar": 16
      },
      "revId": "4f167bd32117cc66aa4376568decc6d213a4e0d7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c24b719d_a70c6ae5",
        "filename": "src/Device/LRUCache.hpp",
        "patchSetId": 10
      },
      "lineNbr": 101,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-12-12T18:43:35Z",
      "side": 1,
      "message": "Sorry about that. 3am code review. ðŸ˜Š ðŸ˜­ ðŸ˜‚",
      "parentUuid": "b6727918_edfbc006",
      "range": {
        "startLine": 101,
        "startChar": 11,
        "endLine": 101,
        "endChar": 16
      },
      "revId": "4f167bd32117cc66aa4376568decc6d213a4e0d7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb460d27_96ee2310",
        "filename": "src/Reactor/Reactor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 3810,
      "author": {
        "id": 6070
      },
      "writtenOn": "2019-12-12T08:14:57Z",
      "side": 1,
      "message": "On my Linux workstation this becomes \"mantissa\u003e \u003e e\", which doesn\u0027t compile.\n\nWriting \"(mantissa \u003e\u003e e)\" ensures it\u0027s left alone (also doesn\u0027t alter the \"e \u003c 24\", as desired).",
      "range": {
        "startLine": 3810,
        "startChar": 20,
        "endLine": 3810,
        "endChar": 38
      },
      "revId": "4f167bd32117cc66aa4376568decc6d213a4e0d7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e1e88ca_3184ed34",
        "filename": "src/Reactor/Reactor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 3810,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-12-12T18:43:35Z",
      "side": 1,
      "message": "https://swiftshader-review.googlesource.com/c/SwiftShader/+/39428",
      "parentUuid": "eb460d27_96ee2310",
      "range": {
        "startLine": 3810,
        "startChar": 20,
        "endLine": 3810,
        "endChar": 38
      },
      "revId": "4f167bd32117cc66aa4376568decc6d213a4e0d7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bad26241_1981f175",
        "filename": "src/Vulkan/libVulkan.cpp",
        "patchSetId": 10
      },
      "lineNbr": 171,
      "author": {
        "id": 6070
      },
      "writtenOn": "2019-12-12T08:14:57Z",
      "side": 1,
      "message": "I think this shouldn\u0027t be indented, for the same reasons we no longer indent namespaces (laid out in https://swiftshader-review.googlesource.com/c/SwiftShader/+/39348).\n\nEssentially this is no different from applying extern \"C\" to each function individually.",
      "range": {
        "startLine": 171,
        "startChar": 0,
        "endLine": 171,
        "endChar": 1
      },
      "revId": "4f167bd32117cc66aa4376568decc6d213a4e0d7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ad2f237_0eed8fc9",
        "filename": "src/Vulkan/libVulkan.cpp",
        "patchSetId": 10
      },
      "lineNbr": 171,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-12-12T09:31:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bad26241_1981f175",
      "range": {
        "startLine": 171,
        "startChar": 0,
        "endLine": 171,
        "endChar": 1
      },
      "revId": "4f167bd32117cc66aa4376568decc6d213a4e0d7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e430c2bd_3acb7a11",
        "filename": "src/WSI/libX11.hpp",
        "patchSetId": 10
      },
      "lineNbr": 34,
      "author": {
        "id": 6070
      },
      "writtenOn": "2019-12-12T08:14:57Z",
      "side": 1,
      "message": "Not sure why this got split while all the others are not.",
      "range": {
        "startLine": 33,
        "startChar": 1,
        "endLine": 34,
        "endChar": 39
      },
      "revId": "4f167bd32117cc66aa4376568decc6d213a4e0d7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93090ea6_35b296fb",
        "filename": "src/WSI/libX11.hpp",
        "patchSetId": 10
      },
      "lineNbr": 34,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-12-12T10:42:22Z",
      "side": 1,
      "message": "It\u0027s because clang-format believe\u0027s this is a macro call. \u0027gc\u0027 or \u0027Gc\u0027 would make it format correctly.\nI\u0027ve tried to find ways around it, to no avail so far.",
      "parentUuid": "e430c2bd_3acb7a11",
      "range": {
        "startLine": 33,
        "startChar": 1,
        "endLine": 34,
        "endChar": 39
      },
      "revId": "4f167bd32117cc66aa4376568decc6d213a4e0d7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    }
  ]
}