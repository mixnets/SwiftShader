{
  "comments": [
    {
      "key": {
        "uuid": "030df99c_baa32dbf",
        "filename": "src/Pipeline/SpirvShaderSampling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-06-12T07:29:04Z",
      "side": 1,
      "message": "This lazy-creation should probably be on the device. While we\u0027re guaranteed that this will not be run concurrently right now (due to Reactor), this looks like a race waiting to happen.",
      "range": {
        "startLine": 87,
        "startChar": 1,
        "endLine": 92,
        "endChar": 2
      },
      "revId": "862db1dbaf0402afb59dec79b011608d8b6aa058",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d71aefc8_48b5739e",
        "filename": "src/Pipeline/SpirvShaderSampling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-06-12T15:35:03Z",
      "side": 1,
      "message": "Aren\u0027t we also guaranteed because of the mutex just above it?\nAlso, it feels a bit icky to transfer implementation details of the sampler to the Device, but I can do it.",
      "parentUuid": "030df99c_baa32dbf",
      "range": {
        "startLine": 87,
        "startChar": 1,
        "endLine": 92,
        "endChar": 2
      },
      "revId": "862db1dbaf0402afb59dec79b011608d8b6aa058",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97199449_e64fef51",
        "filename": "src/Pipeline/SpirvShaderSampling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-06-12T17:45:54Z",
      "side": 1,
      "message": "You have a getter and setter called [g,s]etSamplingRoutineCache() - it\u0027s already pretty sampler specific.\nAre there ever going to be any other places that use getSamplingRoutineCacheMutex(), getSamplingRoutineCache() or getSamplingRoutineCache()? If not, I don\u0027t see any value in having anything more than a single (lazily created, or precreated) cache fetch-or-create function.",
      "parentUuid": "d71aefc8_48b5739e",
      "range": {
        "startLine": 87,
        "startChar": 1,
        "endLine": 92,
        "endChar": 2
      },
      "revId": "862db1dbaf0402afb59dec79b011608d8b6aa058",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b5c336d_42337b5f",
        "filename": "src/Pipeline/SpirvShaderSampling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-06-12T07:29:04Z",
      "side": 1,
      "message": "not necessary for now, but again: this pattern of query, build, add on a shared entity is likely to bite us when Reactor finally loses its global mutex.\nHaving a query that takes a key and a function to build the entity is a simpler API to use, and can be made to only perform the build once, even if multiple threads request the same key.",
      "range": {
        "startLine": 94,
        "startChar": 31,
        "endLine": 94,
        "endChar": 36
      },
      "revId": "862db1dbaf0402afb59dec79b011608d8b6aa058",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc0497ec_c43ae7fa",
        "filename": "src/Pipeline/SpirvShaderSampling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-06-12T15:35:03Z",
      "side": 1,
      "message": "There\u0027s a mutex on line 86, which should be enough",
      "parentUuid": "3b5c336d_42337b5f",
      "range": {
        "startLine": 94,
        "startChar": 31,
        "endLine": 94,
        "endChar": 36
      },
      "revId": "862db1dbaf0402afb59dec79b011608d8b6aa058",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc88c038_e807a103",
        "filename": "src/Pipeline/SpirvShaderSampling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-06-12T17:45:54Z",
      "side": 1,
      "message": "Sorry I missed this on my commute in.\nMy argument still stands though. This feels like you\u0027re exposing the guts of a cache to an external class for no apparent gain.",
      "parentUuid": "fc0497ec_c43ae7fa",
      "range": {
        "startLine": 94,
        "startChar": 31,
        "endLine": 94,
        "endChar": 36
      },
      "revId": "862db1dbaf0402afb59dec79b011608d8b6aa058",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b904abb_8363dfca",
        "filename": "src/Vulkan/VkDevice.cpp",
        "patchSetId": 3
      },
      "lineNbr": 88,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-06-12T07:29:04Z",
      "side": 1,
      "message": "Deleting objects that were not created by this class is icky. There\u0027s a completely non-obvious transfer of ownership with setSamplingRoutineCache(). See my earlier comment about Device being responsible for lazily creating the cache.",
      "range": {
        "startLine": 88,
        "startChar": 8,
        "endLine": 88,
        "endChar": 28
      },
      "revId": "862db1dbaf0402afb59dec79b011608d8b6aa058",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "daae69f5_68e86a27",
        "filename": "src/Vulkan/VkDevice.cpp",
        "patchSetId": 3
      },
      "lineNbr": 88,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-06-12T15:35:03Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7b904abb_8363dfca",
      "range": {
        "startLine": 88,
        "startChar": 8,
        "endLine": 88,
        "endChar": 28
      },
      "revId": "862db1dbaf0402afb59dec79b011608d8b6aa058",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fad38b67_5fd73a3a",
        "filename": "src/Vulkan/VkDevice.hpp",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-06-12T07:29:04Z",
      "side": 1,
      "message": "Consider using std::unique_ptr\u003c\u003e",
      "range": {
        "startLine": 68,
        "startChar": 1,
        "endLine": 68,
        "endChar": 25
      },
      "revId": "862db1dbaf0402afb59dec79b011608d8b6aa058",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25b69bdb_5205e878",
        "filename": "src/Vulkan/VkDevice.hpp",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-06-12T15:35:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fad38b67_5fd73a3a",
      "range": {
        "startLine": 68,
        "startChar": 1,
        "endLine": 68,
        "endChar": 25
      },
      "revId": "862db1dbaf0402afb59dec79b011608d8b6aa058",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}