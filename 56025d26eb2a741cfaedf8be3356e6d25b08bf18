{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "afb2ffe8_6d6b98ea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-12-03T19:50:42Z",
      "side": 1,
      "message": "Getting some more eyes on this as it seems odd that these would require no further work. Decorating with a string probably doesn\u0027t alter semantics if it\u0027s only used for debug info? I\u0027m most suspicious about OpDecorateId, which might pass the tests \"by accident\" when treating it the same as OpDecorate.",
      "revId": "56025d26eb2a741cfaedf8be3356e6d25b08bf18",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f5bbee7_4d4463fd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5120
      },
      "writtenOn": "2020-12-03T21:06:14Z",
      "side": 1,
      "message": "For OpDecorateId, the parameters to the decorations should be interpreted as result \u003cid\u003es. For example,\n\nOpDecorateId %mainBuffer CounterBuffer %10\n\n%10 should be pointing to a result \u003cid\u003e. It should not be treated as a normal literal number (10) like if OpDecorate is used. So I think we cannot just treat OpDecorateId as OpDecorate.\n\nOpDecorateString is mainly for attaching string to a result \u003cid\u003e so that it cannot be removed freely. (Decorations are semantics impacting; debug information is not. Debug information can be freely removed but decorations cannot.) It was initially introduced so that we can make HLSL compilation easier (see the usage here: https://khr.io/hlsl2spirv#hlsl-semantic) and it\u0027s mainly for reflection. So I think it\u0027s fine to ignore it.",
      "parentUuid": "afb2ffe8_6d6b98ea",
      "revId": "56025d26eb2a741cfaedf8be3356e6d25b08bf18",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d73219f_dfe504c5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-12-04T05:03:03Z",
      "side": 1,
      "message": "Thanks Lei!\n\nSean, for OpDecorateId it looks like we can only encounter this for the UniformId decoration, which takes an \u003cid\u003e (versus the Uniform decoration which takes a literal). It provides information to perform potential optimizations, which we currently don\u0027t perform. It\u0027s safe to ignore. Hence why we\u0027re passing the test. That said, this instruction should really not be processed the same as OpDecorate. It needs its own implementation, which can currently consist of an assert that UniformId is the only decoration being applied, and a comment should be added that we don\u0027t optimize for uniform results yet.\n\nFor the string decorations, let\u0027s just add a comment we\u0027re assuming these are only used for HLSL semantics, which can be ignored, and add the link that Lei provided.\n\nI\u0027d also love to see https://cs.opensource.google/swiftshader/SwiftShader/+/master:src/Pipeline/SpirvShader.cpp;drc\u003d88e698a4f3e35f509ac80d9ffed8a4e0bbe3a85a;l\u003d115 and https://cs.opensource.google/swiftshader/SwiftShader/+/master:src/Pipeline/SpirvShader.cpp;drc\u003d88e698a4f3e35f509ac80d9ffed8a4e0bbe3a85a;l\u003d1391 check that we\u0027re only seeing expected decorations, and else trigger an UNSUPPORTED(). But that\u0027s an existing flaw so it can be done as a separate cleanup.",
      "parentUuid": "1f5bbee7_4d4463fd",
      "revId": "56025d26eb2a741cfaedf8be3356e6d25b08bf18",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ceeb0f5_8af0b116",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9035
      },
      "writtenOn": "2020-12-04T20:58:56Z",
      "side": 1,
      "message": "OpDecorateId is also used with CounterBuffer, which is a part of the HSLS functionality extension and likely ignorable.",
      "parentUuid": "7d73219f_dfe504c5",
      "revId": "56025d26eb2a741cfaedf8be3356e6d25b08bf18",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd70f437_74db2398",
        "filename": "src/Pipeline/SpirvShader.cpp",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-12-03T19:50:42Z",
      "side": 1,
      "message": "Weird how this used to require the SPV_GOOGLE_decorate_string extension (and VK_GOOGLE_decorate_string on the Vulkan side), which we don\u0027t implement, nor seem to be promoted for Vulkan 1.2, but it still got \"Incorporated\" into SPIR-V 1.4 and is tested for by dEQP.",
      "range": {
        "startLine": 97,
        "startChar": 13,
        "endLine": 97,
        "endChar": 29
      },
      "revId": "56025d26eb2a741cfaedf8be3356e6d25b08bf18",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}