{
  "comments": [
    {
      "key": {
        "uuid": "55595f08_017cd3be",
        "filename": "src/Pipeline/ComputeProgram.cpp",
        "patchSetId": 19
      },
      "lineNbr": 69,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-12-11T17:34:05Z",
      "side": 1,
      "message": "I think we need to be careful to avoid burdening the JIT with code that doesn\u0027t end up getting used. It\u0027s a slippery slope that can lead to death-by-a-thousand-cuts which is hard to recover from.\n\nCan we instead here just assign to routine-\u003enumWorkgroups instead of the local variable? That way it doesn\u0027t get emitted when unused. The value would be garbage but that seems acceptable to me and we can improve on that if deemed useful. Perhaps we could even have say Debug\u003cInt4\u003e which isn\u0027t shown in the debugger until a value gets assigned to it. Just brainstorming here, might be more confusing than helpful, but I think there\u0027s options worth exploring.\n\nShort term I\u0027m more concerned about setting the right example of not emitting code if it won\u0027t get used (for more than putting a value in the debugger). Can agree to have this landed as-is if we can go back to that shortly after.",
      "revId": "e2b32bd899c2d9e54ce265879c22b68b71b6767e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c4036b6_b1fcace5",
        "filename": "src/Pipeline/ComputeProgram.cpp",
        "patchSetId": 19
      },
      "lineNbr": 69,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-12-11T17:53:52Z",
      "side": 1,
      "message": "\u003e Can we instead here just assign to routine-\u003enumWorkgroups instead of the local variable? \n\nThe local being \u0027auto numWorkgroups\u0027 ? That will be an RValue\u003c\u003e, so I don\u0027t see any additional JIT gains with this suggestion (if that\u0027s really what you meant).\n\nYou\u0027re right in that I\u0027m bloating the amount of variables stored for displaying in the debugger view. I guess I could try and refactor setInputBuiltin() to store the value somewhere else iff there is a valid debug context.\nThe reason I didn\u0027t go with the approach from the start is that there are already a number of builtins being stored in the Routine, as there\u0027s more than just the debugger that needs to access some of these. Deciding whether a variable copy should be made is a fiddly thing to get right and has rules that\u0027ll inevitably change over time. This is the sort of thing that will only get noticed if the code path is tested, and seems really fragile.\n\nIn my opinion, this is the sort of thing that the underlying compiler should be optimizing away. LLVM will already strip unread variables. Subzero is really the problem.",
      "parentUuid": "55595f08_017cd3be",
      "revId": "e2b32bd899c2d9e54ce265879c22b68b71b6767e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "106ae2e1_8092a0e3",
        "filename": "src/Pipeline/ComputeProgram.cpp",
        "patchSetId": 19
      },
      "lineNbr": 69,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-12-11T22:03:12Z",
      "side": 1,
      "message": "\u003e The local being \u0027auto numWorkgroups\u0027 ? That will be an RValue\u003c\u003e, so I don\u0027t see any additional JIT gains with this suggestion (if that\u0027s really what you meant).\n\nSorry for the unclearness. My suggestion is to replace \u0027auto numWorkgroups\u0027 of line 59 in the original code with \u0027routine-\u003enumWorkgroups\u0027 (and likewise at line 63 use \u0027routine-\u003enumWorkgroups\u0027 and similar for the other builtins), and not have any of the load ops happening at lines 57-67 of Patchset 19.\n\nsetInputBuiltin() doesn\u0027t call the lambda if the builtin variable isn\u0027t used (or declared to be more precise), so that already achieves avoiding extra JIT overhead.\n\nThe downside is leaving the value of \u0027routine-\u003enumWorkgroups\u0027 uninitialized, but like I said, in my opinion that\u0027s an acceptable compromise for now and there\u0027s ways to improve on it later. In fact we can probably do something similar to the delayed materialization and track whether a variable has a value stored into it yet before displaying in the debugger?",
      "parentUuid": "2c4036b6_b1fcace5",
      "revId": "e2b32bd899c2d9e54ce265879c22b68b71b6767e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    }
  ]
}