{
  "comments": [
    {
      "key": {
        "uuid": "3fb73637_bfffc1c5",
        "filename": "CMakeLists.txt",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-04-15T16:34:14Z",
      "side": 1,
      "message": "Clang 4 is only two years old, so I think we should support it a tad longer.",
      "revId": "f5afb686717f32493fd8d9bebd5e5b1ffeb83b82",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d668d66_c2559304",
        "filename": "CMakeLists.txt",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-04-15T16:55:24Z",
      "side": 1,
      "message": "It is another build variant we\u0027ll have to support. Compiler warnings, flags, binary output... all likely subtly different.\n\nYou sure there\u0027s anything aside from your machine using this?\n\nI will try to support this if you feel strongly, but the fact I\u0027m having to change this line is only reenforcing the fact that there is a real cost to maintain this.",
      "parentUuid": "3fb73637_bfffc1c5",
      "revId": "f5afb686717f32493fd8d9bebd5e5b1ffeb83b82",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c72f4f79_34a44739",
        "filename": "CMakeLists.txt",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-04-15T17:11:52Z",
      "side": 1,
      "message": "My memory of this is very hazy, but Chrome builds on a variety of platforms (including older versions of Mac OS, which might be the one using Clang 4). Anyway, we could go ahead and try to land this as-is, and revert in case it causes any integration issue. Your call. O:-)",
      "parentUuid": "3d668d66_c2559304",
      "revId": "f5afb686717f32493fd8d9bebd5e5b1ffeb83b82",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14f74041_579c995d",
        "filename": "CMakeLists.txt",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-04-15T17:44:13Z",
      "side": 1,
      "message": "Chrome doesn\u0027t use this CMakeLists.txt file, right?\nStill, I see your point. If we reduced the number of builds we officially support to a sensible, finite set, we could document this and say \"consumers that build outside of this set are doing so on their own\" might be a viable approach to dealing with this permutation nightmare.",
      "parentUuid": "c72f4f79_34a44739",
      "revId": "f5afb686717f32493fd8d9bebd5e5b1ffeb83b82",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "957bc21b_f6d39116",
        "filename": "CMakeLists.txt",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-04-15T18:17:26Z",
      "side": 1,
      "message": "I\u0027m fairly certain I added this to the CMakeLists.txt to match some other build setup, not because it\u0027s used directly.\n\nWile desirable, I\u0027m not sure it\u0027s realistic to arrive at a sensible, finite set of supported build setups, at least for long. We\u0027re pretty much slaves to whatever is decided downstream. It evolves pretty fast. Also has external dependencies, e.g. Microsoft is pushing to build Chrome on ARM64, with their own ABI. So we just do a best effort. Anyway, coverage for all three desktop platforms, with both LLVM and Subzero backends, is an awesome start.",
      "parentUuid": "14f74041_579c995d",
      "revId": "f5afb686717f32493fd8d9bebd5e5b1ffeb83b82",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}