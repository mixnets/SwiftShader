{
  "comments": [
    {
      "key": {
        "uuid": "d80aa53a_7537f8d6",
        "filename": "src/Reactor/LLVMReactor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 6090,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-12-21T15:53:21Z",
      "side": 1,
      "message": "Can you duplicate this implementation into SubzeroReactor.cpp ?\n\nI have an open bug to move all common implementations to Reactor.cpp (http://crbug.com/swiftshader/21) but that\u0027s probably not worth the effort right now.",
      "range": {
        "startLine": 6089,
        "startChar": 1,
        "endLine": 6090,
        "endChar": 2
      },
      "revId": "afee5aa2acc43431544a81fa174312c99d27c284",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e162cfc_5a4a6292",
        "filename": "src/Reactor/LLVMReactor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 6090,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-12-21T19:25:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d80aa53a_7537f8d6",
      "range": {
        "startLine": 6089,
        "startChar": 1,
        "endLine": 6090,
        "endChar": 2
      },
      "revId": "afee5aa2acc43431544a81fa174312c99d27c284",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18cf61ba_fdd7bbe8",
        "filename": "src/Reactor/Reactor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 1930,
      "author": {
        "id": 5065
      },
      "writtenOn": "2018-12-21T12:34:33Z",
      "side": 1,
      "message": "Can we have an explanation of how this fits in reactor? Right now I don\u0027t understand how LLVM knows to treat read/writes between memory to halfs as 16bit reads and not 32.\n\nMaybe we could have helper functions that are called \"Float AsHalfFloat(Short)\" and vice versa?",
      "revId": "afee5aa2acc43431544a81fa174312c99d27c284",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df103b5d_9b33221e",
        "filename": "src/Reactor/Reactor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 1930,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-12-21T15:05:18Z",
      "side": 1,
      "message": "If you look at Half::getType(), you can see that it is treated as a 16 int type, same as the Short and UShort types.\nThe idea behind the Half class is that we\u0027ll have the opportunity to implement some functionality using actual 16FP intrinsics, when the hardware supports them, and treat it as a regular Reactor type, rather than exposing that the underlying representation uses a Short value, which may not always be true, again, depending on the hardware.\nCode that uses the Half type should already use it as a regular type, so that the integration works without any extra modifications to the code when we add the intrinsics.",
      "parentUuid": "18cf61ba_fdd7bbe8",
      "revId": "afee5aa2acc43431544a81fa174312c99d27c284",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55b04048_bfb6221c",
        "filename": "src/Reactor/Reactor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 1930,
      "author": {
        "id": 5065
      },
      "writtenOn": "2018-12-21T15:16:50Z",
      "side": 1,
      "message": "Mmmh this would involve writing all operators on Half with fallbacks to performing operations with Float when there are no instructions. K.",
      "parentUuid": "df103b5d_9b33221e",
      "revId": "afee5aa2acc43431544a81fa174312c99d27c284",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}