{
  "comments": [
    {
      "key": {
        "uuid": "4dd3cb92_e6544c0a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-12-07T15:52:06Z",
      "side": 1,
      "message": "Add tracker bug.",
      "revId": "0b91626c12dce30391dcfe39dfee18af942a1f2f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d0c3b57_fae864a1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 6982
      },
      "writtenOn": "2018-12-11T22:49:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4dd3cb92_e6544c0a",
      "revId": "0b91626c12dce30391dcfe39dfee18af942a1f2f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30cfa6c5_6134c459",
        "filename": "src/Pipeline/SpirvShader.cpp",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-12-07T15:52:06Z",
      "side": 1,
      "message": "Needs a definition at namespace scope in this source file. I suggest initializing it to 1 so that 0 can be identified as an invalid shader.",
      "range": {
        "startLine": 21,
        "startChar": 79,
        "endLine": 21,
        "endChar": 92
      },
      "revId": "0b91626c12dce30391dcfe39dfee18af942a1f2f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "992d3be3_86401662",
        "filename": "src/Pipeline/SpirvShader.cpp",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 6982
      },
      "writtenOn": "2018-12-11T22:49:56Z",
      "side": 1,
      "message": "Fixed.",
      "parentUuid": "30cfa6c5_6134c459",
      "range": {
        "startLine": 21,
        "startChar": 79,
        "endLine": 21,
        "endChar": 92
      },
      "revId": "0b91626c12dce30391dcfe39dfee18af942a1f2f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aee0da7b_f1fefc70",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-12-07T15:52:06Z",
      "side": 1,
      "message": "style nit: We use tabs instead of spaces, for indentation.",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 4
      },
      "revId": "0b91626c12dce30391dcfe39dfee18af942a1f2f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31c59cdb_40aae840",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 6982
      },
      "writtenOn": "2018-12-27T22:15:09Z",
      "side": 1,
      "message": "Fixed throughout.",
      "parentUuid": "aee0da7b_f1fefc70",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 4
      },
      "revId": "0b91626c12dce30391dcfe39dfee18af942a1f2f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6f77af2_187f2630",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-12-07T15:52:06Z",
      "side": 1,
      "message": "nit: I think \"inst\" is a more common abbreviation of instruction. See e.g. llvm-7.0/llvm/lib/Transforms/InstCombine and subzero/src/IceInst.cpp",
      "range": {
        "startLine": 33,
        "startChar": 14,
        "endLine": 33,
        "endChar": 18
      },
      "revId": "0b91626c12dce30391dcfe39dfee18af942a1f2f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17258e81_fe75f1aa",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 6982
      },
      "writtenOn": "2018-12-11T22:49:56Z",
      "side": 1,
      "message": "My gcc might be showing. If you feel strongly about this, I will change it everywhere...",
      "parentUuid": "a6f77af2_187f2630",
      "range": {
        "startLine": 33,
        "startChar": 14,
        "endLine": 33,
        "endChar": 18
      },
      "revId": "0b91626c12dce30391dcfe39dfee18af942a1f2f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd4b1cfa_bf22c716",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 6982
      },
      "writtenOn": "2018-12-27T22:15:09Z",
      "side": 1,
      "message": "I would actually prefer to leave this. I know it\u0027s not the llvm convention, but there\u0027s potential confusion with `inst` and this is also widespread enough in the new code that it\u0027s a bit of a nightmare to fix throughout the stack of patches.",
      "parentUuid": "17258e81_fe75f1aa",
      "range": {
        "startLine": 33,
        "startChar": 14,
        "endLine": 33,
        "endChar": 18
      },
      "revId": "0b91626c12dce30391dcfe39dfee18af942a1f2f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31b5e3cd_0c0c6474",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-01-02T06:40:57Z",
      "side": 1,
      "message": "What\u0027s the potential confusion with \u0027inst\u0027 you mention? Note that SPIR-V itself also has an OpExtInst instruction. So \u0027insn\u0027 seems to be highly GCC specific. In fact http://gcc.gnu.org/onlinedocs/gcc-4.5.2/gccint/Insns.html defines it as its own type of object and not as an abbreviation of \u0027instruction\u0027 (but some insns represent instructions). Whereas in the SPIR-V spec there\u0027s no mention of insn and instead after the first few words \"all remaining words are a linear sequence of instructions\".\n\nSorry about the nitpickery, but I feel it\u0027s important not to have it confused with the GCC object and just use the common abbreviation of instruction.\n\nUnderstood that this would be a pain to replace in the current patch stack. Feel free to change it in a follow-up patch.",
      "parentUuid": "cd4b1cfa_bf22c716",
      "range": {
        "startLine": 33,
        "startChar": 14,
        "endLine": 33,
        "endChar": 18
      },
      "revId": "0b91626c12dce30391dcfe39dfee18af942a1f2f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53198f0f_c74c9f7b",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-12-07T15:52:06Z",
      "side": 1,
      "message": "nit: This seems a bit overly qualitative and potentially derogatory. If all we need it for is range-based-for, then this code is **perfect**.\n\nI suggest simply replacing it with a factual \"supports range-badsed-for\".",
      "range": {
        "startLine": 36,
        "startChar": 52,
        "endLine": 36,
        "endChar": 70
      },
      "revId": "0b91626c12dce30391dcfe39dfee18af942a1f2f",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    }
  ]
}