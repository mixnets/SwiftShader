{
  "comments": [
    {
      "key": {
        "uuid": "83f00073_5775855d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-01-09T06:00:57Z",
      "side": 1,
      "message": "Just curious: is there any intention to supersede this extension with something HLL agnostic? At a super quick glance the current extension spec isn\u0027t very OpenCL specific (in fact \"OpenCL\" only mentioned 6 times and not in the opcode specifications).",
      "range": {
        "startLine": 10,
        "startChar": 25,
        "endLine": 10,
        "endChar": 41
      },
      "revId": "b36dbbe00965e83c9cc0c9ae819ebc4cc8df149e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab4e6653_0bd8982d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 7183
      },
      "writtenOn": "2020-01-09T13:33:26Z",
      "side": 1,
      "message": "The TL;DR is yes, we all agree that this extension should fit more than OpenCL. There\u0027s internal docs I can point you at which do deep dives on this spec and how it fits with HLSL / GLSL.\nFor now, I\u0027d recommend ignoring the name of this spec. If we need a new one, it\u0027ll likely be _very_ close to this one.",
      "parentUuid": "83f00073_5775855d",
      "range": {
        "startLine": 10,
        "startChar": 25,
        "endLine": 10,
        "endChar": 41
      },
      "revId": "b36dbbe00965e83c9cc0c9ae819ebc4cc8df149e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2560ff6e_6d533944",
        "filename": "src/Pipeline/SpirvShader.cpp",
        "patchSetId": 3
      },
      "lineNbr": 424,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-01-09T06:00:57Z",
      "side": 1,
      "message": "nit: Can\u0027t the list be pulled out to make this loop easier to parse?",
      "range": {
        "startLine": 422,
        "startChar": 8,
        "endLine": 424,
        "endChar": 9
      },
      "revId": "b36dbbe00965e83c9cc0c9ae819ebc4cc8df149e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18f74969_f00dcece",
        "filename": "src/Pipeline/SpirvShader.cpp",
        "patchSetId": 3
      },
      "lineNbr": 424,
      "author": {
        "id": 7183
      },
      "writtenOn": "2020-01-09T13:33:26Z",
      "side": 1,
      "message": "I personally don\u0027t find this hard to parse, but that might just be because this is an extremely common go pattern (examples: https://github.com/golang/go/wiki/TableDrivenTests).\nI can move it just above the loop construct if you like. I\u0027d rather not move it further away, like to say the top of the file, as there\u0027s already way too much going on in this file (despite my continuing efforts to properly extract stuff out of here) and it\u0027ll just fragment logic.",
      "parentUuid": "2560ff6e_6d533944",
      "range": {
        "startLine": 422,
        "startChar": 8,
        "endLine": 424,
        "endChar": 9
      },
      "revId": "b36dbbe00965e83c9cc0c9ae819ebc4cc8df149e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33460ba7_7dbba871",
        "filename": "src/Pipeline/SpirvShader.cpp",
        "patchSetId": 3
      },
      "lineNbr": 424,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-01-09T15:40:33Z",
      "side": 1,
      "message": "That\u0027s perfect. It\u0027s just the combination of a slightly non-trivial data declaration and a flow control construct that tripped me up for a second. That Go example also separates them, but I agree keeping them close is a good idea in most cases.\n\nuber-nit: This might be my distrust of STL implementations talking (fuelled by some bad experiences), but assuming this list is going to remain limited to a handful, I would have personally just written this using if-else statements. The std::initializer_list\u003c\u003e spec raises some questions about what the overhead in terms of execution time, binary size, and compilation time are exactly. I know this is just a tiny section of code and executed rarely, but death by a thousand cuts and KISS principle and all that.",
      "parentUuid": "18f74969_f00dcece",
      "range": {
        "startLine": 422,
        "startChar": 8,
        "endLine": 424,
        "endChar": 9
      },
      "revId": "b36dbbe00965e83c9cc0c9ae819ebc4cc8df149e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}