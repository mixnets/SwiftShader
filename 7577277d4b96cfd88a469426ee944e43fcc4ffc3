{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8e43a61a_526d8305",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-09-02T13:20:50Z",
      "side": 1,
      "message": "I\u0027m not sure there\u0027s much value in implementing that level of granularity at this point. If I understand correctly Chrome only has a use for pipelines which either have full robustness or no robustness enabled. I just want to make sure we\u0027re not adding unnecessary complexity.\n\nEven from the point of view of providing run-time detection of undefined behavior I think we have bigger fish to fry in the short term, for features that are known to be in use at Google.",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 13,
        "endChar": 13
      },
      "revId": "7577277d4b96cfd88a469426ee944e43fcc4ffc3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9ad23d2_c93ebb7c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 46365
      },
      "writtenOn": "2022-09-03T02:00:26Z",
      "side": 1,
      "message": "Ok I won\u0027t spend time on that. FWIW, I don\u0027t believe it\u0027ll be a major change either, just one bool becomes three, and you pick and choose the right one when making decisions.\n\nAdjusted the commit description.",
      "parentUuid": "8e43a61a_526d8305",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 13,
        "endChar": 13
      },
      "revId": "7577277d4b96cfd88a469426ee944e43fcc4ffc3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fab19b1c_6d8c8f7c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-09-02T13:20:50Z",
      "side": 1,
      "message": "Add the line \"Tests: dEQP-VK.robustness.pipeline_robustness*\" to have Regres run these additional tests.",
      "revId": "7577277d4b96cfd88a469426ee944e43fcc4ffc3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c923967_1c8628e9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 46365
      },
      "writtenOn": "2022-09-03T02:00:26Z",
      "side": 1,
      "message": "Done. Turns out tests for this extension were never merged to main, so this will have to wait until that\u0027s done.",
      "parentUuid": "fab19b1c_6d8c8f7c",
      "revId": "7577277d4b96cfd88a469426ee944e43fcc4ffc3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db971f6f_37aeca2e",
        "filename": "src/Vulkan/VkPhysicalDevice.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1355,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-09-02T13:20:50Z",
      "side": 1,
      "message": "Please add \"// TODO(b/162327166): Only provide robustness when requested.\"",
      "revId": "7577277d4b96cfd88a469426ee944e43fcc4ffc3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91c0dfe0_72c16bea",
        "filename": "src/Vulkan/VkPhysicalDevice.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1355,
      "author": {
        "id": 46365
      },
      "writtenOn": "2022-09-03T02:00:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "db971f6f_37aeca2e",
      "revId": "7577277d4b96cfd88a469426ee944e43fcc4ffc3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b98b4837_9a221525",
        "filename": "src/Vulkan/VkPipeline.cpp",
        "patchSetId": 2
      },
      "lineNbr": 281,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-09-02T13:20:50Z",
      "side": 1,
      "message": "[[fallthrough]];",
      "range": {
        "startLine": 281,
        "startChar": 63,
        "endLine": 281,
        "endChar": 64
      },
      "revId": "7577277d4b96cfd88a469426ee944e43fcc4ffc3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44bacebc_7092783d",
        "filename": "src/Vulkan/VkPipeline.cpp",
        "patchSetId": 2
      },
      "lineNbr": 281,
      "author": {
        "id": 46365
      },
      "writtenOn": "2022-09-03T02:00:26Z",
      "side": 1,
      "message": "Is this a new style? fallthrough is only used elsewhere in SwiftShader when there\u0027s code before the fallthrough.",
      "parentUuid": "b98b4837_9a221525",
      "range": {
        "startLine": 281,
        "startChar": 63,
        "endLine": 281,
        "endChar": 64
      },
      "revId": "7577277d4b96cfd88a469426ee944e43fcc4ffc3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}