{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0d287ad4_611495bb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5050
      },
      "writtenOn": "2022-03-08T18:37:29Z",
      "side": 1,
      "message": "I\u0027m not sure what\u0027s gained through the use of a template argument here. Why not just use \"Precision precision\" instead of \"bool relaxedPrecision\" in all those functions? That would pave the way for a potentially faster lowp implementation, which we don\u0027t have now and would remove the boolean argument which reduces readability everywhere.",
      "revId": "0c5c7d457c8fa25043e616ca9ce679ba8d8f552d",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a3855f6_b59d64ea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-03-08T19:49:04Z",
      "side": 1,
      "message": "I want to avoid passing it as an argument when it\u0027s not variable. I think `Sqrt(x, Mediump)` looks worse than `Sqrt\u003cMediump\u003e(x)` since it looks as if it takes two operands. Template arguments are for providing a specialization at compile time. Usually for a type, but in this case a precision and I think subjectively it works well.\n\nVulkan doesn\u0027t have `lowp`, and GLSL 4.6 makes it clear that both the `mediump` and `lowp` qualifiers map to SPIR-V\u0027s `RelaxedPrecision` decoration. We naturally store this attribute as a Boolean, and the syntax `Sqrt(x, d.RelaxedPrecision)` is clear and reasonably concise. We\u0027d have to use `Sqrt(x, d.RelaxedPrecision ? Precision::Relaxed : Precision::Highp)` or add complexity elsewhere to deal with what is ultimately still just a Boolean.\n\nIf/when we need lower precision variants we should avoid entangling them with these SPIR-V shader specific functions (similarly the Reactor math functions no longer have anything to do with these ones: b/169755552). Arguably these templated function uses could also be specialized (and I\u0027ve added comments to them for this reason), but I\u0027m sure some GPU implementations use shaders for this advanced blend operation and gamma correction, so it works both ways.\n\nIt\u0027s possible there\u0027s room for improvement, but I still think this is a step foward which enabled the next CL which allows us to pass the RelaxedPrecision decoration everywhere we have a use for it. We could revisit this when the dust settles.",
      "parentUuid": "0d287ad4_611495bb",
      "revId": "0c5c7d457c8fa25043e616ca9ce679ba8d8f552d",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c5474ae_40c8d488",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5050
      },
      "writtenOn": "2022-03-08T21:23:39Z",
      "side": 1,
      "message": "What I\u0027m wondering is:\nWill you ever need Sqrt\u003cHighp\u003e(x) in the codebase ?\nIf not, we could just have:\n\ninline RValue\u003cFloat4\u003e SqrtMediump(RValue\u003cFloat4\u003e x) { return Sqrt(x, false); }\ninline RValue\u003cFloat4\u003e PowMediump(RValue\u003cFloat4\u003e x, RValue\u003cFloat4\u003e y) { return Pow(x, y, false); }\n\nand that would be it. I don\u0027t see what Sqrt\u003cMediump\u003e() adds over SqrtMediump(), unless you plan to call template functions within template functions to propagate the precision, but that doesn\u0027t seem like the goal here.",
      "parentUuid": "4a3855f6_b59d64ea",
      "revId": "0c5c7d457c8fa25043e616ca9ce679ba8d8f552d",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dfc98753_44044ebb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-03-08T22:03:35Z",
      "side": 1,
      "message": "\u003e Will you ever need Sqrt\u003cHighp\u003e(x) in the codebase ?\n\nYes: https://swiftshader-review.googlesource.com/c/SwiftShader/+/63688/7/src/Pipeline/ShaderCore.cpp#245\n\n\u003e I don\u0027t see what Sqrt\u003cMediump\u003e() adds over SqrtMediump()\n\nIt\u0027s just syntactic sugar to improve readability. `SqrtMediump()` is harder to read as a variant of `Sqrt()` in my opinion, and could make one wonder if it\u0027s a whole different function altogether (like `RcpSqrt()`).",
      "parentUuid": "6c5474ae_40c8d488",
      "revId": "0c5c7d457c8fa25043e616ca9ce679ba8d8f552d",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d1b46f4_33806c4c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5050
      },
      "writtenOn": "2022-03-08T22:10:05Z",
      "side": 1,
      "message": "Meh, ok, at this point, no reason to hold this CL, these are just style preferences.",
      "parentUuid": "dfc98753_44044ebb",
      "revId": "0c5c7d457c8fa25043e616ca9ce679ba8d8f552d",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ],
  "submitRequirementResults": []
}