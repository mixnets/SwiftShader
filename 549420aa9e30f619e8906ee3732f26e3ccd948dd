{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "58441b23_6773ff83",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-04-27T14:11:48Z",
      "side": 1,
      "message": "pools?",
      "range": {
        "startLine": 7,
        "startChar": 41,
        "endLine": 7,
        "endChar": 45
      },
      "revId": "549420aa9e30f619e8906ee3732f26e3ccd948dd",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d31c515f_d67d3675",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-04-27T14:11:48Z",
      "side": 1,
      "message": "Thanks Ari for taking this on! I\u0027m curious why a zero size leads to an invalid pointer being passed to free(). It seems like there could be another issue here that needs addressing.",
      "revId": "549420aa9e30f619e8906ee3732f26e3ccd948dd",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cab226bc_f3080ee1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 78381
      },
      "writtenOn": "2022-04-27T14:39:36Z",
      "side": 1,
      "message": "\u003e Thanks Ari for taking this on! I\u0027m curious why a zero size leads to an invalid pointer being passed to free(). It seems like there could be another issue here that needs addressing.\n\nI think free is getting proper pointer, but the guards are overwritten. In fact my debugger says the heap is corrupted. There was 64 byte buffer being allocated and then a DescriptorSet object was being allocated from that memory:\n\n```pDescriptorSets[i] \u003d *(new(memory) DescriptorSet())```\n\nHowever sizeof(DescriptorSet) is 80, because it includes the placeholder for data:\n\n```\n\tDescriptorSetHeader header;\n\talignas(16) uint8_t data[1];\n```\n\nNormally the descriptor data gets written at the start of \u0027data\u0027 and the allocation takes the descriptor data size into account, but with no descriptors the one byte sized data[1] is what gets written past the allocated size.",
      "parentUuid": "d31c515f_d67d3675",
      "revId": "549420aa9e30f619e8906ee3732f26e3ccd948dd",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dafe775c_2191ed76",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-04-27T15:49:35Z",
      "side": 1,
      "message": "Ah, thanks, so the real issue is the existence of this `data[1]` member, which makes it invalid to do placement new using memory which only has room for the `DescriptorSetHeader`.\n\nIt could be addressed by making the memory allocation larger (like this change), or by getting rid of this `data` member. It looks like it\u0027s only used in a handful of places, and most of them could be replaced by having a method which returns a pointer which points at the byte right past the `DescriptorSet`.\n\nI think I prefer the latter since there would be no wasted memory, no edge case handling in the allocation logic, and no remnant of the `data[]` member which could cause other issues.",
      "parentUuid": "cab226bc_f3080ee1",
      "revId": "549420aa9e30f619e8906ee3732f26e3ccd948dd",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15acf7c7_bdae9d56",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 78381
      },
      "writtenOn": "2022-04-28T04:51:05Z",
      "side": 1,
      "message": "\u003e I think I prefer the latter since there would be no wasted memory, no edge case handling in the allocation logic, and no remnant of the `data[]` member which could cause other issues.\n\nI agree. Let me try fixing the issue using that approach.",
      "parentUuid": "dafe775c_2191ed76",
      "revId": "549420aa9e30f619e8906ee3732f26e3ccd948dd",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b9a5924_bde1aa7a",
        "filename": "src/Vulkan/VkDescriptorPool.cpp",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 5050
      },
      "writtenOn": "2022-04-27T12:25:12Z",
      "side": 1,
      "message": "This is illegal according to the spec:\n\n  VUID-VkDescriptorPoolCreateInfo-poolSizeCount-arraylength\n  poolSizeCount must be greater than 0\n\nIf this is happening in a test, this is a test bug.",
      "range": {
        "startLine": 66,
        "startChar": 1,
        "endLine": 66,
        "endChar": 36
      },
      "revId": "549420aa9e30f619e8906ee3732f26e3ccd948dd",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cca827af_bacd6b66",
        "filename": "src/Vulkan/VkDescriptorPool.cpp",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 5050
      },
      "writtenOn": "2022-04-27T12:28:47Z",
      "side": 1,
      "message": "Oh, this is in an upcoming \"spec fix\"\nhttps://gitlab.khronos.org/vulkan/vulkan/-/merge_requests/5144",
      "parentUuid": "0b9a5924_bde1aa7a",
      "range": {
        "startLine": 66,
        "startChar": 1,
        "endLine": 66,
        "endChar": 36
      },
      "revId": "549420aa9e30f619e8906ee3732f26e3ccd948dd",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ae0a691_79c509bc",
        "filename": "src/Vulkan/VkDescriptorPool.cpp",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 5050
      },
      "writtenOn": "2022-04-27T12:33:19Z",
      "side": 1,
      "message": "Shouldn\u0027t this be something like:\n\n  sw::align(pCreateInfo-\u003emaxSets, 16)\n\n?",
      "range": {
        "startLine": 67,
        "startChar": 10,
        "endLine": 67,
        "endChar": 12
      },
      "revId": "549420aa9e30f619e8906ee3732f26e3ccd948dd",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}