{
  "comments": [
    {
      "key": {
        "uuid": "2549be14_c44de86b",
        "filename": "src/Reactor/SubzeroReactor.cpp",
        "patchSetId": 4
      },
      "lineNbr": 271,
      "author": {
        "id": 7183
      },
      "writtenOn": "2020-03-11T12:30:04Z",
      "side": 1,
      "message": "getOrCreateScheduler()? It\u0027s then clear that there\u0027s lazy initialization?",
      "range": {
        "startLine": 271,
        "startChar": 17,
        "endLine": 271,
        "endChar": 30
      },
      "revId": "d71e52f531bbcaf7a548adb3fa33def1a4c552b9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "faa7633b_93fc58c9",
        "filename": "src/Reactor/SubzeroReactor.cpp",
        "patchSetId": 4
      },
      "lineNbr": 271,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-03-13T16:37:23Z",
      "side": 1,
      "message": "The fact that it creates one lazily is a detail that doesn\u0027t need to be known, so I prefer to just make this a getter.",
      "parentUuid": "2549be14_c44de86b",
      "range": {
        "startLine": 271,
        "startChar": 17,
        "endLine": 271,
        "endChar": 30
      },
      "revId": "d71e52f531bbcaf7a548adb3fa33def1a4c552b9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3159c1c0_c3042b13",
        "filename": "src/Reactor/SubzeroReactor.cpp",
        "patchSetId": 4
      },
      "lineNbr": 271,
      "author": {
        "id": 7183
      },
      "writtenOn": "2020-03-13T16:41:54Z",
      "side": 1,
      "message": "humm, there\u0027s quite a precedence already for the term getOrCreate:\n\n  23 occurrences in swiftshader, 842 if including third_party.",
      "parentUuid": "faa7633b_93fc58c9",
      "range": {
        "startLine": 271,
        "startChar": 17,
        "endLine": 271,
        "endChar": 30
      },
      "revId": "d71e52f531bbcaf7a548adb3fa33def1a4c552b9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce85536e_0d8436bd",
        "filename": "src/Reactor/SubzeroReactor.cpp",
        "patchSetId": 4
      },
      "lineNbr": 280,
      "author": {
        "id": 7183
      },
      "writtenOn": "2020-03-11T12:30:04Z",
      "side": 1,
      "message": "Could be replaced with:\n\n  static auto scheduler \u003d []{\n      scheduler \u003d std::make_unique\u003cmarl::Scheduler\u003e();\n      scheduler-\u003esetWorkerThreadCount(8);\n      return scheduler;\n  }();\n\nThen you don\u0027t need the mutex.",
      "range": {
        "startLine": 273,
        "startChar": 1,
        "endLine": 280,
        "endChar": 2
      },
      "revId": "d71e52f531bbcaf7a548adb3fa33def1a4c552b9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a5f83ea_9733c3c3",
        "filename": "src/Reactor/SubzeroReactor.cpp",
        "patchSetId": 4
      },
      "lineNbr": 280,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-03-13T16:37:23Z",
      "side": 1,
      "message": "Done. Thank you, this is what I had wanted to do. Needed to create a local scheduler (I named it \u0027s\u0027) in the lambda body, but yes, this is perfect since C++11 guarantees atomic static init.",
      "parentUuid": "ce85536e_0d8436bd",
      "range": {
        "startLine": 273,
        "startChar": 1,
        "endLine": 280,
        "endChar": 2
      },
      "revId": "d71e52f531bbcaf7a548adb3fa33def1a4c552b9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}