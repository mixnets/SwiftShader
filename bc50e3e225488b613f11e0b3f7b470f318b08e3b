{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d7f16d80_2369caff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 9035
      },
      "writtenOn": "2021-10-15T13:35:32Z",
      "side": 1,
      "message": "Nice find",
      "revId": "bc50e3e225488b613f11e0b3f7b470f318b08e3b",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9df6f414_86ac4c7c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-10-18T16:16:09Z",
      "side": 1,
      "message": "+2 because it\u0027s a definite step forward, but I still think there\u0027s room for improvement:",
      "revId": "bc50e3e225488b613f11e0b3f7b470f318b08e3b",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb52b2a2_16898107",
        "filename": "src/Device/BC_Decoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 317,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-10-15T15:44:48Z",
      "side": 1,
      "message": "Also note: having a const member here while the other union member, \"channel\", isn\u0027t const in the same memory location is very error prone, so removing this const makes it less error prone. In general, I don\u0027t think union members should have const fields.",
      "range": {
        "startLine": 317,
        "startChar": 2,
        "endLine": 317,
        "endChar": 26
      },
      "revId": "bc50e3e225488b613f11e0b3f7b470f318b08e3b",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25b4e161_5c91ab06",
        "filename": "src/Device/BC_Decoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 317,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-10-15T18:25:11Z",
      "side": 1,
      "message": "It\u0027s definitely bug prone, but just to play devil\u0027s advocate, it can also be a perfectly reasonable way to allow modifying a const variable\u0027s value. const, unlike constexpr, does not mean the value can\u0027t change, it just means it\u0027s a compilation error to try to assign a new value through this variable. const_cast\u003c\u003e and mutable are other ways to const doesn\u0027t mean unmodifiable. Obviously each such use requires great care.\n\nWith that said, it may seem sensible to remove the const to make it clear this variable can change, and that actually does make the assignment operator\u0027s re-assignment of this component look much more reasonable. But the thing is, this component isn\u0027t intended to be changeable. In fact its only purpose in this code is due to the fact that we\u0027re decoding BC6h, which is a 3-component format, into 4-component half-float.\n\nSo there\u0027s a totally different solution available as well: remove `a` from Color, and make it `uint16_t *out`, assigning r/g/b from Color individually, and each fourth element halfFloat1. That\u0027s probably more elegant than the placement new approach.",
      "parentUuid": "fb52b2a2_16898107",
      "range": {
        "startLine": 317,
        "startChar": 2,
        "endLine": 317,
        "endChar": 26
      },
      "revId": "bc50e3e225488b613f11e0b3f7b470f318b08e3b",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92fc8bca_4ba4cc53",
        "filename": "src/Device/BC_Decoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 317,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-10-15T18:41:30Z",
      "side": 1,
      "message": "This would mean that we can no longer cast a pixel of the output as a Color. To be completely honest, this sounds much less elegant than the current code.",
      "parentUuid": "25b4e161_5c91ab06",
      "range": {
        "startLine": 317,
        "startChar": 2,
        "endLine": 317,
        "endChar": 26
      },
      "revId": "bc50e3e225488b613f11e0b3f7b470f318b08e3b",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d84a002_fc46349e",
        "filename": "src/Device/BC_Decoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 317,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-10-18T16:16:09Z",
      "side": 1,
      "message": "\u003e This would mean that we can no longer cast a pixel of the output as a Color.\n\nPrecisely. It is invalid to cast a pointer to uninitialized memory, to be a pointer to a class which has a constructor. One has to call placement new to do that in a well-defined manner. Even if we argue that the default constructor leaves things uninitialized, it\u0027s not trivial to spot that to be the case, and I think it\u0027s bad practice to have some constructors initialize things while another doesn\u0027t. The other problem is that in Patchset 5 the assignment operator or RGBA overwrites the alpha component. That would lead to bugs if this class was intended to represent a generic 4-component half-float color. Currently this class is a bit of a mixed bag that happens to work for our usage patterns.\n\nIdeally either all constructors initialize the fields, and we use placement new, or none of the constructors perform initialization and we explicitly assign each component. I\u0027m leaning towards the latter because RGBf also doesn\u0027t initialize, and it becomes much clearer that we\u0027re setting the alpha channel of the decoded image to 1.0h instead of involving two assignment operators, one of which performs an unexpected overwrite.",
      "parentUuid": "92fc8bca_4ba4cc53",
      "range": {
        "startLine": 317,
        "startChar": 2,
        "endLine": 317,
        "endChar": 26
      },
      "revId": "bc50e3e225488b613f11e0b3f7b470f318b08e3b",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a00a1d9_1bdffe6a",
        "filename": "src/Device/BC_Decoder.cpp",
        "patchSetId": 5
      },
      "lineNbr": 317,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-10-18T19:39:19Z",
      "side": 1,
      "message": "Right, there are ways to improve this code, but unless more modes are added to BC6H, which I think is unlikely, then we\u0027re unlikely to have to revisit this code, so I don\u0027t know how much value a refactor would have. If this ever were to become a  4-component half-float color, for example, then I would hope all constructors and assignment operators would have to be modified to take that into account, but, as I mentioned, I think this is taking into account something that we\u0027re unlikely to ever have to do.",
      "parentUuid": "9d84a002_fc46349e",
      "range": {
        "startLine": 317,
        "startChar": 2,
        "endLine": 317,
        "endChar": 26
      },
      "revId": "bc50e3e225488b613f11e0b3f7b470f318b08e3b",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}