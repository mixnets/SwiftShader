{
  "comments": [
    {
      "key": {
        "uuid": "5dc8fad5_4cef9b07",
        "filename": "src/Vulkan/VkPipeline.hpp",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 5065
      },
      "writtenOn": "2018-11-15T17:13:14Z",
      "side": 1,
      "message": "I don\u0027t think that\u0027s ever needed because it\u0027s the application\u0027s responsibility to use the correct bind point for pipelines.",
      "revId": "a85d343b634296fed35e41405ace1857fd4952c7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b653dbd5_ba22939b",
        "filename": "src/Vulkan/VkPipeline.hpp",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-11-15T17:45:55Z",
      "side": 1,
      "message": "Oh, this is just here because I don\u0027t plan on making other functions virtual, so this will allow us to know if we cast this to GraphicsPipeline or to ComputePipeline later on and then we\u0027ll use those objects directly.",
      "parentUuid": "5dc8fad5_4cef9b07",
      "revId": "a85d343b634296fed35e41405ace1857fd4952c7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "784f7e42_aefed71c",
        "filename": "src/Vulkan/VkPipeline.hpp",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 5065
      },
      "writtenOn": "2018-11-15T17:48:10Z",
      "side": 1,
      "message": "Sorry I didn\u0027t give enough details: the only other place pipelines are used are inside command buffer, and at that point the application explicitly tells you which bind point it goes to, so you don\u0027t really need to query this information from the object.",
      "parentUuid": "b653dbd5_ba22939b",
      "revId": "a85d343b634296fed35e41405ace1857fd4952c7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfff0c93_daab902c",
        "filename": "src/Vulkan/VkPipeline.hpp",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-11-15T18:08:53Z",
      "side": 1,
      "message": "I was also thinking of having a debug assert when a pipeline is bound to make sure that it\u0027s of the correct type. I know Vulkan doesn\u0027t require any validation here, so would you recommend just not verifying this at all and removing the function?",
      "parentUuid": "784f7e42_aefed71c",
      "revId": "a85d343b634296fed35e41405ace1857fd4952c7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fef89333_bb93047f",
        "filename": "src/Vulkan/VkPipeline.hpp",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 5065
      },
      "writtenOn": "2018-11-15T18:37:57Z",
      "side": 1,
      "message": "In general I wouldn\u0027t verify anything that\u0027s not valid usage of the API because it is more code in swiftshader that will never be used if applications are tested with validation layers. That said we already had precedent in previous code reviews of keeping some data for debugging while we bring up swiftshader (and I hope it will be simplified in the future). Either way is fine, your call :)",
      "parentUuid": "bfff0c93_daab902c",
      "revId": "a85d343b634296fed35e41405ace1857fd4952c7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1fc9851c_d7022379",
        "filename": "src/Vulkan/VkPipeline.hpp",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-11-15T21:28:49Z",
      "side": 1,
      "message": "I have no strong opinion on the matter, I\u0027ll let Nicolas decide.",
      "parentUuid": "fef89333_bb93047f",
      "revId": "a85d343b634296fed35e41405ace1857fd4952c7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c3f0821_8ef23c43",
        "filename": "src/Vulkan/VkPipeline.hpp",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-11-15T22:27:26Z",
      "side": 1,
      "message": "I think having some data/functionality for sanity checking purposes is valuable. See b/118401597#3 for starters. Despite the existence of validation layers, there can be application code paths that aren\u0027t exercised unless they\u0027re running on SwiftShader. For example say they\u0027ve never encountered an implementation that doesn\u0027t have a separate queue for compute, and they\u0027re basing their bind point on the queue type, thus sending their compute shader to the graphics queue with a graphics bind point. Of course such a bug would also be caught by re-running the application on SwiftShader with validation layers enabled, but the bug reports we\u0027ll get may not show any indication that it might be an application bug so we could be looking in the wrong places for a long time. Also, setting up the validation layers on each of the platforms that SwiftShader could be used on seems like a huge hassle. Bugs may also only reproduce under specific situations where it\u0027s hard to get the validation layer information precisely when and where we need it. Granted, it\u0027s very unlikely that we\u0027ll run into this particular case, but I do encourage making it a habit to do some validation when it\u0027s easy to write, so that bugs are unlikely to slip through the cracks. It also helps ensure to rule out certain causes of issues, without having to double-check that the validation layer checked for it.\n\nThat said, this should definitely go in an #ifndef NDEBUG block to both avoid the run-time cost and prevent unjustified use of it in release code.",
      "parentUuid": "1fc9851c_d7022379",
      "revId": "a85d343b634296fed35e41405ace1857fd4952c7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "415ab194_d610b7a9",
        "filename": "src/Vulkan/VkPipeline.hpp",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-11-16T13:23:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c3f0821_8ef23c43",
      "revId": "a85d343b634296fed35e41405ace1857fd4952c7",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}