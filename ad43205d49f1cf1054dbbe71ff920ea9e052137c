{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "16a39743_38269d38",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-04-12T18:41:25Z",
      "side": 1,
      "message": "Just some nits to make the code more readable",
      "revId": "ad43205d49f1cf1054dbbe71ff920ea9e052137c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da2ac0c3_cecd4ec5",
        "filename": "src/Pipeline/PixelRoutine.cpp",
        "patchSetId": 8
      },
      "lineNbr": 620,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-04-12T18:41:25Z",
      "side": 1,
      "message": "Nit: why not use the constructor directly, like so:\nFloat4 minDepthBound(state.minDepthBounds);\nFloat4 maxDepthBound(state.maxDepthBounds);",
      "range": {
        "startLine": 619,
        "startChar": 0,
        "endLine": 620,
        "endChar": 53
      },
      "revId": "ad43205d49f1cf1054dbbe71ff920ea9e052137c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e18d93c_95ab3931",
        "filename": "src/Pipeline/PixelRoutine.cpp",
        "patchSetId": 8
      },
      "lineNbr": 626,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-04-12T18:41:25Z",
      "side": 1,
      "message": "Nit: you might be able to reduce the number of conversions by doing:\n\nInt2 z;\nz \u003d Insert(z, *Pointer\u003cInt\u003e(buffer), 0);\nz \u003d Insert(z, *Pointer\u003cInt\u003e(buffer + pitch), 1);\n\nFloat4 zValue \u003d convertFloat32(As\u003cShort4\u003e(z));",
      "range": {
        "startLine": 622,
        "startChar": 0,
        "endLine": 626,
        "endChar": 35
      },
      "revId": "ad43205d49f1cf1054dbbe71ff920ea9e052137c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88f95e57_f92ab09d",
        "filename": "src/Pipeline/PixelRoutine.cpp",
        "patchSetId": 8
      },
      "lineNbr": 636,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-04-12T18:41:25Z",
      "side": 1,
      "message": "Nit: This code is the same in both functions, so it could be extracted.\n\nThe code in PixelRoutine::depthBoundsTest() below could be:\n\nif(state.depthBoundsTestActive)\n{\n\tInt4 zTest \u003d (state.depthFormat \u003d\u003d VK_FORMAT_D16_UNORM) ?\n\t             depthBoundsTest16(zBuffer, q, x) :\n\t             depthBoundsTest32F(zBuffer, q, x);\n\n\tif(!state.depthTestActive)\n\t{\n\t\tcMask \u0026\u003d zMask \u0026 SignMask(zTest);\n\t}\n\telse\n\t{\n\t\tzMask \u0026\u003d cMask \u0026 SignMask(zTest);\n\t}\n}",
      "range": {
        "startLine": 629,
        "startChar": 0,
        "endLine": 636,
        "endChar": 2
      },
      "revId": "ad43205d49f1cf1054dbbe71ff920ea9e052137c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2a0429a_73bcd404",
        "filename": "src/Pipeline/PixelRoutine.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2863,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-04-12T18:41:25Z",
      "side": 1,
      "message": "Nit: This is probably already optimized by the compiler, but we\u0027d usually write:\nreturn Float4(cf) * Float4(1.0f / 65536.0f);",
      "range": {
        "startLine": 2863,
        "startChar": 19,
        "endLine": 2863,
        "endChar": 38
      },
      "revId": "ad43205d49f1cf1054dbbe71ff920ea9e052137c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdf525a5_9cca44cd",
        "filename": "src/Pipeline/PixelRoutine.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2863,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-04-12T18:57:29Z",
      "side": 1,
      "message": "Note that in general the compiler will not replace divisions by constants with a multiplication by the reciprocal, because of rounding differences. In the case of a power-of-two value though, there\u0027s no loss of precision.\n\nHowever, I believe in this case 0xFFFF represents 1.0, so this should not use 65536? Also, 16-bit depth values are unsigned?",
      "parentUuid": "d2a0429a_73bcd404",
      "range": {
        "startLine": 2863,
        "startChar": 19,
        "endLine": 2863,
        "endChar": 38
      },
      "revId": "ad43205d49f1cf1054dbbe71ff920ea9e052137c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}