{
  "comments": [
    {
      "key": {
        "uuid": "121cde6d_a13d7a7d",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 4
      },
      "lineNbr": 171,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-07-11T08:57:26Z",
      "side": 1,
      "message": "nit: I\u0027m not these the function names really make sense any more - it seems illogical for isInBounds() to return true for an OOB pointer.\n\nI\u0027m not great at naming things, but how about? \n\n  isInBounds() -\u003e accessMask()\n  isStaticAllInBounds() -\u003e needsAccessMasking()",
      "range": {
        "startLine": 171,
        "startChar": 15,
        "endLine": 171,
        "endChar": 34
      },
      "revId": "93c38ab7f41a1d3e1352cf639020e6723c453faa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27772b37_b6f197f6",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 4
      },
      "lineNbr": 171,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-07-11T20:26:28Z",
      "side": 1,
      "message": "The spec states that when the robustBufferAccess is disabled, \"applications *must* not perform out of bounds accesses\". Therefore we know these accesses to be in bounds. They could be OOB if the application made a mistake, but we\u0027re allowed to ignore that possibility to enable these optimizations. So isInBounds() still makes sense.\n\nI\u0027ll rename to isStaticAllInBounds() to isStaticallyInBounds(), to make the subtle distinction that the limit isn\u0027t necessarily static but we know through static analysis (and the app\u0027s provided guarantees) that the access must be in bounds.",
      "parentUuid": "121cde6d_a13d7a7d",
      "range": {
        "startLine": 171,
        "startChar": 15,
        "endLine": 171,
        "endChar": 34
      },
      "tag": "autogenerated:gerrit:newWipPatchSet",
      "revId": "93c38ab7f41a1d3e1352cf639020e6723c453faa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ae446ef_bfa42918",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 4
      },
      "lineNbr": 184,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-07-11T08:57:26Z",
      "side": 1,
      "message": "Given that all bets are off with OutOfBoundsBehavior::UndefinedBehavior, why doesn\u0027t this function *always* return true if robust \u003d\u003d OutOfBoundsBehavior::UndefinedBehavior?",
      "range": {
        "startLine": 184,
        "startChar": 11,
        "endLine": 184,
        "endChar": 49
      },
      "revId": "93c38ab7f41a1d3e1352cf639020e6723c453faa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4eb9052e_64a7dbfd",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 4
      },
      "lineNbr": 184,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-07-11T20:26:28Z",
      "side": 1,
      "message": "When the app disables robustBufferAccess it only has to guarantee that accesses in active SIMD lanes are within bounds. We need the offsets to be equal or sequential to know they\u0027ll also be in bounds for the inactive ones.",
      "parentUuid": "3ae446ef_bfa42918",
      "range": {
        "startLine": 184,
        "startChar": 11,
        "endLine": 184,
        "endChar": 49
      },
      "tag": "autogenerated:gerrit:newWipPatchSet",
      "revId": "93c38ab7f41a1d3e1352cf639020e6723c453faa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e595041_055c3432",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 4
      },
      "lineNbr": 279,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-07-11T08:57:26Z",
      "side": 1,
      "message": "Good spot on the line above. This comment is equally broken.\n\n  // True if any dynamicOffsets are non-zero.",
      "range": {
        "startLine": 279,
        "startChar": 38,
        "endLine": 279,
        "endChar": 65
      },
      "revId": "93c38ab7f41a1d3e1352cf639020e6723c453faa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ab3ce4c_b6203c31",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 4
      },
      "lineNbr": 279,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-07-11T20:26:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e595041_055c3432",
      "range": {
        "startLine": 279,
        "startChar": 38,
        "endLine": 279,
        "endChar": 65
      },
      "tag": "autogenerated:gerrit:newWipPatchSet",
      "revId": "93c38ab7f41a1d3e1352cf639020e6723c453faa",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}