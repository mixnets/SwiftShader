{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "601b846d_220d3483",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-02-09T20:15:08Z",
      "side": 1,
      "message": "The code looks good but I\u0027m still worried about those Regres \u0027Test duration changes\u0027. Those tests don\u0027t seem like they should become 2x - 3x slower due to implementing this extension (I\u0027m assuming they don\u0027t use it).\n\nCould you check the number of Reactor routines that get generated, before and after this patch, for these tests? Might require a Release build if there\u0027s UB somewhere...",
      "revId": "83f2d570fd704a930145435fffd93ddd87cf1083",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45720afc_4d64c80c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5050
      },
      "writtenOn": "2022-02-09T20:34:05Z",
      "side": 1,
      "message": "Isn\u0027t this just a result of running these in a random order?\nThe global Regres stats of that run were:\nPass: 252158 -\u003e 261777 (+9619 +3%)\nTime taken: 41m53.663742452s -\u003e 42m28.86075432s (+1%)\nIt doesn\u0027t seem to me like the extra 35 seconds is unreasonable given the extra 9k+ rendering tests being run. Also, it doesn\u0027t look like these changes affect the runtime of any of the existing tests here:\nhttps://swiftshader-review.googlesource.com/c/SwiftShader/+/62188/3#message-92cb5e6051042fe21333731bff2435d0aad8c5c4",
      "parentUuid": "601b846d_220d3483",
      "revId": "83f2d570fd704a930145435fffd93ddd87cf1083",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4628559b_c7cd7154",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-02-10T14:44:32Z",
      "side": 1,
      "message": "I used https://swiftshader-review.googlesource.com/c/SwiftShader/+/62688 to check the timings when not running any new tests. Looks good!\n\nIt\u0027s still a bit weird though. On the P920 the timings have been very reliable and steady (only a couple of the \"many_draws\" tests have a bit of variability, which is not unexpected). Also note e.g. https://swiftshader-review.googlesource.com/c/SwiftShader/+/58549 passes 7705 new tests without affecting the timings of individual tests. Of course total time for both that CL and this one goes up a bit, I\u0027m not worried about that part.\n\nI\u0027m not sure if the change in test order explains it. Each test runs in a different process, so they don\u0027t affect each other\u0027s routine caches or things like that. They only affect each other in ways that should cause far less than a 4x difference we\u0027re seeing in the latest test run.\n\nSo please check if e.g. dEQP-VK.memory_model.write_after_read.ext.u32.coherent.atomic_atomic.atomicwrite.subgroup.payload_local.buffer.guard_local.image.vert has the same number of Reactor routines generated before and after this CL. If that\u0027s the case then I\u0027m out of theories and will +2 it, and hope this is just a transitory effect.",
      "parentUuid": "45720afc_4d64c80c",
      "revId": "83f2d570fd704a930145435fffd93ddd87cf1083",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a2ed5d1_faa6afac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5050
      },
      "writtenOn": "2022-02-10T15:34:25Z",
      "side": 1,
      "message": "Both before and after this change, in VK.memory_model.write_after_read.ext.u32.coherent.atomic_atomic.atomicwrite.subgroup.payload_local.buffer.guard_local.image.vert, a single SpirvBinary is generated, and its content both pre-op and post-op is identical before and after this change.\n\nIn both cases rr::Routine::Routine() is called 4 times.\n\nAll the changes here would affect values used by rendering before the binaries are generated, so I\u0027m not sure how this change could influence that, especially if the new functions are not used by older tests.\n\nMy guess would be that adding 9k+ tests, most of which contain draw calls, might end up creating more threads than the system can do in parallel at once, increasing CPU pressure and time for tests which also require multi-threading to produce a result.",
      "parentUuid": "4628559b_c7cd7154",
      "revId": "83f2d570fd704a930145435fffd93ddd87cf1083",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}