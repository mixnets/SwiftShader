{
  "comments": [
    {
      "key": {
        "uuid": "d38f3990_b4dc2a1a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-08-21T15:21:14Z",
      "side": 1,
      "message": "CCing Geoff and Jamie. I\u0027ll apply the same fix to ANGLE once we all agree on it.",
      "revId": "f60f4147038bf39544d992a8528d89d2fa022e52",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f8a4f64_f856ace4",
        "filename": "src/System/Half.hpp",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-08-21T15:47:57Z",
      "side": 1,
      "message": "Let\u0027s not treat this as a denorm case, it\u0027s making the expression quite hard to read. Instead we can compare float32Val against the value known to always round to zero (i.e. before line 199 add another comparison).",
      "range": {
        "startLine": 208,
        "startChar": 17,
        "endLine": 208,
        "endChar": 39
      },
      "revId": "f60f4147038bf39544d992a8528d89d2fa022e52",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ed7943e_8838d2af",
        "filename": "src/System/Half.hpp",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-08-21T18:06:31Z",
      "side": 1,
      "message": "I tried to add a check before, as suggested, but I find it less obvious/straightforward as a return to 0 here, so I\u0027m proposing that instead.",
      "parentUuid": "2f8a4f64_f856ace4",
      "range": {
        "startLine": 208,
        "startChar": 17,
        "endLine": 208,
        "endChar": 39
      },
      "revId": "f60f4147038bf39544d992a8528d89d2fa022e52",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61185a02_bcb5ef1e",
        "filename": "src/System/Half.hpp",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-08-25T14:15:59Z",
      "side": 1,
      "message": "I\u0027m not sure I understand your argument, considering it would just be an \"if(float32Val \u003c `smallest-representable-denorm-value`) { return 0; }\". Quite clear and straightforward in my opinion.\n\nIf you meant it\u0027s less obvious as the most direct fix for the UB, then yes, I agree. But at its core this isn\u0027t just about avoiding UB. We can return any value to satisfy UBSan. The current patch does not explain why it has to be 0. Without knowing the history of this code, and the fact that most implementations will produce 0 when shifting by more than 32, it\u0027s not easy to tell what this code really accomplishes.\n\nThe root issue is treating these underflow cases the same as denormals, which accidentally works(*) if shifting by more than 32 is well-defined. Treating it as a separate case arguably makes it clearer and leaves no room for UB.\n\nHowever, to address the minor concern about having a more direct fix for the UB which mimics the behavior we\u0027ve been expecting, we could land this iff it\u0027s followed by a change to treat the underflow case separately.\n\n(*) I\u0027m really not sure it\u0027s entirely correct. There could ideally be a need for rounding values up or down at another cutoff then when `shift` hits 32. Anyway, all of this seems somewhat poorly defined by the spec. See b/147900455",
      "parentUuid": "1ed7943e_8838d2af",
      "range": {
        "startLine": 208,
        "startChar": 17,
        "endLine": 208,
        "endChar": 39
      },
      "revId": "f60f4147038bf39544d992a8528d89d2fa022e52",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01e42d69_58a64990",
        "filename": "src/System/Half.hpp",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-08-25T14:58:28Z",
      "side": 1,
      "message": "I\u0027ll write the alternate fix when I have a second and we can compare and choose which one you prefer.",
      "parentUuid": "61185a02_bcb5ef1e",
      "range": {
        "startLine": 208,
        "startChar": 17,
        "endLine": 208,
        "endChar": 39
      },
      "revId": "f60f4147038bf39544d992a8528d89d2fa022e52",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c47a8dd7_7e99a290",
        "filename": "src/System/Half.hpp",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-08-31T21:26:33Z",
      "side": 1,
      "message": "I hadn\u0027t realized that the encompassing if statement was already checking (float32Val \u003c float32Minfloat1X) and thought I had to add math to compute the lowest value based on the number of bits available when I wrote my original comment. I should sleep more.\n\nSo, yeah, it\u0027s really simple to just set low values to 0. If ANGLE folks agree, I\u0027ll land it here and do the same in ANGLE.",
      "parentUuid": "01e42d69_58a64990",
      "range": {
        "startLine": 208,
        "startChar": 17,
        "endLine": 208,
        "endChar": 39
      },
      "revId": "f60f4147038bf39544d992a8528d89d2fa022e52",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eed165ca_0ee6a8ef",
        "filename": "src/System/Half.hpp",
        "patchSetId": 1
      },
      "lineNbr": 276,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-08-21T15:47:57Z",
      "side": 1,
      "message": "10\n\nhere and some other spots in this function",
      "range": {
        "startLine": 276,
        "startChar": 70,
        "endLine": 276,
        "endChar": 72
      },
      "revId": "f60f4147038bf39544d992a8528d89d2fa022e52",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    }
  ]
}