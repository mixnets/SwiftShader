{
  "comments": [
    {
      "key": {
        "uuid": "b1cf8dff_2008ff29",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-03-19T15:12:42Z",
      "side": 1,
      "message": "Also b/147900455",
      "revId": "6920f4f5dc8e15465d646d028053e6f237122dd8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa9529e9_a735c7bf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-03-19T15:14:35Z",
      "side": 1,
      "message": "Actually, never mind, that bug is more about the rounding behavior and precision loss, than lack of negative value support for 11/10-bit minifloat.",
      "parentUuid": "b1cf8dff_2008ff29",
      "revId": "6920f4f5dc8e15465d646d028053e6f237122dd8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8dfebd66_ef458dfc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-03-19T15:45:28Z",
      "side": 1,
      "message": "Well...\n\nThe only Vulkan spec text I could find about clamping framebuffer color output is:\n\n\"If the color attachment is fixed-point, the components of the source and destination values and blend factors are each clamped to [0,1] or [-1,1] respectively for an unsigned normalized or signed normalized color attachment prior to evaluating the blend operations. If the color attachment is floating-point, no clamping occurs.\"\n\nNo mention of unsigned floating-point.\n\nSeems rather obvious that we should clamp, so let\u0027s get that clarified in the spec. For now, please add this bug reference.",
      "parentUuid": "aa9529e9_a735c7bf",
      "revId": "6920f4f5dc8e15465d646d028053e6f237122dd8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e98ad7af_d6d98456",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-03-19T15:57:39Z",
      "side": 1,
      "message": "I don\u0027t understand your comment.\n\nThe range of values that are representable in 10bit is [0-2016] (1024 * (1 + 31/32)) and in 11 bit [0-4064] (2048 * (1 + 63/64).\nThe current behavior makes no sense, we\u0027re mapping negative values to positive values (ex.: -256 in float become 256 in 10 bit or 11 bit float).",
      "parentUuid": "8dfebd66_ef458dfc",
      "revId": "6920f4f5dc8e15465d646d028053e6f237122dd8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7599aef5_f40f2616",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-03-19T16:49:22Z",
      "side": 1,
      "message": "Sorry, my math is all wrong. It should be:\nThe range of values that are representable in 10bit is [0-64512] (32768 * (1 + 31/32)) and in 11 bit [0-65024] (32768  * (1 + 63/64)), since, 16 bit float with 10 bit mantissa, it\u0027s [0-65504] (32768  * (1 + 1023/1024))\n\nAnyway, the only important part is that the range or representable values clamps to 0.",
      "parentUuid": "e98ad7af_d6d98456",
      "revId": "6920f4f5dc8e15465d646d028053e6f237122dd8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51fc81a3_afa19802",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-03-19T17:56:09Z",
      "side": 1,
      "message": "Yes, all I\u0027m saying is that this isn\u0027t spelled out in the spec. I opened b/147900455 for similar holes in the spec, so we can bring this up at Khonos.\n\nSo please just add b/147900455 to the commit message. LGTM with that change.\n\n(Note that values not being in the representable range isn\u0027t enough to assume clamping is required. It could be UD, requiring the app to do the clamping if negative values are expected, or some other overflow behavior. The dEQP-GLES3 test pretty much forces clamping, but the spec should mention that or the test is invalid.)",
      "parentUuid": "7599aef5_f40f2616",
      "revId": "6920f4f5dc8e15465d646d028053e6f237122dd8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}