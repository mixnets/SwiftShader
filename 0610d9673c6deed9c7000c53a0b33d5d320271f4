{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "67c694fe_35dfbe65",
        "filename": "src/Reactor/CPUID.cpp",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 5050
      },
      "writtenOn": "2022-02-01T03:58:33Z",
      "side": 1,
      "message": "This would be a lot clearer by adding the \"bool CPUID::supportsAVX(int \u003cinsert register names\u003e[])\" function.",
      "range": {
        "startLine": 61,
        "startChar": 1,
        "endLine": 61,
        "endChar": 72
      },
      "revId": "0610d9673c6deed9c7000c53a0b33d5d320271f4",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc7f9240_53d2e806",
        "filename": "src/Reactor/CPUID.cpp",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-02-01T04:06:31Z",
      "side": 1,
      "message": "AVX v1 is useless to us so I wanted to avoid adding a method that should be avoided. Also note that CPUID is a slow instruction so it\u0027s best to check multiple bits at once where possible.\n\nI could move the comment below a bit higher if that would help?",
      "parentUuid": "67c694fe_35dfbe65",
      "range": {
        "startLine": 61,
        "startChar": 1,
        "endLine": 61,
        "endChar": 72
      },
      "revId": "0610d9673c6deed9c7000c53a0b33d5d320271f4",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe14c89b_5d605528",
        "filename": "src/Reactor/CPUID.cpp",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 5050
      },
      "writtenOn": "2022-02-01T04:10:34Z",
      "side": 1,
      "message": "I\u0027m not suggesting calling CPUID twice, I\u0027m simply suggesting to move that line into its own separate function, with the result of cpuid as the input argument.\n0x18001000 could also be defined in a constant / explained by a comment.",
      "parentUuid": "fc7f9240_53d2e806",
      "range": {
        "startLine": 61,
        "startChar": 1,
        "endLine": 61,
        "endChar": 72
      },
      "revId": "0610d9673c6deed9c7000c53a0b33d5d320271f4",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "393b12fe_204e7b34",
        "filename": "src/Reactor/CPUID.cpp",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-02-01T04:24:20Z",
      "side": 1,
      "message": "I don\u0027t think adding a layer of abstraction is useful here. It\u0027s only used once, and the bit positions are hard-coded by the instruction specification. I mean this is an assembly instruction after all, and moving stuff into functions or named constants is only going to cause confusion about what happens at the assembly level.",
      "parentUuid": "fe14c89b_5d605528",
      "range": {
        "startLine": 61,
        "startChar": 1,
        "endLine": 61,
        "endChar": 72
      },
      "revId": "0610d9673c6deed9c7000c53a0b33d5d320271f4",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c24c518_10b2a964",
        "filename": "src/Reactor/CPUID.cpp",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 5050
      },
      "writtenOn": "2022-02-01T14:20:56Z",
      "side": 1,
      "message": "I don\u0027t see how putting 0x18001000 in a named constant hurts readability, but, in any case, it should, at the very least, be explained in a comment. I don\u0027t think most people will read this and instantly understand why 0x18001000 is used to detect AVX.",
      "parentUuid": "393b12fe_204e7b34",
      "range": {
        "startLine": 61,
        "startChar": 1,
        "endLine": 61,
        "endChar": 72
      },
      "revId": "0610d9673c6deed9c7000c53a0b33d5d320271f4",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78417eb4_385a072d",
        "filename": "src/Reactor/CPUID.cpp",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-02-01T16:46:54Z",
      "side": 1,
      "message": "\u003e I don\u0027t see how putting 0x18001000 in a named constant hurts readability\n\nWhen reading the Intel Manual, it says bit 28 of ECX indicates AVX support. Hiding something like that in a symbol creates an unnecessary indirection. I\u0027d have to reference more code to check that things are correct, on top of peering through the Manual.\n\n\u003e it should, at the very least, be explained in a comment\n\nI\u0027m open to that, but there\u0027s already a comment at line 63 that\u0027s meant to explain the intent. Note that this is the kind of code that is either correct and we never have to look at it again, or there\u0027s a bug, we read the comment, open the Intel Manual to check that the intent matches the spec, and fix what\u0027s wrong. I don\u0027t think anything essential is missing from this existing comment.\n\n\u003e I don\u0027t think most people will read this and instantly understand why 0x18001000 is used to detect AVX.\n\nNobody should read this code and try to mess with it, without having the Manual open next to them. So there\u0027s no need to \"instantly\" understand it, beyond what the current comment explains, nor do I think that\u0027s achievable. Why is AVX indicated by bit 28? There\u0027s nothing to understand there. The literal value is what it is because the spec says so. The thing that needs explaining is the intent of checking AVX, OSXSAVE, and FMA, and I believe I did that adequately. That said, if you see specific ways to improve the comment in a way that is likely to help us in the future, I\u0027m all ears.",
      "parentUuid": "3c24c518_10b2a964",
      "range": {
        "startLine": 61,
        "startChar": 1,
        "endLine": 61,
        "endChar": 72
      },
      "revId": "0610d9673c6deed9c7000c53a0b33d5d320271f4",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}