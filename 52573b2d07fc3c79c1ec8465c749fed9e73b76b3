{
  "comments": [
    {
      "key": {
        "uuid": "783d9bbb_feacccf4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5005
      },
      "writtenOn": "2017-02-26T21:11:05Z",
      "side": 1,
      "message": "Could you provide some more information on which GCC build is broken? As far as I\u0027m aware all intended builds of SwiftShader compile fine.",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 13
      },
      "revId": "52573b2d07fc3c79c1ec8465c749fed9e73b76b3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b58955f0_10759353",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5960
      },
      "writtenOn": "2017-02-28T01:48:12Z",
      "side": 1,
      "message": "Updated the CL description.\nAnd FYI this is the last of 4 CLs that fix the build, the other three being in Chromium, angle, and ffmpeg",
      "parentUuid": "783d9bbb_feacccf4",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 13
      },
      "revId": "52573b2d07fc3c79c1ec8465c749fed9e73b76b3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "856546e6_c20f07f8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5005
      },
      "writtenOn": "2017-02-28T15:19:58Z",
      "side": 1,
      "message": "Is there a Chromium issue for this? If so, please add it to the commit message as \"Bug chromium:###\". Thanks.",
      "parentUuid": "b58955f0_10759353",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 13
      },
      "revId": "52573b2d07fc3c79c1ec8465c749fed9e73b76b3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52819594_b8c0d860",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5960
      },
      "writtenOn": "2017-03-01T19:42:22Z",
      "side": 1,
      "message": "done",
      "parentUuid": "856546e6_c20f07f8",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 13
      },
      "revId": "52573b2d07fc3c79c1ec8465c749fed9e73b76b3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cfb72fb1_c183f3af",
        "filename": "src/Renderer/Context.hpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 5005
      },
      "writtenOn": "2017-02-26T21:11:05Z",
      "side": 1,
      "message": "We need these to be unsigned enums, because we create bitfields out of them and otherwise the upper bit is treated as a sign bit and comparisons don\u0027t work as intended. So this more than likely causes our conformance tests to fail.\n\nAlso, specifying the underlying type of an enum is supported by all C++11 compilers. We don\u0027t intend to support any older compilers.",
      "range": {
        "startLine": 55,
        "startChar": 6,
        "endLine": 55,
        "endChar": 14
      },
      "revId": "52573b2d07fc3c79c1ec8465c749fed9e73b76b3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e52ac203_b1bc929c",
        "filename": "src/Renderer/Context.hpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 5960
      },
      "writtenOn": "2017-02-28T01:48:12Z",
      "side": 1,
      "message": "These changes were intended to fix a compile error causing by using these enums in a bitfield like so:\nDrawType draw_type : BITS(DRAW_LAST);\n\nThis causes an error in gcc because BITS(DRAW_LAST) cannot contain the full range of DrawType, which was specified to be unsigned int.  Unfortunately, this error is not ignorable.\n\nAlso, enum comparisons work by converting to int first, so unless there will ever be 2^31 entries in these enums, there should be no problem.  I understand this limit could be reached easily in an enum bitfield, but comparisons like \u003e wouldn\u0027t make sense in that case anyway.",
      "parentUuid": "cfb72fb1_c183f3af",
      "range": {
        "startLine": 55,
        "startChar": 6,
        "endLine": 55,
        "endChar": 14
      },
      "revId": "52573b2d07fc3c79c1ec8465c749fed9e73b76b3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "747cb725_72deb8c7",
        "filename": "src/Renderer/Context.hpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 5005
      },
      "writtenOn": "2017-02-28T15:19:58Z",
      "side": 1,
      "message": "I\u0027m not sure if that error is correct. The bitfield is large enough to contain all the values of these enums (and if not we\u0027d need a different fix). Could you provide some more details on why we\u0027re getting this error? I\u0027m on vacation and my workstation went offline so unfortunately I can\u0027t repro this myself at the moment (will be back in a week).\n\nI\u0027m pretty sure comparisons of the bitfield against one of the enum values work as intended when the underlying type is signed. A 3-bit bitfield ranges from -4 to 3 in value, so when you intend to store 0-7 in it then 7 corresponds with -1 and compare as smaller than 0-3.",
      "parentUuid": "e52ac203_b1bc929c",
      "range": {
        "startLine": 55,
        "startChar": 6,
        "endLine": 55,
        "endChar": 14
      },
      "revId": "52573b2d07fc3c79c1ec8465c749fed9e73b76b3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25f60fe8_0242c39f",
        "filename": "src/Renderer/Context.hpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 5960
      },
      "writtenOn": "2017-03-01T19:42:22Z",
      "side": 1,
      "message": "I believe the error is correct.  In \"7.2 Enumeration declarations\" of the standard, it says \"It is possible to define an enumeration that has values not defined by any of its enumerators\".\n\nI verified with this test on clang and gcc:\n\n#include \u003ccassert\u003e\n#include \u003cvector\u003e\n\nenum E {\n  a, // 000\n  b, // 001\n  c, // 010\n  d, // 011\n  e, // 100\n  f, // 101\n  g, // 110\n  h, // 111\n};\n\nstruct S {\n  E e : 3;\n  int dummy;\n};\n\nint main(void) {\n  S s;\n  std::vector\u003cE\u003e es{a, b, c, d, e, f, g, h};\n  for (int i \u003d 0; i \u003c 7; i++) {\n    for (int j \u003d i + 1; j \u003c 7; j++) {\n      s.e \u003d es[i];\n      assert(s.e \u003c es[j]);\n    }\n  }\n  return 0;\n}",
      "parentUuid": "747cb725_72deb8c7",
      "range": {
        "startLine": 55,
        "startChar": 6,
        "endLine": 55,
        "endChar": 14
      },
      "revId": "52573b2d07fc3c79c1ec8465c749fed9e73b76b3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de3b5045_f0971290",
        "filename": "src/Renderer/Context.hpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 5005
      },
      "writtenOn": "2017-03-02T10:48:46Z",
      "side": 1,
      "message": "Thanks for the standards reference. I think the most interesting part is: \"For an enumeration whose underlying type is fixed, the values of the enumeration are the values of the underlying type.\" That\u0027s news to me, and a bit surprising.\n\nBut your test does not expose the issue caused by having an implicit signed underlying type. With these inner loops instead, it fails:\n\nfor (int i \u003d 0; i \u003c 7; i++) {\n  for (int j \u003d i + 1; j \u003c 7; j++) {\n    s.e \u003d es[j];\n    assert(s.e \u003e es[i]);\n  }\n}\n\nI\u0027ll look into how to best fix this when I\u0027m back from vacation next week.",
      "parentUuid": "25f60fe8_0242c39f",
      "range": {
        "startLine": 55,
        "startChar": 6,
        "endLine": 55,
        "endChar": 14
      },
      "revId": "52573b2d07fc3c79c1ec8465c749fed9e73b76b3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a73e4c8_4433d5d1",
        "filename": "src/Renderer/Context.hpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 5960
      },
      "writtenOn": "2017-03-02T20:17:18Z",
      "side": 1,
      "message": "I can\u0027t seem to reproduce the failure on my machine,\nmaybe we have different compiler versions?\n\n$ g++ --version\ng++-4.8.real (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4\nCopyright (C) 2013 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n$ clang++ --version\nUbuntu clang version 3.4-1ubuntu3 (tags/RELEASE_34/final) (based on LLVM 3.4)\nTarget: x86_64-pc-linux-gnu\nThread model: posix",
      "parentUuid": "de3b5045_f0971290",
      "range": {
        "startLine": 55,
        "startChar": 6,
        "endLine": 55,
        "endChar": 14
      },
      "revId": "52573b2d07fc3c79c1ec8465c749fed9e73b76b3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8fe4939_6e6bbfae",
        "filename": "third_party/LLVM/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 5005
      },
      "writtenOn": "2017-02-26T21:11:05Z",
      "side": 1,
      "message": "This looks like a good change to me. Alexis, could you create a separate patch to handle all defined this way in all BUILD.gn files and for all platforms? Thanks.",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 67,
        "endChar": 3
      },
      "revId": "52573b2d07fc3c79c1ec8465c749fed9e73b76b3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36f405bd_2cb9529d",
        "filename": "third_party/LLVM/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 5050
      },
      "writtenOn": "2017-02-27T14:48:43Z",
      "side": 1,
      "message": "Noted. Will do this week.",
      "parentUuid": "b8fe4939_6e6bbfae",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 67,
        "endChar": 3
      },
      "revId": "52573b2d07fc3c79c1ec8465c749fed9e73b76b3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07d09244_fa32a5ee",
        "filename": "third_party/LLVM/include/llvm/CodeGen/RegAllocPBQP.h",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 5005
      },
      "writtenOn": "2017-02-26T21:11:05Z",
      "side": 1,
      "message": "These files are part of LLVM, which we don\u0027t intend to modify within the SwiftShader repository (granted, it\u0027s an old version, so it\u0027s riddled with minor issues). Instead we just silence any compiler warnings.",
      "range": {
        "startLine": 126,
        "startChar": 4,
        "endLine": 126,
        "endChar": 49
      },
      "revId": "52573b2d07fc3c79c1ec8465c749fed9e73b76b3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ef44029_a6d5289f",
        "filename": "third_party/LLVM/include/llvm/CodeGen/RegAllocPBQP.h",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 5960
      },
      "writtenOn": "2017-02-28T01:48:12Z",
      "side": 1,
      "message": "I reverted everything in LLVM and instead disabled the warnings",
      "parentUuid": "07d09244_fa32a5ee",
      "range": {
        "startLine": 126,
        "startChar": 4,
        "endLine": 126,
        "endChar": 49
      },
      "revId": "52573b2d07fc3c79c1ec8465c749fed9e73b76b3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d48acadc_9bb93501",
        "filename": "third_party/LLVM/include/llvm/CodeGen/RegAllocPBQP.h",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 5005
      },
      "writtenOn": "2017-02-28T15:19:58Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "8ef44029_a6d5289f",
      "range": {
        "startLine": 126,
        "startChar": 4,
        "endLine": 126,
        "endChar": 49
      },
      "revId": "52573b2d07fc3c79c1ec8465c749fed9e73b76b3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b5510b6_c3e1a609",
        "filename": "third_party/pnacl-subzero",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 5005
      },
      "writtenOn": "2017-02-26T21:11:05Z",
      "side": 1,
      "message": "We shouldn\u0027t roll back the Subzero revision. What\u0027s the issue you\u0027re experiencing? If it\u0027s genuine we can patch Subzero and update the revision both here and in the DEPS file.",
      "range": {
        "startLine": 1,
        "startChar": 18,
        "endLine": 1,
        "endChar": 58
      },
      "revId": "52573b2d07fc3c79c1ec8465c749fed9e73b76b3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee8918b0_24a8eff8",
        "filename": "third_party/pnacl-subzero",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 5960
      },
      "writtenOn": "2017-02-28T01:48:12Z",
      "side": 1,
      "message": "I don\u0027t know how this got added.  Reverted",
      "parentUuid": "3b5510b6_c3e1a609",
      "range": {
        "startLine": 1,
        "startChar": 18,
        "endLine": 1,
        "endChar": 58
      },
      "revId": "52573b2d07fc3c79c1ec8465c749fed9e73b76b3",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}