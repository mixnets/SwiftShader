{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3132713c_3cf0c944",
        "filename": "src/Vulkan/VkPipeline.cpp",
        "patchSetId": 5
      },
      "lineNbr": 128,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-05T03:22:05Z",
      "side": 1,
      "message": "uber-nit: \"begin\"\n\nGoes better together with \"end\". \"start\" tends to go with \"finish\" but these two are more often used as actions instead of observations.\n\n\"pipelineCreationBegins\" would be even clearer. While admittedly that looks a little odd as a method definition, where it\u0027s being called it\u0027s abundantly clear that it\u0027s \"where the pipeline creation begins\".",
      "range": {
        "startLine": 128,
        "startChar": 2,
        "endLine": 128,
        "endChar": 7
      },
      "revId": "4da964b09513b92b3bdbfcf5aca269d9b37fbd0e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae16adac_4d1bf43e",
        "filename": "src/Vulkan/VkPipeline.cpp",
        "patchSetId": 5
      },
      "lineNbr": 135,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-05T03:22:05Z",
      "side": 1,
      "message": "This feels a bit asymmetric without a destructor which calls pipelineCreationEnds(). Is there a way the object can go out of scope and the feedback information would not be \u0027valid\u0027?",
      "revId": "4da964b09513b92b3bdbfcf5aca269d9b37fbd0e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24f33ed5_7285ae81",
        "filename": "src/Vulkan/VkPipeline.cpp",
        "patchSetId": 5
      },
      "lineNbr": 136,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-05T03:22:05Z",
      "side": 1,
      "message": "nit: \"stageCreationBegins\" would be clearer.",
      "range": {
        "startLine": 136,
        "startChar": 6,
        "endLine": 136,
        "endChar": 11
      },
      "revId": "4da964b09513b92b3bdbfcf5aca269d9b37fbd0e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7138fef_037dec86",
        "filename": "src/Vulkan/VkPipeline.cpp",
        "patchSetId": 5
      },
      "lineNbr": 156,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-05T03:22:05Z",
      "side": 1,
      "message": "nit: \"stageCreationEnds\" ? I\u0027m not sure the \"Valid\" suffix is helpful since there is no other way to end it?",
      "range": {
        "startLine": 156,
        "startChar": 6,
        "endLine": 156,
        "endChar": 14
      },
      "revId": "4da964b09513b92b3bdbfcf5aca269d9b37fbd0e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b52fd8c_f09b6454",
        "filename": "src/Vulkan/VkPipeline.cpp",
        "patchSetId": 5
      },
      "lineNbr": 167,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-05T03:22:05Z",
      "side": 1,
      "message": "nit: \"pipelineCreationEnds\", and corresponding \"pipelineCreationBegins\" would clarify the difference with the stage-specific ones.",
      "range": {
        "startLine": 167,
        "startChar": 6,
        "endLine": 167,
        "endChar": 14
      },
      "revId": "4da964b09513b92b3bdbfcf5aca269d9b37fbd0e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "217f6966_672f16b9",
        "filename": "src/Vulkan/VkPipeline.cpp",
        "patchSetId": 5
      },
      "lineNbr": 186,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-05T03:22:05Z",
      "side": 1,
      "message": "I assume we already check for recognized extension structs elsewhere, so this can just be an if().",
      "range": {
        "startLine": 184,
        "startChar": 3,
        "endLine": 186,
        "endChar": 7
      },
      "revId": "4da964b09513b92b3bdbfcf5aca269d9b37fbd0e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3751242c_28e1d339",
        "filename": "src/Vulkan/VkPipeline.cpp",
        "patchSetId": 5
      },
      "lineNbr": 215,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-05T03:22:05Z",
      "side": 1,
      "message": "nit: This can be const by making pipelineCreationBegins() return it and using the constructor\u0027s member initializer list.",
      "range": {
        "startLine": 215,
        "startChar": 47,
        "endLine": 215,
        "endChar": 48
      },
      "revId": "4da964b09513b92b3bdbfcf5aca269d9b37fbd0e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dfa281d_2d6f2639",
        "filename": "src/Vulkan/VkPipeline.cpp",
        "patchSetId": 5
      },
      "lineNbr": 305,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-05T03:22:05Z",
      "side": 1,
      "message": "nit: This might be cleaner if this loop merely used an integer `stageIndex`, and then inside the loop body there\u0027s a `const VkPipelineShaderStageCreateInfo \u0026stageInfo \u003d pCreateInfo-\u003epStages[stageIndex];`",
      "range": {
        "startLine": 305,
        "startChar": 1,
        "endLine": 305,
        "endChar": 4
      },
      "revId": "4da964b09513b92b3bdbfcf5aca269d9b37fbd0e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5beae33d_fd81406a",
        "filename": "src/Vulkan/VkPipeline.cpp",
        "patchSetId": 5
      },
      "lineNbr": 334,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-05T03:22:05Z",
      "side": 1,
      "message": "nit: I don\u0027t find it very intuitive that this returns a boolean to indicate whether there was a cache hit. Perhaps we could have something like:\n\nauto onCacheMiss \u003d [\u0026] { return optimizeSpirv(key); };\nauto onCacheHit \u003d [\u0026] { pipelineCreationFeedback.cacheHit(stage); };\nspirv \u003d pPipelineCache-\u003egetOrOptimizeSpirv(key, onCacheMiss, onCacheHit);",
      "range": {
        "startLine": 334,
        "startChar": 3,
        "endLine": 334,
        "endChar": 5
      },
      "revId": "4da964b09513b92b3bdbfcf5aca269d9b37fbd0e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45c294ed_dda782e1",
        "filename": "src/Vulkan/libVulkan.cpp",
        "patchSetId": 5
      },
      "lineNbr": 432,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-05T03:22:05Z",
      "side": 1,
      "message": "Oops. Thanks for spotting that!",
      "range": {
        "startLine": 432,
        "startChar": 39,
        "endLine": 432,
        "endChar": 41
      },
      "revId": "4da964b09513b92b3bdbfcf5aca269d9b37fbd0e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}