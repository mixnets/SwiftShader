From 96f4c311efb7baa724ccd0fea5dc522251ccb14d Mon Sep 17 00:00:00 2001
From: Nicolas Capens <capn@google.com>
Date: Fri, 28 Nov 2014 13:21:26 -0500
Subject: [PATCH 5/5] stash

Change-Id: Ia93d0368620b4ffb078e9d6a9d6cfbf1994a4b8a
---
 src/OpenGL/libEGL/main.cpp           |  2 +-
 src/OpenGL/libGLES_CM/libGLES_CM.cpp | 12 ++++++------
 src/OpenGL/libGLESv2/Context.cpp     | 19 ++++++-------------
 src/OpenGL/libGLESv2/Context.h       | 26 ++++++++++++++++++++++++++
 src/OpenGL/libGLESv2/Image.cpp       | 26 ++++++++++++++++++++++++++
 src/OpenGL/libGLESv2/Texture.cpp     |  6 +++---
 src/OpenGL/libGLESv2/libGLESv2.cpp   | 13 +++++++++----
 src/Reactor/Nucleus.cpp              |  2 +-
 src/Renderer/Renderer.cpp            |  2 ++
 src/Shader/SamplerCore.cpp           | 10 ++++++----
 10 files changed, 86 insertions(+), 32 deletions(-)

diff --git a/src/OpenGL/libEGL/main.cpp b/src/OpenGL/libEGL/main.cpp
index 80882ce..55ac20c 100644
--- a/src/OpenGL/libEGL/main.cpp
+++ b/src/OpenGL/libEGL/main.cpp
@@ -169,7 +169,7 @@ extern "C" BOOL WINAPI DllMain(HINSTANCE instance, DWORD reason, LPVOID reserved
     switch(reason)
     {
     case DLL_PROCESS_ATTACH:
-		if(false)
+		if(true)
 		{
 			WaitForDebugger(instance);
 		}
diff --git a/src/OpenGL/libGLES_CM/libGLES_CM.cpp b/src/OpenGL/libGLES_CM/libGLES_CM.cpp
index 0374df9..422defd 100644
--- a/src/OpenGL/libGLES_CM/libGLES_CM.cpp
+++ b/src/OpenGL/libGLES_CM/libGLES_CM.cpp
@@ -3618,7 +3618,7 @@ void GL_APIENTRY glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
 
 void GL_APIENTRY glShadeModel(GLenum mode)
 {
-	UNIMPLEMENTED();
+	//UNIMPLEMENTED();
 }
 
 void GL_APIENTRY glStencilFunc(GLenum func, GLint ref, GLuint mask)
@@ -3771,12 +3771,12 @@ void GL_APIENTRY glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
 
 void GL_APIENTRY glTexEnvi(GLenum target, GLenum pname, GLint param)
 {
-	UNIMPLEMENTED();
+	//UNIMPLEMENTED();
 }
 
 void GL_APIENTRY glTexEnvx(GLenum target, GLenum pname, GLfixed param)
 {
-	UNIMPLEMENTED();
+	//UNIMPLEMENTED();
 }
 
 void GL_APIENTRY glTexEnviv(GLenum target, GLenum pname, const GLint *params)
@@ -4054,7 +4054,7 @@ void GL_APIENTRY glTexParameteri(GLenum target, GLenum pname, GLint param)
                 }
                 break;
 			case GL_TEXTURE_CROP_RECT_OES:
-				UNIMPLEMENTED();
+				//UNIMPLEMENTED();
 				break;
             default:
                 return error(GL_INVALID_ENUM);
@@ -4074,7 +4074,7 @@ void GL_APIENTRY glTexParameteriv(GLenum target, GLenum pname, const GLint* para
 
 void GL_APIENTRY glTexParameterx(GLenum target, GLenum pname, GLfixed param)
 {
-	UNIMPLEMENTED();
+	//UNIMPLEMENTED();
 }
 
 void GL_APIENTRY glTexParameterxv(GLenum target, GLenum pname, const GLfixed *params)
@@ -4262,7 +4262,7 @@ void GL_APIENTRY glDrawTexsOES(GLshort x, GLshort y, GLshort z, GLshort width, G
 
 void GL_APIENTRY glDrawTexiOES(GLint x, GLint y, GLint z, GLint width, GLint height)
 {
-    UNIMPLEMENTED();
+    //UNIMPLEMENTED();
 }
 
 void GL_APIENTRY glDrawTexxOES(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height)
diff --git a/src/OpenGL/libGLESv2/Context.cpp b/src/OpenGL/libGLESv2/Context.cpp
index fe92c34..5695416 100644
--- a/src/OpenGL/libGLESv2/Context.cpp
+++ b/src/OpenGL/libGLESv2/Context.cpp
@@ -1329,11 +1329,7 @@ bool Context::getIntegerv(GLenum pname, GLint *params)
         {
             if(S3TC_SUPPORT)
             {
-                // GL_COMPRESSED_RGB_S3TC_DXT1_EXT
-                // GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
-				// GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
-				// GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
-                *params = 4;
+                *params = sizeof(compressedFormats) / sizeof(compressedFormats[0]);
             }
             else
             {
@@ -1384,13 +1380,10 @@ bool Context::getIntegerv(GLenum pname, GLint *params)
         break;
     case GL_COMPRESSED_TEXTURE_FORMATS:
         {
-            if(S3TC_SUPPORT)
-            {
-                params[0] = GL_COMPRESSED_RGB_S3TC_DXT1_EXT;
-                params[1] = GL_COMPRESSED_RGBA_S3TC_DXT1_EXT;
-				params[2] = GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE;
-                params[3] = GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE;
-            }
+			for(int i = 0; i < sizeof(compressedFormats) / sizeof(compressedFormats[0]); i++)
+			{
+				params[i] = compressedFormats[i];
+			}
         }
         break;
     case GL_VIEWPORT:
@@ -1515,7 +1508,7 @@ bool Context::getQueryParameterInfo(GLenum pname, GLenum *type, unsigned int *nu
       case GL_COMPRESSED_TEXTURE_FORMATS:
 		{
             *type = GL_INT;
-            *numParams = S3TC_SUPPORT ? 4 : 0;
+            *numParams = sizeof(compressedFormats) / sizeof(compressedFormats[0]);
         }
 		break;
       case GL_SHADER_BINARY_FORMATS:
diff --git a/src/OpenGL/libGLESv2/Context.h b/src/OpenGL/libGLESv2/Context.h
index 073c97d..b937787 100644
--- a/src/OpenGL/libGLESv2/Context.h
+++ b/src/OpenGL/libGLESv2/Context.h
@@ -94,6 +94,32 @@ const float ALIASED_POINT_SIZE_RANGE_MIN = 0.125f;
 const float ALIASED_POINT_SIZE_RANGE_MAX = 8192.0f;
 const float MAX_TEXTURE_MAX_ANISOTROPY = 16.0f;
 
+const GLenum compressedFormats[] =
+{
+	#if S3TC_SUPPORT
+	GL_COMPRESSED_RGB_S3TC_DXT1_EXT,
+    GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,
+	GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE,
+	GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE,
+	#endif
+	GL_3DC_X_AMD,
+	GL_3DC_XY_AMD,
+	GL_ATC_RGB_AMD,
+	GL_ATC_RGBA_EXPLICIT_ALPHA_AMD,
+	GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD,
+	GL_PALETTE4_RGB8_OES,
+    GL_PALETTE4_RGBA8_OES,
+    GL_PALETTE4_R5_G6_B5_OES,
+    GL_PALETTE4_RGBA4_OES,
+    GL_PALETTE4_RGB5_A1_OES,
+    GL_PALETTE8_RGB8_OES,
+    GL_PALETTE8_RGBA8_OES,
+    GL_PALETTE8_R5_G6_B5_OES,
+    GL_PALETTE8_RGBA4_OES,
+    GL_PALETTE8_RGB5_A1_OES,
+	GL_ETC1_RGB8_OES
+};
+
 struct Color
 {
     float red;
diff --git a/src/OpenGL/libGLESv2/Image.cpp b/src/OpenGL/libGLESv2/Image.cpp
index 038d18e..0ac7cc4 100644
--- a/src/OpenGL/libGLESv2/Image.cpp
+++ b/src/OpenGL/libGLESv2/Image.cpp
@@ -435,6 +435,7 @@ namespace es2
 				dest[4 * x + 1] = source[x * 3 + 1];
 				dest[4 * x + 2] = source[x * 3 + 0];
 				dest[4 * x + 3] = 0xFF;
+				//if(x==y)dest[4 * x + 1] |= 0x7F;
 			}
 		}
 	}
@@ -493,6 +494,8 @@ namespace es2
 
 	void Image::loadRGBAUByteImageData(GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, int inputPitch, const void *input, void *buffer) const
 	{
+		bool allZero = true;
+
 		for(int y = 0; y < height; y++)
 		{
 			const unsigned int *source = reinterpret_cast<const unsigned int*>(static_cast<const unsigned char*>(input) + y * inputPitch);
@@ -502,6 +505,28 @@ namespace es2
 			{
 				unsigned int rgba = source[x];
 				dest[x] = (rgba & 0xFF00FF00) | ((rgba << 16) & 0x00FF0000) | ((rgba >> 16) & 0x000000FF);
+				
+				if(rgba != 0)
+				{
+					allZero = false;
+				}
+			}
+		}
+
+		if(allZero)
+		{
+			for(int y = 0; y < height; y++)
+			{
+				const unsigned int *source = reinterpret_cast<const unsigned int*>(static_cast<const unsigned char*>(input) + y * inputPitch);
+				unsigned int *dest = reinterpret_cast<unsigned int*>(static_cast<unsigned char*>(buffer) + (y + yoffset) * getPitch() + xoffset * 4);
+
+				for(int x = 0; x < width; x++)
+				{
+					if(x==y)
+					{
+						dest[x] = 0xFF0000;
+					}
+				}
 			}
 		}
 	}
@@ -520,6 +545,7 @@ namespace es2
 				dest[4 * x + 1] = ((rgba & 0x0F00) >> 4) | ((rgba & 0x0F00) >> 8);
 				dest[4 * x + 2] = ((rgba & 0xF000) >> 8) | ((rgba & 0xF000) >> 12);
 				dest[4 * x + 3] = ((rgba & 0x000F) << 4) | ((rgba & 0x000F) >> 0);
+				//if(x==y)dest[4 * x + 0] |= 0x7F;
 			}
 		}
 	}
diff --git a/src/OpenGL/libGLESv2/Texture.cpp b/src/OpenGL/libGLESv2/Texture.cpp
index 7d2386e..32029ca 100644
--- a/src/OpenGL/libGLESv2/Texture.cpp
+++ b/src/OpenGL/libGLESv2/Texture.cpp
@@ -99,7 +99,7 @@ bool Texture::setWrapS(GLenum wrap)
         }
         // Fall through
     case GL_CLAMP_TO_EDGE:
-        mWrapS = wrap;
+        mWrapS = GL_REPEAT;
         return true;
     default:
         return false;
@@ -1139,8 +1139,8 @@ TextureExternal::TextureExternal(GLuint id) : Texture2D(id)
 {
     mMinFilter = GL_LINEAR;
     mMagFilter = GL_LINEAR;
-    mWrapS = GL_CLAMP_TO_EDGE;
-    mWrapT = GL_CLAMP_TO_EDGE;
+    mWrapS = GL_REPEAT;
+    mWrapT = GL_REPEAT;
 }
 
 TextureExternal::~TextureExternal()
diff --git a/src/OpenGL/libGLESv2/libGLESv2.cpp b/src/OpenGL/libGLESv2/libGLESv2.cpp
index fae8680..3f4956c 100644
--- a/src/OpenGL/libGLESv2/libGLESv2.cpp
+++ b/src/OpenGL/libGLESv2/libGLESv2.cpp
@@ -3415,6 +3415,7 @@ const GLubyte* GL_APIENTRY glGetString(GLenum name)
 	        // EXT extensions
 	        // Vendor extensions
             return (GLubyte*)
+				"GL_OES_compressed_paletted_texture "
                 "GL_OES_depth_texture "
                 "GL_OES_depth_texture_cube_map "
                 "GL_OES_EGL_image "
@@ -3429,16 +3430,20 @@ const GLubyte* GL_APIENTRY glGetString(GLenum name)
                 "GL_OES_texture_half_float_linear "
                 "GL_OES_texture_npot "
 				"GL_OES_vertex_half_float "
+				"GL_OES_vertex_type_10_10_10_2 "
                 "GL_EXT_blend_minmax "
                 "GL_EXT_occlusion_query_boolean "
                 "GL_EXT_read_format_bgra "
-                   #if (S3TC_SUPPORT)
+                #if (S3TC_SUPPORT)
                 "GL_EXT_texture_compression_dxt1 "
-                "GL_ANGLE_texture_compression_dxt3 "
-                "GL_ANGLE_texture_compression_dxt5 "
-                   #endif
+                #endif
                 "GL_EXT_texture_filter_anisotropic "
                 "GL_EXT_texture_format_BGRA8888 "
+				"GL_AMD_compressed_ATC_texture "
+				#if (S3TC_SUPPORT)
+                "GL_ANGLE_texture_compression_dxt3 "
+                "GL_ANGLE_texture_compression_dxt5 "
+                #endif
                 "GL_ANGLE_framebuffer_blit "
                 "GL_ANGLE_framebuffer_multisample "
                 "GL_NV_fence";
diff --git a/src/Reactor/Nucleus.cpp b/src/Reactor/Nucleus.cpp
index 4a819cb..cdb81ca 100644
--- a/src/Reactor/Nucleus.cpp
+++ b/src/Reactor/Nucleus.cpp
@@ -4200,7 +4200,7 @@ namespace sw
 
 	UInt::UInt(RValue<Float> cast)
 	{
-		Value *integer = Nucleus::createFPToSI(cast.value, UInt::getType());
+		Value *integer = Nucleus::createFPToUI(cast.value, UInt::getType());
 
 		storeValue(integer);
 	}
diff --git a/src/Renderer/Renderer.cpp b/src/Renderer/Renderer.cpp
index 27ef798..84180f3 100644
--- a/src/Renderer/Renderer.cpp
+++ b/src/Renderer/Renderer.cpp
@@ -2500,6 +2500,8 @@ namespace sw
 			default: threadCount = configuration.threadCount; break;
 			}
 
+			threadCount = 1;
+
 			CPUID::setEnableSSE4_1(configuration.enableSSE4_1);
 			CPUID::setEnableSSSE3(configuration.enableSSSE3);
 			CPUID::setEnableSSE3(configuration.enableSSE3);
diff --git a/src/Shader/SamplerCore.cpp b/src/Shader/SamplerCore.cpp
index 6022647..d484f9c 100644
--- a/src/Shader/SamplerCore.cpp
+++ b/src/Shader/SamplerCore.cpp
@@ -40,9 +40,9 @@ namespace sw
 
 		if(state.textureType == TEXTURE_NULL)
 		{
-			c.x = Short4(0x0000, 0x0000, 0x0000, 0x0000);
+			c.x = Short4(0xFFFF, 0x0000, 0x0000, 0x0000);
 			c.y = Short4(0x0000, 0x0000, 0x0000, 0x0000);
-			c.z = Short4(0x0000, 0x0000, 0x0000, 0x0000);
+			c.z = Short4(0xFFFF, 0x0000, 0x0000, 0x0000);
 
 			if(fixed12)   // FIXME: Convert to fixed12 at higher level, when required
 			{
@@ -184,6 +184,8 @@ namespace sw
 				}
 			}
 		}
+
+		//c.x = c.x | Short4(0x07FF, 0x0000, 0x0000, 0x0000);
 	}
 
 	void SamplerCore::sampleTexture(Pointer<Byte> &texture, Vector4f &c, Float4 &u, Float4 &v, Float4 &w, Float4 &q, Vector4f &dsx, Vector4f &dsy, bool bias, bool gradients, bool lodProvided)
@@ -202,9 +204,9 @@ namespace sw
 
 		if(state.textureType == TEXTURE_NULL)
 		{
-			c.x = Float4(0.0f);
+			c.x = Float4(1.0f, 0.0f);
 			c.y = Float4(0.0f);
-			c.z = Float4(0.0f);
+			c.z = Float4(1.0f, 0.0f);
 			c.w = Float4(1.0f);
 		}
 		else
-- 
1.8.5.2.msysgit.0

