{
  "comments": [
    {
      "key": {
        "uuid": "87873f6c_dfa28736",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 12
      },
      "lineNbr": 276,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-04-12T21:36:31Z",
      "side": 1,
      "message": "There\u0027s also CopyDescriptorSet and DescriptorUpdateTemplate to consider. Please add UNIMPLEMENTED()s for them so they\u0027re not forgotten.",
      "range": {
        "startLine": 276,
        "startChar": 4,
        "endLine": 276,
        "endChar": 82
      },
      "revId": "84d07266d2fb1ece69b7a0c38709670527a51c26",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a859f10_5b1509ee",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 12
      },
      "lineNbr": 276,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-04-12T22:04:29Z",
      "side": 1,
      "message": "This will be refactored into a method. Same for proper buffer descriptors. Anyway, can add UNIMPLEMENTED if you\u0027re worried we\u0027ll might miss it.",
      "parentUuid": "87873f6c_dfa28736",
      "range": {
        "startLine": 276,
        "startChar": 4,
        "endLine": 276,
        "endChar": 82
      },
      "revId": "84d07266d2fb1ece69b7a0c38709670527a51c26",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf036a34_c4595daf",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 12
      },
      "lineNbr": 276,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-04-12T22:05:27Z",
      "side": 1,
      "message": "I trust you won\u0027t.",
      "parentUuid": "0a859f10_5b1509ee",
      "range": {
        "startLine": 276,
        "startChar": 4,
        "endLine": 276,
        "endChar": 82
      },
      "revId": "84d07266d2fb1ece69b7a0c38709670527a51c26",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24bf68d7_42aaca3e",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 12
      },
      "lineNbr": 296,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-04-12T20:20:23Z",
      "side": 1,
      "message": "This cancels out the ImageView\u0027s baseLevel when querying the level in the Image object. Is that the desired behavior? If we have total of 4 mip levels and the image view has levels 1-2, should we get levels at their default location, like (1)-1-2-(2), or shifted towards level 0, like 1-2-(2)-(2), levels in parenthesis being implicitly copied from the closest available mip level.",
      "range": {
        "startLine": 296,
        "startChar": 27,
        "endLine": 296,
        "endChar": 39
      },
      "revId": "84d07266d2fb1ece69b7a0c38709670527a51c26",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2a26128_f233bf10",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 12
      },
      "lineNbr": 296,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-04-12T21:05:40Z",
      "side": 1,
      "message": "The former. This implementation matches what we do on the GL side where we have direct access to all levels of the texture.\n\nProbably could use some additional comments. I\u0027ll take care of that in the next changes.",
      "parentUuid": "24bf68d7_42aaca3e",
      "range": {
        "startLine": 296,
        "startChar": 27,
        "endLine": 296,
        "endChar": 39
      },
      "revId": "84d07266d2fb1ece69b7a0c38709670527a51c26",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}