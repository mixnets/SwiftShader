{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cf8bc9aa_87bcc427",
        "filename": "src/Vulkan/VkFormat.cpp",
        "patchSetId": 2
      },
      "lineNbr": 655,
      "author": {
        "id": 5050
      },
      "writtenOn": "2022-03-29T02:19:41Z",
      "side": 1,
      "message": "Wouldn\u0027t it be more readable and easy to modify later on if all formats included in the returned vector below were also used in case statements?",
      "range": {
        "startLine": 655,
        "startChar": 6,
        "endLine": 655,
        "endChar": 24
      },
      "revId": "4d3a74e78c3687ff269d5121fc3b9242992a06fc",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55b2f60e_0bb888a4",
        "filename": "src/Vulkan/VkFormat.cpp",
        "patchSetId": 2
      },
      "lineNbr": 655,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-04-04T04:13:29Z",
      "side": 1,
      "message": "That would indeed have a certain readability advantage, but also a few disadvantages:\n- We (or someone else) would be more likely to update this function without also updating `getCompatibilityClassRepresentative()`.\n- The function would be over 100 lines longer, which decreases readability.\n- It would be non-trivial to ensure every format in each vector has a case label, and in the right place (copy-paste errors are easy to make).\n- The assert at line 1005 actually prevents using the wrong \u0027representative\u0027 of the format class. We wouldn\u0027t be able to have such a check with expanded case labels.\n\nI\u0027ve considered the alternative of rewriting `getCompatibilityClassRepresentative()` or even just `isCompatible()` in terms of `getCompatibleFormats()` by checking the first element of the vector, but that might not be the most \u0027representative\u0027 format and would add the overhead of constructing the vector where we previously didn\u0027t need to. C++20 would enable static constexpr vectors so we can compare them by pointer without atexit destructors, bu that\u0027s not universally available yet...\n\nSo, I think this is a reasonable compromise for now.",
      "parentUuid": "cf8bc9aa_87bcc427",
      "range": {
        "startLine": 655,
        "startChar": 6,
        "endLine": 655,
        "endChar": 24
      },
      "revId": "4d3a74e78c3687ff269d5121fc3b9242992a06fc",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2cff174f_9e039b48",
        "filename": "src/Vulkan/VkFormat.cpp",
        "patchSetId": 2
      },
      "lineNbr": 655,
      "author": {
        "id": 5050
      },
      "writtenOn": "2022-04-04T12:16:44Z",
      "side": 1,
      "message": "Ack. Good enough for now.",
      "parentUuid": "55b2f60e_0bb888a4",
      "range": {
        "startLine": 655,
        "startChar": 6,
        "endLine": 655,
        "endChar": 24
      },
      "revId": "4d3a74e78c3687ff269d5121fc3b9242992a06fc",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "4d3a74e78c3687ff269d5121fc3b9242992a06fc",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "4d3a74e78c3687ff269d5121fc3b9242992a06fc",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "4d3a74e78c3687ff269d5121fc3b9242992a06fc",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}