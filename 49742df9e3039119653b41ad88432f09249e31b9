{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "17f36708_5f4aa26b",
        "filename": "src/Vulkan/VkCommandBuffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1789,
      "author": {
        "id": 78381
      },
      "writtenOn": "2022-04-28T12:20:43Z",
      "side": 1,
      "message": "This line got modified by src/clang-format-all.sh",
      "revId": "49742df9e3039119653b41ad88432f09249e31b9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5150fcf4_5c06b472",
        "filename": "src/Vulkan/VkDescriptorSet.hpp",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 5050
      },
      "writtenOn": "2022-04-28T13:06:17Z",
      "side": 1,
      "message": "The offsetof spec mentions:\n\"If type is not a PODType (until C++11) standard layout type (since C++11), the behavior is undefined (until C++17) use of the offsetof macro is conditionally-supported (since C++17).\"\n\nDescriptorSetHeader contains a marl::mutex private member (which, I think, wraps a std::mutex object, see: https://github.com/google/marl/blob/e82d1a7b8bca94cca68e0000e866289e2cf29ccc/include/marl/mutex.h#L67), which, in any case, which, in any case, means that it doesn\u0027t qualify as a standard layout type, because it would need to have \"the same access control (private, protected, public) for all its non-static data members\" (see: https://www.cplusplus.com/reference/type_traits/is_standard_layout).\n\nYou might just want to use SwiftShader\u0027s OFFSET macro (https://source.chromium.org/chromium/chromium/src/+/main:third_party/swiftshader/src/Reactor/Reactor.hpp;l\u003d3239)",
      "range": {
        "startLine": 66,
        "startChar": 18,
        "endLine": 66,
        "endChar": 26
      },
      "revId": "49742df9e3039119653b41ad88432f09249e31b9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}