{
  "comments": [
    {
      "key": {
        "uuid": "fa545451_b760a336",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-09-01T18:50:58Z",
      "side": 1,
      "message": "This sentence is confusing. As discussed, let\u0027s say something along the lines of validating that it produces the implementation-defined behaviour we expect (that is, producing zero).",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 21,
        "endChar": 5
      },
      "revId": "960b00392d5e295e9cc260934d04950e2b062192",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49769cea_23d3aa3e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-09-01T19:36:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa545451_b760a336",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 21,
        "endChar": 5
      },
      "revId": "960b00392d5e295e9cc260934d04950e2b062192",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f10399a4_227d0d88",
        "filename": "src/System/Half.hpp",
        "patchSetId": 2
      },
      "lineNbr": 308,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-09-01T18:50:58Z",
      "side": 1,
      "message": "I\u0027ve mentioned this before, but the use of bit masks like this combined with reinterpret_casting to int is not guaranteed to produce what you expect, as the storage layout is implementation-defined (usually the reverse order for different endianness). But I think you said last time that we can reasonable assume we\u0027re always on little endian now?",
      "revId": "960b00392d5e295e9cc260934d04950e2b062192",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5aaa3e22_c4e2ac9b",
        "filename": "src/System/Half.hpp",
        "patchSetId": 2
      },
      "lineNbr": 308,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-09-01T19:36:58Z",
      "side": 1,
      "message": "Ack. Yes, we make a lot of assumptions about little endian across the code base, and this has never caused any issues. x86 is always little endian, and ever since ARM 3 their default mode is little endian too.",
      "parentUuid": "f10399a4_227d0d88",
      "revId": "960b00392d5e295e9cc260934d04950e2b062192",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e09b861_c69526e2",
        "filename": "tests/MathUnitTests/unittests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-09-01T18:50:58Z",
      "side": 1,
      "message": "This comment should also mention that the 0 is implementation-defined, right?",
      "revId": "960b00392d5e295e9cc260934d04950e2b062192",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "912a01ca_5d5635fd",
        "filename": "tests/MathUnitTests/unittests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-09-01T19:36:58Z",
      "side": 1,
      "message": "No. This test verifies the mandatory result. It should not be implementation dependent. We happen to have UB which may cause this test to fail on exotic platforms, where we should instead also produce 0.",
      "parentUuid": "4e09b861_c69526e2",
      "revId": "960b00392d5e295e9cc260934d04950e2b062192",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}