{
  "comments": [
    {
      "key": {
        "uuid": "d5cefe75_61585676",
        "filename": "src/OpenGL/compiler/OutputASM.cpp",
        "patchSetId": 1
      },
      "lineNbr": 887,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-09-30T15:36:16Z",
      "side": 1,
      "message": "I think we can replace this with an ASSERT(numCols \u003d\u003d numRows) and remove the if statement.\n\nI think safeguards like these can be useful, but only when they\u0027d actually prevent a crash. Not emitting the determinant operation, or emitting one for a non-square matrix would both produce wrong shader results and are equally (un)likely to cause a crash (multiplied by the unlikeliness of hitting this in the first place).\n\nOn another note, for UNREACHABLE() following an else statement, feel free to write them on the same like without brackets. We don\u0027t ever have to add extra statements to them. This style has been used else in the code already.\n\n\u003c/bikeshedding\u003e",
      "range": {
        "startLine": 884,
        "startChar": 4,
        "endLine": 887,
        "endChar": 5
      },
      "revId": "9793d4aca1ecfc3bbf478b8954a76f2164810642",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5cefe75_815d5a67",
        "filename": "src/OpenGL/compiler/OutputASM.cpp",
        "patchSetId": 1
      },
      "lineNbr": 926,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-09-30T15:36:16Z",
      "side": 1,
      "message": "Same. By the way, this might be a good time to double check that the parser generates an error on trying to use determinant or inverse on non-square matrices.",
      "range": {
        "startLine": 923,
        "startChar": 4,
        "endLine": 926,
        "endChar": 5
      },
      "revId": "9793d4aca1ecfc3bbf478b8954a76f2164810642",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e6c7116_e510c084",
        "filename": "src/Shader/ShaderCore.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1166,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-09-29T16:52:42Z",
      "side": 1,
      "message": "This looks strangely asymmetrical to me.\n\nNote that the numerical precision can depend dramatically on the order of the additions and subtractions. Symmetrical formulas where the additions and subtractions alternate typically have higher average precision.\n\nThat said, we probably want to do whatever GPUs are really doing. Does the spec mention anything about how the determinant should be computed using cross products and dot products?",
      "range": {
        "startLine": 1159,
        "startChar": 10,
        "endLine": 1166,
        "endChar": 66
      },
      "revId": "9793d4aca1ecfc3bbf478b8954a76f2164810642",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e6c7116_a559a873",
        "filename": "src/Shader/ShaderCore.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1166,
      "author": {
        "id": 5050
      },
      "writtenOn": "2015-09-29T17:10:14Z",
      "side": 1,
      "message": "You have to look at how a determinant is computed. When you compute the cofactors, it looks like:\nFor 1st col, sum of (2nd col)  * cross(3rd col, 4th col).\nFor 2nd col, sum of (1st col)  * cross(3rd col, 4th col).\nFor 3rd col, sum of (1st col)  * cross(2nd col, 4th col).\nFor 4th col, sum of (1st col)  * cross(2nd col, 3rd col).\nThe same cross products will be used for 1st col and 2nd col, which is why I compute them 1st and store them. I could reuse more cross product computations if I was computing ALL cofactors for the 4x4 matrix, but I just need a single column (or single row, since the determinant computation can be done on the transposed matrix), so this is just a simplification of the \"vanilla\" formula you can find on math websites.\n\nI did not see any mention of the algorithm used inside the spec.\n\nI can absolutely perform it symmetrically, by not storing the intermediate results in dst.xyz (first 3 lines), but then it\u0027d be recomputing these twice.",
      "parentUuid": "8e6c7116_e510c084",
      "range": {
        "startLine": 1159,
        "startChar": 10,
        "endLine": 1166,
        "endChar": 66
      },
      "revId": "9793d4aca1ecfc3bbf478b8954a76f2164810642",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5cefe75_a1617e1c",
        "filename": "src/Shader/ShaderCore.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1166,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-09-30T15:36:16Z",
      "side": 1,
      "message": "Great, thanks for checking.",
      "parentUuid": "8e6c7116_a559a873",
      "range": {
        "startLine": 1159,
        "startChar": 10,
        "endLine": 1166,
        "endChar": 66
      },
      "revId": "9793d4aca1ecfc3bbf478b8954a76f2164810642",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}