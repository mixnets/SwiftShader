{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bfc4703b_14728fef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-18T17:09:10Z",
      "side": 1,
      "message": "Looks spec compliant as-is but slightly feels like a weird mix of common and not-so-common features:",
      "revId": "46f1692bed875c0c5fab7b93ca2fe0c3c0b638eb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46ad38cf_f28d2bb4",
        "filename": "src/Pipeline/SpirvShaderMemory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 400,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-18T17:09:10Z",
      "side": 1,
      "message": "Let\u0027s move these near line 393 to separate state handling logic from Reactor code.",
      "range": {
        "startLine": 399,
        "startChar": 3,
        "endLine": 400,
        "endChar": 95
      },
      "revId": "46f1692bed875c0c5fab7b93ca2fe0c3c0b638eb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68f0f6cd_09944006",
        "filename": "src/Vulkan/VkDescriptorSetLayout.hpp",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-18T17:09:10Z",
      "side": 1,
      "message": "InlineUniformBlockDescriptor does not need this because the size is constant? Shouldn\u0027t it be the size of the requested inline block though, instead of the maximum?\n\nIt seem to me that the maximum size is likely to have to change in the not too distant future too. Enabling robustness already has a cost, so I don\u0027t think it makes much of a difference to read this size from the descriptor instead of having a literal in the code.",
      "range": {
        "startLine": 81,
        "startChar": 5,
        "endLine": 81,
        "endChar": 19
      },
      "revId": "46f1692bed875c0c5fab7b93ca2fe0c3c0b638eb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed858074_dc94213d",
        "filename": "src/Vulkan/VkDescriptorSetLayout.hpp",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-18T17:09:10Z",
      "side": 1,
      "message": "block ?",
      "range": {
        "startLine": 88,
        "startChar": 9,
        "endLine": 88,
        "endChar": 13
      },
      "revId": "46f1692bed875c0c5fab7b93ca2fe0c3c0b638eb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0716ad4d_e720d547",
        "filename": "src/Vulkan/VkDescriptorSetLayout.hpp",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-18T17:09:10Z",
      "side": 1,
      "message": "By making this [1] and putting this array last we could make the descriptor dynamically sized to what the application requested.",
      "range": {
        "startLine": 88,
        "startChar": 13,
        "endLine": 88,
        "endChar": 44
      },
      "revId": "46f1692bed875c0c5fab7b93ca2fe0c3c0b638eb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c108eca_6b83ba7d",
        "filename": "src/Vulkan/VkDescriptorSetLayout.hpp",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-18T17:09:10Z",
      "side": 1,
      "message": "I wonder if we could just reuse BufferDescriptor, by putting ptr at the end and making it a union together with block[].\n\nThis way even less code needs to change, and we can dynamically size the block as needed.",
      "range": {
        "startLine": 89,
        "startChar": 1,
        "endLine": 89,
        "endChar": 17
      },
      "revId": "46f1692bed875c0c5fab7b93ca2fe0c3c0b638eb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4aa0f1b8_cfddfd02",
        "filename": "src/Vulkan/VkPhysicalDevice.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1073,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-11-18T13:39:11Z",
      "side": 1,
      "message": "Note: Commonly used values, taken from https://vulkan.gpuinfo.org/listpropertiesextensions.php",
      "range": {
        "startLine": 1069,
        "startChar": 0,
        "endLine": 1073,
        "endChar": 69
      },
      "revId": "46f1692bed875c0c5fab7b93ca2fe0c3c0b638eb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c709e9fb_cd66f45c",
        "filename": "src/Vulkan/VkPhysicalDevice.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1073,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-11-18T17:09:10Z",
      "side": 1,
      "message": "It looks like Intel only supports 4, which actually has the majority desktop market share, so if SwiftShader supports more then that can lead to not properly testing compatibility with common GPUs.\n\nThese numbers are trivial to increase if/when the need arises. Of course ideally these numbers become run-time configurable, but that\u0027s for future ecosystem tooling. For now let\u0027s just be conservative.",
      "parentUuid": "4aa0f1b8_cfddfd02",
      "range": {
        "startLine": 1069,
        "startChar": 0,
        "endLine": 1073,
        "endChar": 69
      },
      "revId": "46f1692bed875c0c5fab7b93ca2fe0c3c0b638eb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}