{
  "comments": [
    {
      "key": {
        "uuid": "d8d2998c_663f17f6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 16,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-04-03T19:47:44Z",
      "side": 1,
      "message": "Well, this isn\u0027t true any more :)",
      "revId": "965b7b153d96c5281522ee18ccaea68e7746e8f2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30235f80_15fff1ca",
        "filename": "src/Vulkan/VkQueryPool.cpp",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-04-03T19:36:06Z",
      "side": 1,
      "message": "Construct your Queries. Who knows what std::atomic contains.",
      "revId": "965b7b153d96c5281522ee18ccaea68e7746e8f2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d629d42_6a098ef0",
        "filename": "src/Vulkan/VkQueryPool.cpp",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-04-03T19:36:06Z",
      "side": 1,
      "message": "Use a std::condition_variable to wait until the query is complete.\nhttps://en.cppreference.com/w/cpp/thread/condition_variable\n\nI\u0027m happy to help you with this if you are unfamiliar with these synchronisation primitives.",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 75,
        "endChar": 5
      },
      "revId": "965b7b153d96c5281522ee18ccaea68e7746e8f2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "890939bf_7dd71969",
        "filename": "src/Vulkan/VkQueryPool.hpp",
        "patchSetId": 6
      },
      "lineNbr": 34,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-04-03T19:36:06Z",
      "side": 1,
      "message": "State and data should be synchronised together. See my comments about using a condition_variable - this will require a std::mutex which can guard both.\nNote the reference is fine to remain as an atomic.",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 34,
        "endChar": 27
      },
      "revId": "965b7b153d96c5281522ee18ccaea68e7746e8f2",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    }
  ]
}