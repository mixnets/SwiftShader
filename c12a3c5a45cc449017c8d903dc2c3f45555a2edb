{
  "comments": [
    {
      "key": {
        "uuid": "c4a8f047_64238ff2",
        "filename": "src/Vulkan/VkBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 6982
      },
      "writtenOn": "2018-10-25T15:55:43Z",
      "side": 1,
      "message": "This TODO isn\u0027t workable. You can require alignment, and if you must, you can have some slop on the _end_, but the first byte of the buffer contents is at the offset you bind to.\n\nAnything needing to enforce robustness should have access to the size information (via a descriptor if in the shader, or directly from this object if used directly from a CB).",
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "169f1dc2_3e9c6f0a",
        "filename": "src/Vulkan/VkBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 5065
      },
      "writtenOn": "2018-10-25T16:04:34Z",
      "side": 1,
      "message": "I would have imagined that doing this: |size|padding for alignement|buffer content| with \u0026size aligned would have been ok. Is there some additional constraints because of memory aliasing between buffers?",
      "parentUuid": "c4a8f047_64238ff2",
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38658f79_781a44c8",
        "filename": "src/Vulkan/VkBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-10-25T16:14:04Z",
      "side": 1,
      "message": "The issue is that the application decides where to put the data, and only gives us the offset into the device memory block. We can\u0027t write anything extra in there.",
      "parentUuid": "169f1dc2_3e9c6f0a",
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0316c433_e3c8b1f7",
        "filename": "src/Vulkan/VkBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 6982
      },
      "writtenOn": "2018-10-25T16:14:21Z",
      "side": 1,
      "message": "There is no mechanism to tell the app that you\u0027ve done that. There\u0027s no initial padding at the start of the buffer -- the app is responsible for choosing vkBindBufferMemory\u0027s memoryOffset parameter to satisfy VkMemoryREquirements::alignment, but the first byte is always at that offset.",
      "parentUuid": "169f1dc2_3e9c6f0a",
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d15ce69_f792b6cf",
        "filename": "src/Vulkan/VkBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 5065
      },
      "writtenOn": "2018-10-24T21:55:11Z",
      "side": 1,
      "message": "This would just do pointer \u003d pDeviceMemory-\u003egetBasePointer() + pMemoryOffset.",
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ce6799a_a4fd1dd9",
        "filename": "src/Vulkan/VkBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-10-25T14:40:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d15ce69_f792b6cf",
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0be21a34_a83f944e",
        "filename": "src/Vulkan/VkBuffer.hpp",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 5065
      },
      "writtenOn": "2018-10-24T21:55:11Z",
      "side": 1,
      "message": "For swiftshader, all a buffer cares about is its pointer and its size. The rest of the creation arguments can be ignored and shouldn\u0027t be stored.",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 44,
        "endChar": 52
      },
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65ed9a23_5fc5d0e8",
        "filename": "src/Vulkan/VkBuffer.hpp",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-10-25T03:14:59Z",
      "side": 1,
      "message": "Generally agreed, but see my VkBufferView.cpp comment.",
      "parentUuid": "0be21a34_a83f944e",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 44,
        "endChar": 52
      },
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f44f5c9e_670ccfb1",
        "filename": "src/Vulkan/VkBuffer.hpp",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-10-25T14:40:54Z",
      "side": 1,
      "message": "I replaced:\n\tVkDeviceMemory        deviceMemory \u003d nullptr;\n\tVkDeviceSize          memoryOffset \u003d 0;\nWith:\n\tvoid*                 memory \u003d nullptr;\n\nBut I\u0027ll keep the other parameters for now until they optimize out naturally with the rest of the implementation, if that makes sense. I\u0027d rather keep these arguments until I can fully justify removing them, just to remember that I *may* have some optimization opportunity from some of these at some point.",
      "parentUuid": "65ed9a23_5fc5d0e8",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 44,
        "endChar": 52
      },
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22e0198a_5581d034",
        "filename": "src/Vulkan/VkBuffer.hpp",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-10-25T15:25:30Z",
      "side": 1,
      "message": "The problem is that it\u0027s extremely easy to forget about these. This can lead to death-by-a-thousand-cuts or even simply become a maintenance burden (e.g. after a while these variables might become used for something unimportant, but when a refactoring needs to happen people don\u0027t remember the full history and are overly careful not to remove them - just painting one possible scenario here, and it might seem minor in isolation but does add up when doing these things across the code base).\n\nIt\u0027s impossible to forget about things when only adding them when absolutely needed.\n\nAnyway, we have b/118401597 to remind us about this, which, hopefully, doesn\u0027t get lowered in priority because we start passing tests and then seems no longer worth it due to things becoming harder to refactor as time passes.",
      "parentUuid": "f44f5c9e_670ccfb1",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 44,
        "endChar": 52
      },
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6fc9715e_1e1738b3",
        "filename": "src/Vulkan/VkBuffer.hpp",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-10-25T15:52:32Z",
      "side": 1,
      "message": "Ack. I\u0027ll make sure I cleanse all unused parameters once we\u0027ve implemented multiple uses of the Buffer object (or any other object) and we realize that some parameters are irrelevant to SwiftShader, but I\u0027m afraid of the opposite thing, which is forgetting to implement support for some of the parameters because a class looks \"clean\".",
      "parentUuid": "22e0198a_5581d034",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 44,
        "endChar": 52
      },
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd34e4d8_a5aeca2d",
        "filename": "src/Vulkan/VkBufferView.hpp",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 5065
      },
      "writtenOn": "2018-10-24T21:55:11Z",
      "side": 1,
      "message": "I think for buffer views you would only care about the offseted pointer, sixe and format, not the rest.",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 41,
        "endChar": 21
      },
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "badeb742_66397ffa",
        "filename": "src/Vulkan/VkBufferView.hpp",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-10-25T03:14:59Z",
      "side": 1,
      "message": "For debugging purposes it seems valuable to track the original creation/binding info. Perhaps we should do that consistently across all objects by adding Vk*CreateInfo members, within #ifndef NDEBUG, then separately have the strictly necessary data. There would be some duplication for debug builds, but that\u0027s fine.\n\nLet\u0027s discuss this further in b/118401597. For now I\u0027m ok with this part of the CL as-is since already existing objects don\u0027t necessarily follow this yet either.",
      "parentUuid": "dd34e4d8_a5aeca2d",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 41,
        "endChar": 21
      },
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "943f5804_a00bf2d2",
        "filename": "src/Vulkan/VkBufferView.hpp",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-10-25T14:40:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "badeb742_66397ffa",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 41,
        "endChar": 21
      },
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d67d669_abb4607d",
        "filename": "src/Vulkan/VkDeviceMemory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-10-24T19:28:57Z",
      "side": 1,
      "message": "Shouldn\u0027t have to call this any more. vkAllocateMemory already allocated the memory (committed or not). Could use an ASSERT(buffer) here though.",
      "range": {
        "startLine": 55,
        "startChar": 1,
        "endLine": 55,
        "endChar": 30
      },
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5009308c_9c2c8a39",
        "filename": "src/Vulkan/VkDeviceMemory.cpp",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-10-25T14:40:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5d67d669_abb4607d",
      "range": {
        "startLine": 55,
        "startChar": 1,
        "endLine": 55,
        "endChar": 30
      },
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "058affab_82af7c9d",
        "filename": "src/Vulkan/libVulkan.cpp",
        "patchSetId": 2
      },
      "lineNbr": 677,
      "author": {
        "id": 5065
      },
      "writtenOn": "2018-10-24T21:55:11Z",
      "side": 1,
      "message": "Buffer views are only used for the very advanced feature of texel buffers, where a buffer is seen as a linear 1D texture. You won\u0027t be able to use it before you do a vast amount of improvements to the shader compiler so I think it could be skipped for now.",
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efe081d9_13fe8ecf",
        "filename": "src/Vulkan/libVulkan.cpp",
        "patchSetId": 2
      },
      "lineNbr": 677,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-10-25T03:14:59Z",
      "side": 1,
      "message": "Alexis, I\u0027m assuming this is exercised by dEQP early on? If not I would agree with Corentin and usually recommend to not implement anything yet, even for seemingly simple stuff, although in this case it seems trivial enough to keep it.",
      "parentUuid": "058affab_82af7c9d",
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2ddfd4c_f9b718ff",
        "filename": "src/Vulkan/libVulkan.cpp",
        "patchSetId": 2
      },
      "lineNbr": 677,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-10-25T14:40:54Z",
      "side": 1,
      "message": "I understand the point, but it is required in Vulkan 1.1, so I\u0027m not sure what is to gain by holding off implementing this as a simple object for now. It\u0027s a part of vkUpdateDescriptorSets, for example, and I\u0027d like to have all objects available ASAP so that I can at least choose to ignore these objects within these calls rather than have to implement the whole thing the day I need them, if that\u0027s ok.",
      "parentUuid": "efe081d9_13fe8ecf",
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca7d8ade_36b84470",
        "filename": "src/Vulkan/libVulkan.cpp",
        "patchSetId": 2
      },
      "lineNbr": 677,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-10-25T15:25:30Z",
      "side": 1,
      "message": "I\u0027m ambivalent about it in this particular case, so don\u0027t worry about it, but in general it\u0027s a slippery slope to start implementing things partially even when known to be required. If that reasoning was applied to every layer of the implementation it\u0027s easy to end up with something large that is still practically untested and when issues are found it becomes a very big task to refactor. So we do need some of the functionality tested full-stack relatively early on even if that means ignoring (i.e. stubbing/hacking) parts that aren\u0027t ready yet.\n\nThat said, we definitely also need some breadth-first work like this too because otherwise we might end up with completely customized objects that have no consistency between them. So it\u0027s a bit of a balancing act between these two uncertainties. :-) Doing lots of spec reading, research, and diligent design work can help avoid mistakes.",
      "parentUuid": "c2ddfd4c_f9b718ff",
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5fdebefc_f2c6c57c",
        "filename": "src/Vulkan/libVulkan.cpp",
        "patchSetId": 2
      },
      "lineNbr": 677,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-10-25T15:52:32Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ca7d8ade_36b84470",
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75ac21e8_496e9c45",
        "filename": "src/Vulkan/libVulkan.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1335,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-10-24T19:28:57Z",
      "side": 1,
      "message": "nit: alignment change",
      "range": {
        "startLine": 1335,
        "startChar": 1,
        "endLine": 1335,
        "endChar": 2
      },
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41dd3825_80b2e1e8",
        "filename": "src/Vulkan/libVulkan.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1335,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-10-25T14:40:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "75ac21e8_496e9c45",
      "range": {
        "startLine": 1335,
        "startChar": 1,
        "endLine": 1335,
        "endChar": 2
      },
      "revId": "c12a3c5a45cc449017c8d903dc2c3f45555a2edb",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}