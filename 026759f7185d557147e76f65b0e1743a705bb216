{
  "comments": [
    {
      "key": {
        "uuid": "a16b97f6_e0ecbe49",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-03-15T13:00:16Z",
      "side": 1,
      "message": "I encountered this bug too while playing with b/128636885, so let\u0027s associate it with that.",
      "revId": "026759f7185d557147e76f65b0e1743a705bb216",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c9b2d3f_d76bf22f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-03-15T13:18:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a16b97f6_e0ecbe49",
      "revId": "026759f7185d557147e76f65b0e1743a705bb216",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe22e28c_d219959b",
        "filename": "src/Reactor/Reactor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-03-15T13:00:16Z",
      "side": 1,
      "message": "I don\u0027t think you need this since it\u0027s only ever going to represent bool.",
      "range": {
        "startLine": 128,
        "startChar": 1,
        "endLine": 138,
        "endChar": 3
      },
      "revId": "026759f7185d557147e76f65b0e1743a705bb216",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74432cf9_f776a676",
        "filename": "src/Reactor/Reactor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-03-15T13:15:59Z",
      "side": 1,
      "message": "I\u0027m not sure that\u0027s going to behave the same way?\n\nMy understanding of this code is to attempt to disable the constructors for types that do not match.\n\ne.g. BoolLiteral\u003cBool\u003e::type is a bool, but BoolLiteral\u003canything-else\u003e::type is a forward declared struct.\n\nIf I change the constructor to just RValue(bool) then any old RValue\u003cT\u003e will accept a bool - which doesn\u0027t seem right.",
      "parentUuid": "fe22e28c_d219959b",
      "range": {
        "startLine": 128,
        "startChar": 1,
        "endLine": 138,
        "endChar": 3
      },
      "revId": "026759f7185d557147e76f65b0e1743a705bb216",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e04a132_baaf4e80",
        "filename": "src/Reactor/Reactor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-03-15T14:25:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "74432cf9_f776a676",
      "range": {
        "startLine": 128,
        "startChar": 1,
        "endLine": 138,
        "endChar": 3
      },
      "revId": "026759f7185d557147e76f65b0e1743a705bb216",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46c9fd73_e5646dfa",
        "filename": "src/Reactor/Reactor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-03-15T13:00:16Z",
      "side": 1,
      "message": "bool b",
      "range": {
        "startLine": 183,
        "startChar": 9,
        "endLine": 183,
        "endChar": 40
      },
      "revId": "026759f7185d557147e76f65b0e1743a705bb216",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d85e3455_fe7ba3ef",
        "filename": "src/Reactor/Reactor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-03-15T14:25:27Z",
      "side": 1,
      "message": "Ah, yes, that suggestion is wrong since it will cause lots of ambiguous conversion attempts. Instead what I had working is to not have this line and just have a specialized inline definition for RValue\u003cBool\u003e::RValue(bool b), keeping IntLiteral\u003cBool\u003e and not needing BoolLiteral.\n\nI thought there would be a difference in allowing expressions such as RValue\u003cInt\u003e + bool, but that doesn\u0027t appear to be the case in practice... The compiler simply finds the RValue\u003cInt\u003e + RValue\u003cInt\u003e operator and converts the bool to an int itself before constructing an RValue\u003cInt\u003e out of it. I\u0027m not sure if there\u0027s any other practical difference.\n\nThe specialization is less code and keeps treating booleans as integers (which I think technically they are). Another way to fix this bug would be to have a createConstantInt(bool). Anyway, let\u0027s land this fix as-is and come back to this after Pastel 1.0.",
      "parentUuid": "46c9fd73_e5646dfa",
      "range": {
        "startLine": 183,
        "startChar": 9,
        "endLine": 183,
        "endChar": 40
      },
      "revId": "026759f7185d557147e76f65b0e1743a705bb216",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}