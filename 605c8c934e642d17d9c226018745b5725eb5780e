{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ff1b2909_c2a7f516",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 21,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-10-06T18:49:45Z",
      "side": 1,
      "message": "s/porformed/performed",
      "range": {
        "startLine": 21,
        "startChar": 57,
        "endLine": 21,
        "endChar": 66
      },
      "revId": "605c8c934e642d17d9c226018745b5725eb5780e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0821a6be_9b80e086",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 21,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-10-07T15:24:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ff1b2909_c2a7f516",
      "range": {
        "startLine": 21,
        "startChar": 57,
        "endLine": 21,
        "endChar": 66
      },
      "revId": "605c8c934e642d17d9c226018745b5725eb5780e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04cfaa37_e4e3493c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-10-02T01:43:36Z",
      "side": 1,
      "message": "Fixes rendering shadows in Unity, which uses 16-bit depth textures. I also tested floating-point depth textures with the hack later in the stack.",
      "revId": "605c8c934e642d17d9c226018745b5725eb5780e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62e9429d_7a64dcf8",
        "filename": "src/Device/Renderer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 352,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-10-02T14:34:34Z",
      "side": 1,
      "message": "Nit: style-wise, we usually put the default case at the end in other places in the codebase",
      "range": {
        "startLine": 351,
        "startChar": 0,
        "endLine": 352,
        "endChar": 102
      },
      "revId": "605c8c934e642d17d9c226018745b5725eb5780e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5eda0ea_e6ddf140",
        "filename": "src/Device/Renderer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 352,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-10-02T20:56:19Z",
      "side": 1,
      "message": "This code is supposed to be unreachable, so I wanted to avoid having it actually produce anything in Release, while also making sure the variable isn\u0027t left completely uninitialized in case we do inadvertently end up here.",
      "parentUuid": "62e9429d_7a64dcf8",
      "range": {
        "startLine": 351,
        "startChar": 0,
        "endLine": 352,
        "endChar": 102
      },
      "revId": "605c8c934e642d17d9c226018745b5725eb5780e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28ce1df5_add7d0ed",
        "filename": "src/Device/Renderer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 352,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-10-06T18:49:45Z",
      "side": 1,
      "message": "If it\u0027s left at the top, you should adda a \"break;\" even if UNSUPPORTED expands to something that the compiler knows cannot fallthrough.",
      "parentUuid": "d5eda0ea_e6ddf140",
      "range": {
        "startLine": 351,
        "startChar": 0,
        "endLine": 352,
        "endChar": 102
      },
      "revId": "605c8c934e642d17d9c226018745b5725eb5780e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62e05588_3e1be570",
        "filename": "src/Device/Renderer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 352,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-10-07T15:24:00Z",
      "side": 1,
      "message": "I\u0027ve changed it around to look more classical. It will actually leave the value at 0 in the \"impossible\" cases, thanks to DrawData being zero-initialized.",
      "parentUuid": "28ce1df5_add7d0ed",
      "range": {
        "startLine": 351,
        "startChar": 0,
        "endLine": 352,
        "endChar": 102
      },
      "revId": "605c8c934e642d17d9c226018745b5725eb5780e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc9eec0e_1d8b00a5",
        "filename": "src/Device/Renderer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 356,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-10-02T14:34:34Z",
      "side": 1,
      "message": "Nit: Could we instead give it a differentiating value, like 0? Not a big deal, the fall through just feels a bit odd here.",
      "range": {
        "startLine": 356,
        "startChar": 5,
        "endLine": 356,
        "endChar": 23
      },
      "revId": "605c8c934e642d17d9c226018745b5725eb5780e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3925486_a5594455",
        "filename": "src/Device/Renderer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 356,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-10-02T20:56:19Z",
      "side": 1,
      "message": "Same as above.",
      "parentUuid": "bc9eec0e_1d8b00a5",
      "range": {
        "startLine": 356,
        "startChar": 5,
        "endLine": 356,
        "endChar": 23
      },
      "revId": "605c8c934e642d17d9c226018745b5725eb5780e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48fe45f3_a5318a94",
        "filename": "src/Device/Renderer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 356,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-10-07T15:24:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d3925486_a5594455",
      "range": {
        "startLine": 356,
        "startChar": 5,
        "endLine": 356,
        "endChar": 23
      },
      "revId": "605c8c934e642d17d9c226018745b5725eb5780e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45a7f537_2563f761",
        "filename": "src/Pipeline/SetupRoutine.cpp",
        "patchSetId": 6
      },
      "lineNbr": 452,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-10-06T18:49:45Z",
      "side": 1,
      "message": "Remove double-quote?",
      "range": {
        "startLine": 452,
        "startChar": 8,
        "endLine": 452,
        "endChar": 9
      },
      "revId": "605c8c934e642d17d9c226018745b5725eb5780e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81243af8_4b588528",
        "filename": "src/Pipeline/SetupRoutine.cpp",
        "patchSetId": 6
      },
      "lineNbr": 452,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-10-07T15:24:00Z",
      "side": 1,
      "message": "This is a quote from the Vulkan spec. To clarify that this isn\u0027t an implementation-specific comment, we tent to use quotation marks. That said, I forgot the closing one. Fixed now.\n\nNote we\u0027ll often add a link to the spec as well, for cases where there\u0027s additional clarification to be found in it. In this case, the quote contains everything and there isn\u0027t a clean link to this specific formula, so I omitted it.",
      "parentUuid": "45a7f537_2563f761",
      "range": {
        "startLine": 452,
        "startChar": 8,
        "endLine": 452,
        "endChar": 9
      },
      "revId": "605c8c934e642d17d9c226018745b5725eb5780e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7cd4e65_c20e526c",
        "filename": "src/Pipeline/SetupRoutine.cpp",
        "patchSetId": 6
      },
      "lineNbr": 468,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-10-02T14:34:34Z",
      "side": 1,
      "message": "Shouldn\u0027t this portion of the math take exponent bias into account somewhere?",
      "range": {
        "startLine": 462,
        "startChar": 0,
        "endLine": 468,
        "endChar": 43
      },
      "revId": "605c8c934e642d17d9c226018745b5725eb5780e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d74aa200_297275ad",
        "filename": "src/Pipeline/SetupRoutine.cpp",
        "patchSetId": 6
      },
      "lineNbr": 468,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-10-02T20:56:19Z",
      "side": 1,
      "message": "It does. The more explicit calculations would look like:\n\nInt e0 \u003d ((As\u003cInt\u003e(Z0) \u0026 0x7F800000) \u003e\u003e 23) - 127;  // Signed exponent\n...\nInt e \u003d Max(Max(e0, e1), e2);\nr \u003d As\u003cFloat\u003e((e + 127) \u003c\u003c 23);  // 2.0^e\nr *\u003d (1.0f / (1 \u003c\u003c 23));  // Adjust for mantissa precision\n\nSo the bias and shift operations on the exponents cancel out. 8-)",
      "parentUuid": "d7cd4e65_c20e526c",
      "range": {
        "startLine": 462,
        "startChar": 0,
        "endLine": 468,
        "endChar": 43
      },
      "revId": "605c8c934e642d17d9c226018745b5725eb5780e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a07e2bed_1c63e42a",
        "filename": "src/Pipeline/SetupRoutine.cpp",
        "patchSetId": 6
      },
      "lineNbr": 488,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-10-06T18:49:45Z",
      "side": 1,
      "message": "Should be \"b/155302798\".\nAlso, do we need this TODO here? This code would not be removed nor modified when b/155302798 is completed, right?",
      "range": {
        "startLine": 488,
        "startChar": 23,
        "endLine": 488,
        "endChar": 32
      },
      "revId": "605c8c934e642d17d9c226018745b5725eb5780e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b00638be_45e3c38e",
        "filename": "src/Pipeline/SetupRoutine.cpp",
        "patchSetId": 6
      },
      "lineNbr": 488,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-10-07T15:24:00Z",
      "side": 1,
      "message": "Good catch. Thanks.\n\nIndeed the code itself wouldn\u0027t change, but the comment, which indicates an optimization opportunity, would be removed.",
      "parentUuid": "a07e2bed_1c63e42a",
      "range": {
        "startLine": 488,
        "startChar": 23,
        "endLine": 488,
        "endChar": 32
      },
      "revId": "605c8c934e642d17d9c226018745b5725eb5780e",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}