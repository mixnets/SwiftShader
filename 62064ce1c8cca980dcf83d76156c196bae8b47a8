{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "81607103_f831d166",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 78381
      },
      "writtenOn": "2021-10-29T07:27:15Z",
      "side": 1,
      "message": "It seems there\u0027s regression with 32bit packed formats. When I had a closer look I noticed something odd: these 32bit packed formats are the only ones that do bit expansion when converting the channels to 16 bit during texture sampling.\n\nFor example full 5 bit channel in A1R5G6B5_PACK16 becomes 0xf800 by shifting those five bits to the high bits of 16 bit uint. With A2R10G10B10_PACK32 full 10 bit channel is first shifted in a similar way, becoming 0xffc0. But then the high bits are repeated to lower bits (see a2r10g10b10Unpack function). I know this is how integers are usually converted to higher bit width, but why is it only done for the 32bit packed formats?\n\nAn easy way to fix regression would be to use 0xffff as a scale for the 32bit packed formats, but that sounds like a workaround for an issue somewhere else.",
      "revId": "62064ce1c8cca980dcf83d76156c196bae8b47a8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2fc0351_c5270531",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-10-30T08:29:28Z",
      "side": 1,
      "message": "Good observation! The reason for this difference is merely \"historical\". Direct3D 8 only had fixed-point pixel pipelines and CPUs were slow at floating-point. We later improved the filtering precision of formats with 8-bit components, and then for formats with smaller components, first by using the bit replication method to make 0xFFFF represent 1.0, and later by putting the bits in the high part of the vector elements and correcting the scaling in floating-point. We apparently initially left out formats with more than 8 bits per component, but eventually did have to improve the precision of A2R10G10B10 conversion as part of Vulkan 1.2 conformance (https://issuetracker.google.com/146633956), but it sufficed to use the bit replication method.\n\nLong story short, I think this format should now be handled the same way as the other ones. Please file a bug for it. Note a similar issue cropped up for blending: https://issuetracker.google.com/204322086.\n\nI\u0027m fine with using 0xFFFF as the scaling factor if that makes the tests pass. One complication with making changes that affect precision/rounding is that it may require \u0027rebasing\u0027 of expected results for Chrome, so it helps to keep these issues separate.",
      "parentUuid": "81607103_f831d166",
      "revId": "62064ce1c8cca980dcf83d76156c196bae8b47a8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c82c048b_995844c6",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 4
      },
      "lineNbr": 203,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-10-28T15:41:18Z",
      "side": 1,
      "message": "There\u0027s no need to clamp here. The input can\u0027t be negative.",
      "range": {
        "startLine": 203,
        "startChar": 10,
        "endLine": 203,
        "endChar": 13
      },
      "revId": "62064ce1c8cca980dcf83d76156c196bae8b47a8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c78153f_2fb9594d",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 4
      },
      "lineNbr": 203,
      "author": {
        "id": 78381
      },
      "writtenOn": "2021-10-29T04:34:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c82c048b_995844c6",
      "range": {
        "startLine": 203,
        "startChar": 10,
        "endLine": 203,
        "endChar": 13
      },
      "revId": "62064ce1c8cca980dcf83d76156c196bae8b47a8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}