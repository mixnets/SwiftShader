#!amber
# Copyright 2019 The Amber Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

SHADER vertex vtex_shader SPIRV-ASM
; SPIR-V
; Version: 1.0
; Generator: Google spiregg; 0
; Bound: 38
; Schema: 0
               OpCapability Shader
     %DbgExt = OpExtInstImport "OpenCL.DebugInfo.100"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Vertex %main "main" %in_var_POSITION %in_var_COLOR %gl_Position %out_var_COLOR
          %6 = OpString "simple_vs.hlsl"
        %src = OpString "#line 1 \"simple_vs.hlsl\"
struct VS_OUTPUT {
  float4 pos : SV_POSITION;
  float4 color : COLOR;
};

VS_OUTPUT main(float4 pos : POSITION,
               float4 color : COLOR) {
  VS_OUTPUT vout;
  vout.pos = pos;
  vout.color = color;
  return vout;
}
"
               OpSource HLSL 600 %6 "#line 1 \"simple_vs.hlsl\"
struct VS_OUTPUT {
  float4 pos : SV_POSITION;
  float4 color : COLOR;
};

VS_OUTPUT main(float4 pos : POSITION,
               float4 color : COLOR) {
  VS_OUTPUT vout;
  vout.pos = pos;
  vout.color = color;
  return vout;
}
"
               OpName %in_var_POSITION "in.var.POSITION"
               OpName %in_var_COLOR "in.var.COLOR"
               OpName %out_var_COLOR "out.var.COLOR"
               OpName %main "main"
               OpName %param_var_pos "param.var.pos"
               OpName %param_var_color "param.var.color"
               OpName %VS_OUTPUT "VS_OUTPUT"
               OpMemberName %VS_OUTPUT 0 "pos"
               OpMemberName %VS_OUTPUT 1 "color"
               OpName %src_main "src.main"
               OpName %pos "pos"
               OpName %color "color"
               OpName %bb_entry "bb.entry"
               OpName %vout "vout"
               OpDecorate %gl_Position BuiltIn Position
               OpDecorate %in_var_POSITION Location 0
               OpDecorate %in_var_COLOR Location 1
               OpDecorate %out_var_COLOR Location 0
        %int = OpTypeInt 32 1
      %int_0 = OpConstant %int 0
      %int_1 = OpConstant %int 1
      %float = OpTypeFloat 32
    %v4float = OpTypeVector %float 4
%_ptr_Input_v4float = OpTypePointer Input %v4float
%_ptr_Output_v4float = OpTypePointer Output %v4float
       %void = OpTypeVoid
         %15 = OpTypeFunction %void
%_ptr_Function_v4float = OpTypePointer Function %v4float
  %VS_OUTPUT = OpTypeStruct %v4float %v4float
         %27 = OpTypeFunction %VS_OUTPUT %_ptr_Function_v4float %_ptr_Function_v4float
%_ptr_Function_VS_OUTPUT = OpTypePointer Function %VS_OUTPUT

; Compilation Unit
%dbg_src = OpExtInst %void %DbgExt DebugSource %6 %src
%comp_unit = OpExtInst %void %DbgExt DebugCompilationUnit 2 4 %dbg_src HLSL

; Type names
%VS_OUTPUT_name = OpString "struct VS_OUTPUT"
%VS_OUTPUT_linkage_name = OpString "struct_VS_OUTPUT_v4f_v4f"
%float_name = OpString "float"
%VS_OUTPUT_pos_name = OpString "pos : SV_POSITION"
%VS_OUTPUT_color_name = OpString "color : COLOR"
%main_name = OpString "main"
%main_linkage_name = OpString "VS_OUTPUT_main_v4f_v4f"
%pos_name = OpString "pos : POSITION"
%color_name = OpString "color : COLOR"
%vout_name = OpString "vout"

; Type sizes in bit unit. For example, 128 means "128 bits"
%int_32 = OpConstant %int 32
%int_128 = OpConstant %int 128

; Type information
; %VS_OUTPUT_info and %VS_OUTPUT_pos_info have cycling reference
%VS_OUTPUT_info = OpExtInst %void %DbgExt DebugTypeComposite %VS_OUTPUT_name Structure %dbg_src 1 1 %comp_unit %VS_OUTPUT_linkage_name %int_128 FlagIsPublic %VS_OUTPUT_pos_info %VS_OUTPUT_color_info
%float_info = OpExtInst %void %DbgExt DebugTypeBasic %float_name %int_32 Float
%v4float_info = OpExtInst %void %DbgExt DebugTypeVector %float_info 4
%VS_OUTPUT_pos_info = OpExtInst %void %DbgExt DebugTypeMember %VS_OUTPUT_pos_name %v4float_info %dbg_src 2 3 %VS_OUTPUT_info %int_0 %int_128 FlagIsPublic
%VS_OUTPUT_color_info = OpExtInst %void %DbgExt DebugTypeMember %VS_OUTPUT_color_name %v4float_info %dbg_src 3 3 %VS_OUTPUT_info %int_128 %int_128 FlagIsPublic
%main_type_info = OpExtInst %void %DbgExt DebugTypeFunction FlagIsPublic %VS_OUTPUT_info %v4float_info %v4float_info

; DebugExpression without any information
%null_expr = OpExtInst %void %DbgExt DebugExpression

; Function information
%main_info = OpExtInst %void %DbgExt DebugFunction %main_name %main_type_info %dbg_src 6 1 %comp_unit %main_linkage_name FlagIsPublic 7 %src_main

; Local variable information
%pos_info = OpExtInst %void %DbgExt DebugLocalVariable %pos_name %v4float_info %dbg_src 6 16 %main_info FlagIsLocal 0
%color_info = OpExtInst %void %DbgExt DebugLocalVariable %color_name %v4float_info %dbg_src 7 16 %main_info FlagIsLocal 1
%vout_info = OpExtInst %void %DbgExt DebugLocalVariable %vout_name %VS_OUTPUT_info %dbg_src 8 3 %main_info FlagIsLocal

               OpLine %6 6 29
%in_var_POSITION = OpVariable %_ptr_Input_v4float Input

; Declaration of "float4 pos : POSITION" argument of main()
%pos_decl = OpExtInst %void %DbgExt DebugDeclare %pos_info %in_var_POSITION %null_expr

               OpLine %6 7 31
%in_var_COLOR = OpVariable %_ptr_Input_v4float Input

; Declaration of "float4 color : COLOR" argument of main()
%color_decl = OpExtInst %void %DbgExt DebugDeclare %color_info %in_var_COLOR %null_expr

               OpLine %6 2 16
%gl_Position = OpVariable %_ptr_Output_v4float Output
               OpLine %6 3 18
%out_var_COLOR = OpVariable %_ptr_Output_v4float Output
               OpLine %6 6 1
       %main = OpFunction %void None %15
         %16 = OpLabel
               OpLine %6 6 23
%param_var_pos = OpVariable %_ptr_Function_v4float Function
               OpLine %6 7 23
%param_var_color = OpVariable %_ptr_Function_v4float Function
               OpLine %6 6 23
         %20 = OpLoad %v4float %in_var_POSITION
               OpStore %param_var_pos %20
               OpLine %6 7 23
         %21 = OpLoad %v4float %in_var_COLOR
               OpStore %param_var_color %21
               OpLine %6 6 1
         %23 = OpFunctionCall %VS_OUTPUT %src_main %param_var_pos %param_var_color
               OpLine %6 6 11
         %25 = OpCompositeExtract %v4float %23 0
               OpLine %6 2 16
               OpStore %gl_Position %25
               OpLine %6 6 11
         %26 = OpCompositeExtract %v4float %23 1
               OpLine %6 3 18
               OpStore %out_var_COLOR %26
               OpReturn
               OpFunctionEnd
               OpLine %6 6 1
   %src_main = OpFunction %VS_OUTPUT None %27
               OpLine %6 6 23
        %pos = OpFunctionParameter %_ptr_Function_v4float
               OpLine %6 7 23
      %color = OpFunctionParameter %_ptr_Function_v4float
   %bb_entry = OpLabel

; Start the scope of function "main()"
%main_scope = OpExtInst %void %DbgExt DebugScope %main_info

               OpLine %6 8 13
       %vout = OpVariable %_ptr_Function_VS_OUTPUT Function

; Declaration of "VS_OUTPUT vout" local variable in main()
%vout_decl = OpExtInst %void %DbgExt DebugDeclare %vout_info %vout %null_expr

               OpLine %6 9 14
         %33 = OpLoad %v4float %pos
               OpLine %6 9 3
         %34 = OpAccessChain %_ptr_Function_v4float %vout %int_0

; Tracking value of "float4 pos : SV_POSITION" member of "vout"
%vout_pos_value = OpExtInst %void %DbgExt DebugValue %vout_info %34 %null_expr %int_0

               OpStore %34 %33
               OpLine %6 10 16
         %35 = OpLoad %v4float %color
               OpLine %6 10 3
         %36 = OpAccessChain %_ptr_Function_v4float %vout %int_1

; Tracking value of "float4 color : COLOR" member of "vout"
%vout_color_value = OpExtInst %void %DbgExt DebugValue %vout_info %36 %null_expr %int_1

               OpStore %36 %35
               OpLine %6 11 10
         %37 = OpLoad %VS_OUTPUT %vout
               OpLine %6 11 3
               OpReturnValue %37

; End the scope of function "main()"
%main_scope_end = OpExtInst %void %DbgExt DebugNoScope

               OpFunctionEnd
END

SHADER fragment frag_shader SPIRV-ASM
; SPIR-V
; Version: 1.0
; Generator: Google spiregg; 0
; Bound: 21
; Schema: 0
               OpCapability Shader
     %DbgExt = OpExtInstImport "OpenCL.DebugInfo.100"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %main "main" %in_var_COLOR %out_var_SV_TARGET
               OpExecutionMode %main OriginUpperLeft
          %4 = OpString "simple_ps.hlsl"
        %src = OpString "#line 1 \"simple_ps.hlsl\"
float4 main(float4 color : COLOR) : SV_TARGET {
  return color;
}
"
               OpSource HLSL 600 %4 "#line 1 \"simple_ps.hlsl\"
float4 main(float4 color : COLOR) : SV_TARGET {
  return color;
}
"
               OpName %in_var_COLOR "in.var.COLOR"
               OpName %out_var_SV_TARGET "out.var.SV_TARGET"
               OpName %main "main"
               OpName %param_var_color "param.var.color"
               OpName %src_main "src.main"
               OpName %color "color"
               OpName %bb_entry "bb.entry"
               OpDecorate %in_var_COLOR Location 0
               OpDecorate %out_var_SV_TARGET Location 0
        %int = OpTypeInt 32 1
      %float = OpTypeFloat 32
    %v4float = OpTypeVector %float 4
%_ptr_Input_v4float = OpTypePointer Input %v4float
%_ptr_Output_v4float = OpTypePointer Output %v4float
       %void = OpTypeVoid
         %10 = OpTypeFunction %void
%_ptr_Function_v4float = OpTypePointer Function %v4float
         %17 = OpTypeFunction %v4float %_ptr_Function_v4float

; Compilation Unit
%dbg_src = OpExtInst %void %DbgExt DebugSource %4 %src
%comp_unit = OpExtInst %void %DbgExt DebugCompilationUnit 2 4 %dbg_src HLSL

; Type names
%float_name = OpString "float"
%main_name = OpString "main"
%main_linkage_name = OpString "v4f_main_v4f"
%color_name = OpString "color : COLOR"

; Type sizes in bit unit. For example, 128 means "128 bits"
%int_32 = OpConstant %int 32
%int_128 = OpConstant %int 128

; Type information
%float_info = OpExtInst %void %DbgExt DebugTypeBasic %float_name %int_32 Float
%v4float_info = OpExtInst %void %DbgExt DebugTypeVector %float_info 4
%main_type_info = OpExtInst %void %DbgExt DebugTypeFunction FlagIsPublic %v4float_info %v4float_info

; DebugExpression without any information
%null_expr = OpExtInst %void %DbgExt DebugExpression

; Function information
%main_info = OpExtInst %void %DbgExt DebugFunction %main_name %main_type_info %dbg_src 1 1 %comp_unit %main_linkage_name FlagIsPublic 1 %src_main

; Local variable information
%color_info = OpExtInst %void %DbgExt DebugLocalVariable %color_name %v4float_info %dbg_src 1 13 %main_info FlagIsLocal 0

               OpLine %4 1 28
%in_var_COLOR = OpVariable %_ptr_Input_v4float Input

; Declaration of "float4 color : COLOR" argument of main()
%color_decl = OpExtInst %void %DbgExt DebugDeclare %color_info %in_var_COLOR %null_expr

               OpLine %4 1 37
%out_var_SV_TARGET = OpVariable %_ptr_Output_v4float Output
               OpLine %4 1 1
       %main = OpFunction %void None %10
         %11 = OpLabel

; Start the scope of function "main()"
%main_scope = OpExtInst %void %DbgExt DebugScope %main_info

               OpLine %4 1 20
%param_var_color = OpVariable %_ptr_Function_v4float Function
         %14 = OpLoad %v4float %in_var_COLOR
               OpStore %param_var_color %14
               OpLine %4 1 1
         %15 = OpFunctionCall %v4float %src_main %param_var_color
               OpLine %4 1 37
               OpStore %out_var_SV_TARGET %15
               OpReturn
               OpFunctionEnd
               OpLine %4 1 1
   %src_main = OpFunction %v4float None %17
               OpLine %4 1 20
      %color = OpFunctionParameter %_ptr_Function_v4float
   %bb_entry = OpLabel
               OpLine %4 2 10
         %20 = OpLoad %v4float %color
               OpLine %4 2 3
               OpReturnValue %20

; End the scope of function "main()"
%main_scope_end = OpExtInst %void %DbgExt DebugNoScope

               OpFunctionEnd
END

BUFFER position_buf DATA_TYPE R8G8_SNORM DATA
# Full frame
-128 -128
 127  127
-128  127
-128 -128
 127  127
 127 -128

# Half frame
   0 -128
 127  127
   0  127
   0 -128
 127  127
 127 -128

# Quarter frame
-128    0
   0  127
-128  127
-128    0
   0  127
   0    0

# Quarter frame
   0    0
 127  127
   0  127
   0    0
 127  127
 127    0
END

BUFFER vert_color DATA_TYPE R8G8B8A8_UNORM DATA
255   0   0 255
255   0   0 255
255   0   0 255
255   0   0 255
255   0   0 255
255   0   0 255

  0 255   0 255
  0 255   0 255
  0 255   0 255
  0 255   0 255
  0 255   0 255
  0 255   0 255

  0   0 255 255
  0   0 255 255
  0   0 255 255
  0   0 255 255
  0   0 255 255
  0   0 255 255

127 127 127 255
127 127 127 255
127 127 127 255
127 127 127 255
127 127 127 255
127 127 127 255
END

BUFFER framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics pipeline
  ATTACH vtex_shader
  ATTACH frag_shader

  VERTEX_DATA position_buf LOCATION 0
  VERTEX_DATA vert_color LOCATION 1

  BIND BUFFER framebuffer AS color LOCATION 0
END

CLEAR pipeline

RUN pipeline DRAW_ARRAY AS TRIANGLE_LIST START_IDX 0 COUNT 6
EXPECT framebuffer IDX 0 0 SIZE 250 250 EQ_RGB 255 0 0

RUN pipeline DRAW_ARRAY AS TRIANGLE_LIST START_IDX 6 COUNT 6
EXPECT framebuffer IDX   0 0 SIZE 125 250 EQ_RGB 255   0 0
EXPECT framebuffer IDX 125 0 SIZE 125 250 EQ_RGB 0   255 0

RUN pipeline DRAW_ARRAY AS TRIANGLE_LIST START_IDX 12 COUNT 6
EXPECT framebuffer IDX   0   0 SIZE 125 125 EQ_RGB 255   0   0
EXPECT framebuffer IDX 125   0 SIZE 125 250 EQ_RGB 0   255   0
EXPECT framebuffer IDX   0 125 SIZE 125 125 EQ_RGB 0     0 255

RUN pipeline DRAW_ARRAY AS TRIANGLE_LIST START_IDX 18 COUNT 6
EXPECT framebuffer IDX   0   0 SIZE 125 125 EQ_RGB 255   0   0
EXPECT framebuffer IDX 125   0 SIZE 125 125 EQ_RGB 0   255   0
EXPECT framebuffer IDX   0 125 SIZE 125 125 EQ_RGB 0     0 255
EXPECT framebuffer IDX 125 125 SIZE 125 125 EQ_RGB 127 127 127
