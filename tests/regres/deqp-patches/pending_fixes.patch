 .../vulkan/texture/vktTextureConversionTests.cpp   | 32 ++++++++++++++++------
 .../modules/vulkan/ycbcr/vktYCbCrViewTests.cpp     | 27 ++++++------------
 2 files changed, 32 insertions(+), 27 deletions(-)

diff --git a/external/vulkancts/modules/vulkan/texture/vktTextureConversionTests.cpp b/external/vulkancts/modules/vulkan/texture/vktTextureConversionTests.cpp
index 1fe7c8e62..6038031de 100644
--- a/external/vulkancts/modules/vulkan/texture/vktTextureConversionTests.cpp
+++ b/external/vulkancts/modules/vulkan/texture/vktTextureConversionTests.cpp
@@ -32,6 +32,7 @@
 #include "tcuVectorUtil.hpp"
 #include "deSharedPtr.hpp"
 
+#include <cmath>
 #include <memory>
 
 namespace vkt
@@ -62,6 +63,7 @@ public:
 	virtual tcu::TestStatus	iterate						(void) override;
 
 protected:
+	tcu::IVec4				computeColorDistance		() const;
 	bool					verifyPixels				(const tcu::PixelBufferAccess&	rendered,
 														 const tcu::PixelBufferAccess&	reference,
 														 const ReferenceParams&			samplerParams,
@@ -78,6 +80,7 @@ private:
 	tcu::Texture2D				m_swTexture;
 	TextureRenderer				m_renderer;
 
+	const tcu::IVec4			m_cd;
 	const tcu::IVec4			m_a;
 	const tcu::IVec4			m_b;
 	const tcu::IVec4			m_c;
@@ -96,10 +99,11 @@ SnormLinearClampInstance::SnormLinearClampInstance (vkt::Context& context, de::S
 	, m_hwTexture	(TestTexture2DSp(new pipeline::TestTexture2D(m_inFormat, textureWidth, textureHeight)))
 	, m_swTexture	(m_inFormat, textureWidth, textureHeight, 1)
 	, m_renderer	(context, VK_SAMPLE_COUNT_1_BIT, m_params->width, m_params->height, 1u, makeComponentMappingRGBA(), VK_IMAGE_TYPE_2D, VK_IMAGE_VIEW_TYPE_2D, m_outFormat)
-	, m_a			(lim(m_inFormat, 0),	lim(m_inFormat, 1)+2,	lim(m_inFormat, 2),		lim(m_inFormat, 3)+2)
-	, m_b			(lim(m_inFormat, 0)+2,	lim(m_inFormat, 1),		lim(m_inFormat, 2)+2,	lim(m_inFormat, 3)	)
-	, m_c			(lim(m_inFormat, 0)+1,	lim(m_inFormat, 1)+1,	lim(m_inFormat, 2)+1,	lim(m_inFormat, 3)+1)
-	, m_d			(lim(m_inFormat, 0),	lim(m_inFormat, 1),		lim(m_inFormat, 2),		lim(m_inFormat, 3)	)
+	, m_cd			(computeColorDistance())
+	, m_a			(lim(m_inFormat, 0),			lim(m_inFormat, 1)+m_cd[1]*2,	lim(m_inFormat, 2),				lim(m_inFormat, 3)+m_cd[3]*2)
+	, m_b			(lim(m_inFormat, 0)+m_cd[0]*2,	lim(m_inFormat, 1),				lim(m_inFormat, 2)+m_cd[2]*2,	lim(m_inFormat, 3)			)
+	, m_c			(lim(m_inFormat, 0)+m_cd[0]*1,	lim(m_inFormat, 1)+m_cd[1]*1,	lim(m_inFormat, 2)+m_cd[2]*1,	lim(m_inFormat, 3)+m_cd[3]*1)
+	, m_d			(lim(m_inFormat, 0),			lim(m_inFormat, 1),				lim(m_inFormat, 2),				lim(m_inFormat, 3)			)
 {
 	tcu::IVec4 data[textureWidth * textureHeight] =
 	{
@@ -135,6 +139,17 @@ int SnormLinearClampInstance::lim (const tcu::TextureFormat& format, int channel
 	return channelBits[channelIdx] ? (-deIntMaxValue32(channelBits[channelIdx])) : (-1);
 }
 
+tcu::IVec4 SnormLinearClampInstance::computeColorDistance () const
+{
+	return tcu::IVec4
+	(
+		static_cast<int>(std::floor(static_cast<float>(-lim(m_inFormat, 0)) / 127.0f)),
+		static_cast<int>(std::floor(static_cast<float>(-lim(m_inFormat, 0)) / 127.0f)),
+		static_cast<int>(std::floor(static_cast<float>(-lim(m_inFormat, 0)) / 127.0f)),
+		static_cast<int>(std::floor(static_cast<float>(-lim(m_inFormat, 0)) / 127.0f))
+	);
+}
+
 bool SnormLinearClampInstance::verifyPixels	(const tcu::PixelBufferAccess& rendered, const tcu::PixelBufferAccess& reference, const ReferenceParams& samplerParams, const std::vector<float>& texCoords) const
 {
 	tcu::LodPrecision				lodPrec;
@@ -144,6 +159,7 @@ bool SnormLinearClampInstance::verifyPixels	(const tcu::PixelBufferAccess& rende
 	const int						width			(m_renderer.getRenderWidth());
 	const int						height			(m_renderer.getRenderHeight());
 
+	const tcu::IVec4				colorDistance	(computeColorDistance());
 	std::unique_ptr<deUint8[]>		errorMaskData	(new deUint8[width * height * 4 * 4]);
 	tcu::PixelBufferAccess			errorMask		(mapVkFormat(m_outFormat), width, height, 1, errorMaskData.get());
 
@@ -154,10 +170,10 @@ bool SnormLinearClampInstance::verifyPixels	(const tcu::PixelBufferAccess& rende
 	lookupPrec.uvwBits				= tcu::IVec3(5,5,0);
 	lookupPrec.coordBits			= tcu::IVec3(20,20,0);
 	lookupPrec.colorMask			= tcu::BVec4(nuc >= 1, nuc >= 2, nuc >=3, nuc >= 4);
-	lookupPrec.colorThreshold		= tcu::Vec4(0.9f/float(-lim(m_inFormat, 0)),
-												0.9f/float(-lim(m_inFormat, 1)),
-												0.9f/float(-lim(m_inFormat, 2)),
-												0.9f/float(-lim(m_inFormat, 3)));
+	lookupPrec.colorThreshold		= tcu::Vec4(0.9f/float(colorDistance[0]),
+												0.9f/float(colorDistance[1]),
+												0.9f/float(colorDistance[2]),
+												0.9f/float(colorDistance[3]));
 
 	const int numFailedPixels		= glu::TextureTestUtil::computeTextureLookupDiff(rendered, reference, errorMask,
 																					 m_swTexture, texCoords.data(), samplerParams,
diff --git a/external/vulkancts/modules/vulkan/ycbcr/vktYCbCrViewTests.cpp b/external/vulkancts/modules/vulkan/ycbcr/vktYCbCrViewTests.cpp
index fd4ed135a..1734b5f12 100644
--- a/external/vulkancts/modules/vulkan/ycbcr/vktYCbCrViewTests.cpp
+++ b/external/vulkancts/modules/vulkan/ycbcr/vktYCbCrViewTests.cpp
@@ -392,32 +392,21 @@ void generateLookupCoordinates (const UVec2& imageSize, size_t numCoords, de::Ra
 	}
 }
 
-void checkImageUsageSupport (Context&			context,
-							 VkFormat			format,
-							 VkImageUsageFlags	usage)
+void checkImageFeatureSupport (Context& context, VkFormat format, VkFormatFeatureFlags req)
 {
-	const VkFormatProperties	formatProperties	= getPhysicalDeviceFormatProperties(context.getInstanceInterface(),
-																						context.getPhysicalDevice(),
-																						format);
-	const VkFormatFeatureFlags	featureFlags		= formatProperties.optimalTilingFeatures;
+	const VkFormatProperties formatProperties = getPhysicalDeviceFormatProperties(	context.getInstanceInterface(),
+																					context.getPhysicalDevice(),
+																					format);
 
-	if ((usage & VK_IMAGE_USAGE_SAMPLED_BIT) != 0
-		&& (featureFlags & VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT) == 0)
-	{
-		TCU_THROW(NotSupportedError, "Format doesn't support sampling");
-	}
-
-	// Other image usages are not handled currently
-	DE_ASSERT((usage & ~(VK_IMAGE_USAGE_TRANSFER_SRC_BIT|VK_IMAGE_USAGE_TRANSFER_DST_BIT|VK_IMAGE_USAGE_SAMPLED_BIT)) == 0);
+	if (req & ~formatProperties.optimalTilingFeatures)
+		TCU_THROW(NotSupportedError, "Format doesn't support required features");
 }
 
 void checkSupport(Context& context, TestParameters params)
 {
-	const VkImageUsageFlags usage = VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT;
-
 	checkImageSupport(context, params.format, params.createFlags);
-	checkImageUsageSupport(context, params.format, usage);
-	checkImageUsageSupport(context, params.planeCompatibleFormat, usage);
+	checkImageFeatureSupport(context, params.format,				VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT);
+	checkImageFeatureSupport(context, params.planeCompatibleFormat,	VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT);
 }
 
 tcu::TestStatus testPlaneView (Context& context, TestParameters params)
