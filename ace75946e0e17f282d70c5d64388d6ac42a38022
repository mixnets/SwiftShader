{
  "comments": [
    {
      "key": {
        "uuid": "b792ab84_b2b92f6b",
        "filename": "src/Pipeline/SpirvShaderGroup.cpp",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-12-05T17:04:22Z",
      "side": 1,
      "message": "Alignment still not using whitespace.",
      "range": {
        "startLine": 29,
        "startChar": 1,
        "endLine": 29,
        "endChar": 8
      },
      "revId": "ace75946e0e17f282d70c5d64388d6ac42a38022",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed307494_05a23e14",
        "filename": "src/Pipeline/SpirvShaderGroup.cpp",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-12-05T17:04:22Z",
      "side": 1,
      "message": "Weird indent here.",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 35,
        "endChar": 3
      },
      "revId": "ace75946e0e17f282d70c5d64388d6ac42a38022",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f4a1545_58b17213",
        "filename": "src/Pipeline/SpirvShaderGroup.cpp",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-12-05T17:04:22Z",
      "side": 1,
      "message": "While these operators are commutative, this is okay, but perhaps maybe adjust the swizzles so that they\u0027re in order?\n\n  TYPE v2 \u003d apply(v.xxzz,  v.yyww);  // [xy]   [xy]   [zw]   [zw]\n  TYPE v3 \u003d apply(v2.xxxx, v2.zzzz); // [xyzw] [xyzw] [xyzw] [xyzw]\n\nThen I don\u0027t think you need the whole is_same logic.",
      "range": {
        "startLine": 46,
        "startChar": 51,
        "endLine": 46,
        "endChar": 53
      },
      "revId": "ace75946e0e17f282d70c5d64388d6ac42a38022",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce6a46aa_8a576c91",
        "filename": "src/Pipeline/SpirvShaderGroup.cpp",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-12-05T17:43:17Z",
      "side": 1,
      "message": "Good idea. Done.",
      "parentUuid": "7f4a1545_58b17213",
      "range": {
        "startLine": 46,
        "startChar": 51,
        "endLine": 46,
        "endChar": 53
      },
      "revId": "ace75946e0e17f282d70c5d64388d6ac42a38022",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a69f25a7_ea9e40e6",
        "filename": "src/Pipeline/SpirvShaderGroup.cpp",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-12-05T17:04:22Z",
      "side": 1,
      "message": "Perhaps it\u0027s just me, but this is backwards from how I\u0027ve used swizzles / blends before, and took me a good 5 minutes to realize what was going on. I\u0027d have expected:\n\n  TYPE v2 \u003d apply(v,  Swizzle(v,  identity, 0x4012 /* [ident, v.y,   v.z, v.w] */) // [x] [yx] [zy]  [wz]\n  TYPE v3 \u003d apply(v2, Swizzle(v2, identity, 0x4401 /* [ident, ident, v.z, v.w] */) // [x] [yx] [zyx] [wzyx]",
      "range": {
        "startLine": 60,
        "startChar": 24,
        "endLine": 60,
        "endChar": 51
      },
      "revId": "ace75946e0e17f282d70c5d64388d6ac42a38022",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c04b189_8c3ea5e9",
        "filename": "src/Pipeline/SpirvShaderGroup.cpp",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-12-05T17:16:08Z",
      "side": 1,
      "message": "And clearly, I\u0027ve screwed up the comment on v3. Let\u0027s try that again:\n\n  TYPE v2 \u003d apply(v,  Swizzle(v,  identity, 0x4012 /* [ident, v.y,    v.z,  v.w] */) // [x] [yx] [zy]  [wz]\n  TYPE v3 \u003d apply(v2, Swizzle(v2, identity, 0x4401 /* [ident, ident, v2.x, v2.y] */) // [x] [yx] [zyx] [wzyx]",
      "parentUuid": "a69f25a7_ea9e40e6",
      "range": {
        "startLine": 60,
        "startChar": 24,
        "endLine": 60,
        "endChar": 51
      },
      "revId": "ace75946e0e17f282d70c5d64388d6ac42a38022",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d470427_fcd2a685",
        "filename": "src/Pipeline/SpirvShaderGroup.cpp",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-12-05T17:43:17Z",
      "side": 1,
      "message": "I agree that this is much more readable. I\u0027ve fixed it and documented the fact that the indices are in reverse order compared to Swizzle4\u003c\u003e select values.",
      "parentUuid": "7c04b189_8c3ea5e9",
      "range": {
        "startLine": 60,
        "startChar": 24,
        "endLine": 60,
        "endChar": 51
      },
      "revId": "ace75946e0e17f282d70c5d64388d6ac42a38022",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "777b83e9_34648bdc",
        "filename": "src/Pipeline/SpirvShaderGroup.cpp",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-12-05T18:13:24Z",
      "side": 1,
      "message": "\u003e documented the fact that the indices are in reverse order compared to Swizzle4\u003c\u003e select values.\n\n\nargh, I didn\u0027t even realize this. Swizzle uses a single char, which requires some good mental arithmetic. I\u0027ve created b/145746360 to propose that we migrate Swizzle() to use this form, as I think it is significantly easier to understand.",
      "parentUuid": "6d470427_fcd2a685",
      "range": {
        "startLine": 60,
        "startChar": 24,
        "endLine": 60,
        "endChar": 51
      },
      "revId": "ace75946e0e17f282d70c5d64388d6ac42a38022",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb013e3f_926a6d3f",
        "filename": "src/Reactor/Reactor.hpp",
        "patchSetId": 4
      },
      "lineNbr": 2034,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-12-05T18:13:24Z",
      "side": 1,
      "message": "Ãœbernit: I prefer to see properly sized integer types (uint16_t) over \u0027char\u0027 and \u0027short\u0027, but I get that reactor doesn\u0027t do much of this.",
      "range": {
        "startLine": 2034,
        "startChar": 55,
        "endLine": 2034,
        "endChar": 69
      },
      "revId": "ace75946e0e17f282d70c5d64388d6ac42a38022",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "799a05f6_1a6ba764",
        "filename": "src/Reactor/Reactor.hpp",
        "patchSetId": 4
      },
      "lineNbr": 2034,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-12-05T21:31:21Z",
      "side": 1,
      "message": "Yes, I\u0027m exactly like you but I tried to follow Reactor\u0027s current coding style :)",
      "parentUuid": "cb013e3f_926a6d3f",
      "range": {
        "startLine": 2034,
        "startChar": 55,
        "endLine": 2034,
        "endChar": 69
      },
      "revId": "ace75946e0e17f282d70c5d64388d6ac42a38022",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}