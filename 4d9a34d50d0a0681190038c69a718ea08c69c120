{
  "comments": [
    {
      "key": {
        "uuid": "5dac0c13_8d1645d1",
        "filename": "src/Device/PixelProcessor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-12-17T15:56:37Z",
      "side": 1,
      "message": "Might just be me, but I find the implicit replicate from T to vec\u003cT\u003e here rather obfuscated, especially as the LHS is an index, which could be read as a vector-index (assigning to say vec4.x).\n\nIn terms of readability, I\u0027d personally prefer to see:\n\n  factor.blendConstant4W[0] \u003d short4(static_cast\u003cuint16_t\u003e(iround(0xFFFFu * blendConstant.r)));\n\nThis style can be forced by deleting the assignment operator for T:\n\n    // Require explicit use of replicate constructor.\n    vec\u0026 operator\u003d(T) \u003d delete;\n\nI get that this sort of undoes the implicitness you went for in 39629, which I actually quite liked.",
      "range": {
        "startLine": 66,
        "startChar": 27,
        "endLine": 66,
        "endChar": 86
      },
      "revId": "4d9a34d50d0a0681190038c69a718ea08c69c120",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d9cadcc_f34895c9",
        "filename": "src/Pipeline/Constants.cpp",
        "patchSetId": 1
      },
      "lineNbr": 251,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-12-17T16:00:03Z",
      "side": 1,
      "message": "I think this is wrong, which sort of highlights that maybe it should be more explicit, like:\nmask5551Q[i].replicate((i \u0026 0x1 ? 0x001F : 0) | (i \u0026 0x2 ? 0x03E0 : 0) | (i \u0026 0x4 ? 0x7C00 : 0) | (i \u0026 8 ? 0x8000 : 0));",
      "range": {
        "startLine": 251,
        "startChar": 14,
        "endLine": 251,
        "endChar": 17
      },
      "revId": "4d9a34d50d0a0681190038c69a718ea08c69c120",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    }
  ]
}