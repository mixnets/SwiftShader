{
  "comments": [
    {
      "key": {
        "uuid": "bc5a7e0a_6dcc0d41",
        "filename": "src/Vulkan/VkFramebuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-01-25T23:03:19Z",
      "side": 1,
      "message": "Do the RenderPass attachment definitions and the Framebuffer attachments match? I\u0027m not sure about this part.",
      "range": {
        "startLine": 43,
        "startChar": 59,
        "endLine": 43,
        "endChar": 109
      },
      "revId": "f3c2bbfbb2f1c52ab907e76e9c6624e5170157a0",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1cccf27_6e1fb544",
        "filename": "src/Vulkan/VkFramebuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-01-25T23:06:01Z",
      "side": 1,
      "message": "if attachmentCount !\u003d renderPass-\u003egetAttachmentCount() something is very wrong...",
      "revId": "f3c2bbfbb2f1c52ab907e76e9c6624e5170157a0",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b224636_6541e986",
        "filename": "src/Vulkan/VkFramebuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-01-25T23:14:43Z",
      "side": 1,
      "message": "Yes. the framebuffer contains exactly one VkImageView for each attachment in the renderpass. Spec (VU for VkFramebufferCreateInfo):\n\n`attachmentCount must be equal to the attachment count specified in renderPass`",
      "parentUuid": "bc5a7e0a_6dcc0d41",
      "range": {
        "startLine": 43,
        "startChar": 59,
        "endLine": 43,
        "endChar": 109
      },
      "revId": "f3c2bbfbb2f1c52ab907e76e9c6624e5170157a0",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef9a79fd_e8503c08",
        "filename": "src/Vulkan/VkFramebuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-01-25T23:06:01Z",
      "side": 1,
      "message": "This is still not really right.\n\nIf there\u0027s a color aspect or a depth aspect, and attachment.loadOp \u003d\u003d VK_ATTACHMENT_LOAD_OP_CLEAR, then we should clear the color aspect or depth aspect.\n\nAlso, if there\u0027s a stencil aspect, and attachment.stencilLoadOp \u003d\u003d VK_ATTACHMENT_LOAD_OP_CLEAR, then we should clear the stencil aspect.",
      "revId": "f3c2bbfbb2f1c52ab907e76e9c6624e5170157a0",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aacf7bac_01b0e815",
        "filename": "src/Vulkan/VkFramebuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 5050
      },
      "writtenOn": "2019-01-26T00:27:02Z",
      "side": 1,
      "message": "That\u0027s not what the spec says:\n\"if the attachment uses a loadOp value of VK_ATTACHMENT_LOAD_OP_CLEAR or if the attachment has a depth/stencil format and uses a stencilLoadOp value of VK_ATTACHMENT_LOAD_OP_CLEAR\"\n\nThe way I wrote it is how I interpret it, but the way it\u0027s written would literally be:\nif((loadOp \u003d\u003d VK...) || (isDepthStencil \u0026\u0026 stencilLoadOp \u003d\u003d VK...))\n\nBut I don\u0027t think that\u0027s what they meant.",
      "parentUuid": "ef9a79fd_e8503c08",
      "revId": "f3c2bbfbb2f1c52ab907e76e9c6624e5170157a0",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b88e3a2_481e1325",
        "filename": "src/Vulkan/VkFramebuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-01-26T00:34:52Z",
      "side": 1,
      "message": "What you\u0027re quoting is the correct logic for whether a particular pClearValues entry must exist. It\u0027s not a good description of what the intended clear operation is.",
      "parentUuid": "aacf7bac_01b0e815",
      "revId": "f3c2bbfbb2f1c52ab907e76e9c6624e5170157a0",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c238b94_7b19fa52",
        "filename": "src/Vulkan/VkFramebuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-01-26T00:39:04Z",
      "side": 1,
      "message": "The rest of the picture is here:\n\nloadOp is a VkAttachmentLoadOp value specifying how the contents of color and depth components of the attachment are treated at the beginning of the subpass where it is first used.\n\nstoreOp is a VkAttachmentStoreOp value specifying how the contents of color and depth components of the attachment are treated at the end of the subpass where it is last used.\n\nstencilLoadOp is a VkAttachmentLoadOp value specifying how the contents of stencil components of the attachment are treated at the beginning of the subpass where it is first used.\n\nstencilStoreOp is a VkAttachmentStoreOp value specifying how the contents of stencil components of the attachment are treated at the end of the last subpass where it is used.\n\n\u003csnip layouts text\u003e\n\nIf the attachment uses a color format, then loadOp and storeOp are used, and stencilLoadOp and stencilStoreOp are ignored. If the format has depth and/or stencil components, loadOp and storeOp apply only to the depth data, while stencilLoadOp and stencilStoreOp define how the stencil data is handled. loadOp and stencilLoadOp define the load operations that execute as part of the first subpass that uses the attachment. storeOp and stencilStoreOp define the store operations that execute as part of the last subpass that uses the attachment.\n\nThe load operation for each sample in an attachment happens-before any recorded command which accesses the sample in the first subpass where the attachment is used. Load operations for attachments with a depth/stencil format execute in the VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT pipeline stage. Load operations for attachments with a color format execute in the VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT pipeline stage.\n\nThe store operation for each sample in an attachment happens-after any recorded command which accesses the sample in the last subpass where the attachment is used. Store operations for attachments with a depth/stencil format execute in the VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT pipeline stage. Store operations for attachments with a color format execute in the VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT pipeline stage.\n\nIf an attachment is not used by any subpass, then loadOp, storeOp, stencilStoreOp, and stencilLoadOp are ignored, and the attachment’s memory contents will not be modified by execution of a render pass instance.\n\nThe load and store operations apply on the first and last use of each view in the render pass, respectively. If a view index of an attachment is not included in the view mask in any subpass that uses it, then the load and store operations are ignored, and the attachment’s memory contents will not be modified by execution of a render pass instance.",
      "parentUuid": "0b88e3a2_481e1325",
      "revId": "f3c2bbfbb2f1c52ab907e76e9c6624e5170157a0",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    }
  ]
}