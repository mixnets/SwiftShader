{
  "comments": [
    {
      "key": {
        "uuid": "d7c07c3b_0773fc4a",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 10
      },
      "lineNbr": 53,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-02-20T04:15:04Z",
      "side": 1,
      "message": "I understand you meant to make this look like std::vector::emplace(), but in this case we actually know the type of the contained elements, so I think we should avoid generalizing this. Wrong usage will at best result in a cryptic error, and at worst silently do something unexpected. So I suggest only accepting what we really want here. I think a const Scalar\u0026\u0026 suffices.",
      "range": {
        "startLine": 53,
        "startChar": 27,
        "endLine": 53,
        "endChar": 41
      },
      "revId": "bc27fc373d725290b85ccd3ca941cc62bcd1cf43",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7d7944a_9a86e38a",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 10
      },
      "lineNbr": 53,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-02-20T16:05:31Z",
      "side": 1,
      "message": "This was only intended to be generic over the choice of ctor, not over types. RValue\u003cT\u003e has:\n\n- RValue(T const \u0026)\n- RValue(typename IntLiteral\u003cT\u003e::type)\n- RValue(typename FloatLiteral\u003cT\u003e::type)\n- RValue(Reference\u003cT\u003e const \u0026)\n\n(+ RValue(Value*) which we don\u0027t want to call ourselves.)",
      "parentUuid": "d7c07c3b_0773fc4a",
      "range": {
        "startLine": 53,
        "startChar": 27,
        "endLine": 53,
        "endChar": 41
      },
      "revId": "bc27fc373d725290b85ccd3ca941cc62bcd1cf43",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed1ec0ac_c42b1dba",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 10
      },
      "lineNbr": 53,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-02-20T16:21:07Z",
      "side": 1,
      "message": "I don\u0027t think we should allow these to be constructed from an IntLiteral or FloatLiteral. Those are true scalars and I think they would end up being automatically replicated to the Float4 rvalue. That\u0027s *probably* what we want in that case, but I\u0027d rather err on the safe side for now and require replications to be done explicitly so we can keep track of where we incur this minor cost. Likewise I\u0027m not sure if we need construction from Reference without something unintended happening behind our backs.\n\nHappy to be proven wrong if these do end up being useful, but for now I\u0027d like to stick to constructing from another Scalar if there\u0027s no immediately obvious need for more.",
      "parentUuid": "d7d7944a_9a86e38a",
      "range": {
        "startLine": 53,
        "startChar": 27,
        "endLine": 53,
        "endChar": 41
      },
      "revId": "bc27fc373d725290b85ccd3ca941cc62bcd1cf43",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c99bccd7_a6091804",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 10
      },
      "lineNbr": 74,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-02-20T08:27:34Z",
      "side": 1,
      "message": "nit: Might be cleaner to have this as field as a Scalar*, and change the constructor to:\n\n  Intermediate(uint32_t size) : contents(reinterpret_cast\u003cScalar *\u003e(new ContentsType[size])), size(size) {}\n\nThen the field matches the element type, and you can drop the two other casts on usage.",
      "revId": "bc27fc373d725290b85ccd3ca941cc62bcd1cf43",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65b29890_57f7f3e8",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 10
      },
      "lineNbr": 74,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-02-20T16:05:31Z",
      "side": 1,
      "message": "I think what you\u0027re proposing is shorter but worse. When you touch this thing, you *should* think carefully about it and the cast is a good mental speed bump.\n\nIf I go with your proposal, it\u0027s very tempting to make ~Intermediate() be just `delete [] contents;` which would then call the dtors, but we then have unbalanced manual construction / automatic destruction which is nasty. (And the alternative, casting back to ContentsType* just for delete [], is also nasty)",
      "parentUuid": "c99bccd7_a6091804",
      "revId": "bc27fc373d725290b85ccd3ca941cc62bcd1cf43",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00f07311_f4c67763",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 10
      },
      "lineNbr": 74,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-02-20T16:54:57Z",
      "side": 1,
      "message": "Okay.",
      "parentUuid": "65b29890_57f7f3e8",
      "revId": "bc27fc373d725290b85ccd3ca941cc62bcd1cf43",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}