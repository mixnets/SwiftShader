{
  "comments": [
    {
      "key": {
        "uuid": "cfbcf450_7652eabf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 19,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-01-23T20:08:33Z",
      "side": 1,
      "message": "Does it appear feasible to fix this at the Subzero level? We don\u0027t need it for now, but it seems worth documenting as a potential cleanup in case we care more about this at a later point.",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 19,
        "endChar": 37
      },
      "revId": "763a1d3277e0f50ee1c3485cd92b43a178e803b8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df3e3381_1e0fc04e",
        "filename": "src/Reactor/ReactorUnitTests.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2302,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-01-23T20:08:33Z",
      "side": 1,
      "message": "nit: We\u0027re using the rr namespace here (else we\u0027d have to write rr::Int etc. too), so this is redundant and the inconsistency might even cause some confusion.\n\nAnyway, I don\u0027t think tests have to serve as great usage examples, so no worries to keep as-is.",
      "range": {
        "startLine": 2302,
        "startChar": 25,
        "endLine": 2302,
        "endChar": 29
      },
      "revId": "763a1d3277e0f50ee1c3485cd92b43a178e803b8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "566e3325_e3da893b",
        "filename": "src/Reactor/SubzeroReactor.cpp",
        "patchSetId": 4
      },
      "lineNbr": 83,
      "author": {
        "id": 7183
      },
      "writtenOn": "2020-01-24T13:04:02Z",
      "side": 1,
      "message": "Sorry to keep picking at this.\nWe\u0027re now doing extra work for every load (which I can only imagine would be a very frequent op), to work around an issue with external pointers generated by getConstantPointer().\n\nHow expensive is createUnconstCast()? Am I naive in thinking it going to create a stack allocation per load?\n\nI\u0027m suggesting we keep loads as-is, and doing this \u0027unconst-cast\u0027 crap in the one place it applies - in getConstantPointer().",
      "range": {
        "startLine": 78,
        "startChar": 1,
        "endLine": 83,
        "endChar": 2
      },
      "revId": "763a1d3277e0f50ee1c3485cd92b43a178e803b8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "947b0918_d0686573",
        "filename": "src/Reactor/SubzeroReactor.cpp",
        "patchSetId": 4
      },
      "lineNbr": 83,
      "author": {
        "id": 7183
      },
      "writtenOn": "2020-01-24T14:25:19Z",
      "side": 1,
      "message": "Over IM Antonio pointed out that the load was always calling \u0027makeVariable()\u0027. So I have no objections.",
      "parentUuid": "566e3325_e3da893b",
      "range": {
        "startLine": 78,
        "startChar": 1,
        "endLine": 83,
        "endChar": 2
      },
      "revId": "763a1d3277e0f50ee1c3485cd92b43a178e803b8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    }
  ]
}