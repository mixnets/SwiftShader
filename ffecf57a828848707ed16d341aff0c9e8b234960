{
  "comments": [
    {
      "key": {
        "uuid": "6f89e15a_e87ac4f9",
        "filename": "src/Pipeline/SpirvShader.cpp",
        "patchSetId": 3
      },
      "lineNbr": 669,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-02-26T17:49:27Z",
      "side": 1,
      "message": "The other decorations which carry a value use a HasXxx bit rather than magic -1 values. I\u0027m not particularly attached to either approach, but we should be consistent?",
      "revId": "ffecf57a828848707ed16d341aff0c9e8b234960",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53c6019f_9b46a236",
        "filename": "src/Pipeline/SpirvShader.cpp",
        "patchSetId": 3
      },
      "lineNbr": 671,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-02-26T17:49:27Z",
      "side": 1,
      "message": "You don\u0027t want these asserts. Last wins, which is what your code does.",
      "revId": "ffecf57a828848707ed16d341aff0c9e8b234960",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0eca3de8_b04a2a81",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 3
      },
      "lineNbr": 215,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-02-26T17:22:18Z",
      "side": 1,
      "message": "Should these be ID\u003c\u003e\u0027s ?",
      "range": {
        "startLine": 212,
        "startChar": 3,
        "endLine": 215,
        "endChar": 19
      },
      "revId": "ffecf57a828848707ed16d341aff0c9e8b234960",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a43cd4d8_f846a4ed",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 3
      },
      "lineNbr": 215,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-02-26T17:45:54Z",
      "side": 1,
      "message": "Maybe, maybe not. They don\u0027t propagate through the codebase like the other identifiers, and so there is little room for confusion / mistakes here. Adding an ID for each requires adding a dummy T type, which might be a little heavy-handed right now.\nFinally, it\u0027s called SpirvID\u003c\u003e now, and these aren\u0027t the right data type anymore. If it were ID\u003c\u003e with a template parameter for backing type, then I\u0027d probably be more keen :)\n\nI\u0027ll keep an eye on these, if I find them being copied around the place as int32_t\u0027s, I\u0027ll reconsider changing them.",
      "parentUuid": "0eca3de8_b04a2a81",
      "range": {
        "startLine": 212,
        "startChar": 3,
        "endLine": 215,
        "endChar": 19
      },
      "revId": "ffecf57a828848707ed16d341aff0c9e8b234960",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6035ed9a_ea14b10b",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 3
      },
      "lineNbr": 215,
      "author": {
        "id": 6982
      },
      "writtenOn": "2019-02-26T17:49:27Z",
      "side": 1,
      "message": "They are literal integers, not spirv ids.",
      "parentUuid": "0eca3de8_b04a2a81",
      "range": {
        "startLine": 212,
        "startChar": 3,
        "endLine": 215,
        "endChar": 19
      },
      "revId": "ffecf57a828848707ed16d341aff0c9e8b234960",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00bb9d46_4480da8b",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 3
      },
      "lineNbr": 215,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-02-26T17:53:11Z",
      "side": 1,
      "message": "Ah, yes, carry on!\n\n(If there are any SPIR-V ID\u0027s that a aren\u0027t SpirvID\u003c\u003e at the moment then we should probably change them)",
      "parentUuid": "6035ed9a_ea14b10b",
      "range": {
        "startLine": 212,
        "startChar": 3,
        "endLine": 215,
        "endChar": 19
      },
      "revId": "ffecf57a828848707ed16d341aff0c9e8b234960",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "187593b6_1db35ed8",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 3
      },
      "lineNbr": 227,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-02-26T17:22:18Z",
      "side": 1,
      "message": "Can be initialized inline.",
      "range": {
        "startLine": 227,
        "startChar": 7,
        "endLine": 227,
        "endChar": 66
      },
      "revId": "ffecf57a828848707ed16d341aff0c9e8b234960",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "477f1f39_8add8bc0",
        "filename": "src/Pipeline/SpirvShader.hpp",
        "patchSetId": 3
      },
      "lineNbr": 227,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-02-26T17:45:54Z",
      "side": 1,
      "message": "I don\u0027t think Chris did this due to the bit-field specifiers on the bools. If you try to inline initialize these, you\u0027ll either get an error or a warning like:\n\n  warning: default member initializers for bit-fields only available with -std\u003dc++2a or -std\u003dgnu++2a\n\nIMO it is nicer to have all initialized inline or in a constructor, not mixed.",
      "parentUuid": "187593b6_1db35ed8",
      "range": {
        "startLine": 227,
        "startChar": 7,
        "endLine": 227,
        "endChar": 66
      },
      "revId": "ffecf57a828848707ed16d341aff0c9e8b234960",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    }
  ]
}