{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "864b335f_fdd3b2de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-02-10T21:55:35Z",
      "side": 1,
      "message": "Fixed the ImageView\u0027s ID so that sampler cache key doesn\u0027t match between an ImageView with a single mip level and one with multiple mip levels.",
      "revId": "ebe3f326c9129a5aae9c7a9919781ffb428d97a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4beb6df1_0ca4c3ad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-02-10T22:09:49Z",
      "side": 1,
      "message": "Local testing showed a significant improvement for the TriangleSampleTexture/TriangleSampleTexture benchmark\u0027s average time, which went from ~2.06ms to ~1.33ms, in local testing, so this is about a 33% gain for that case.",
      "revId": "ebe3f326c9129a5aae9c7a9919781ffb428d97a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8490c45a_c1ef908b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-02-12T16:41:18Z",
      "side": 1,
      "message": "I think we should hold off on this until the identifier \u003c-\u003e state mapping issue is addressed (b/152227757). That should make it a lot clearer where we do each bit of analysis, without risk of depending on something not part of the cache key.",
      "revId": "ebe3f326c9129a5aae9c7a9919781ffb428d97a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c49023fd_70f17570",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 8
      },
      "lineNbr": 105,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-02-11T16:10:42Z",
      "side": 1,
      "message": "What about these cases? If the shader provides Lod, but there\u0027s only a single level, we could still take advantage of both the constant propagation and eliminating any calculation the shader, if we substitute our fixed lod here.",
      "range": {
        "startLine": 94,
        "startChar": 1,
        "endLine": 105,
        "endChar": 6
      },
      "revId": "ebe3f326c9129a5aae9c7a9919781ffb428d97a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84de86a3_4bee3fc2",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 8
      },
      "lineNbr": 105,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-02-11T16:10:42Z",
      "side": 1,
      "message": "Isn\u0027t what we\u0027re doing here essentially the Base case? Our table in sw::Texture gets filled with the same data for each level if there\u0027s just a single one, even if mindLod \u003e 0, so we can always use 0 as the effective index.",
      "range": {
        "startLine": 105,
        "startChar": 21,
        "endLine": 105,
        "endChar": 25
      },
      "revId": "ebe3f326c9129a5aae9c7a9919781ffb428d97a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2242867e_dff54939",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 8
      },
      "lineNbr": 105,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-02-11T16:27:54Z",
      "side": 1,
      "message": "Right, but this cl would also apply the optimization when having a constant mip level that\u0027s not 0. Not sure if that\u0027s useful, though.",
      "parentUuid": "84de86a3_4bee3fc2",
      "range": {
        "startLine": 105,
        "startChar": 21,
        "endLine": 105,
        "endChar": 25
      },
      "revId": "ebe3f326c9129a5aae9c7a9919781ffb428d97a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60df657d_bc2d4e93",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 8
      },
      "lineNbr": 105,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-02-11T16:27:54Z",
      "side": 1,
      "message": "All we\u0027d save here is a + operation in the Lod operation, since the clamp still happens below (line 119-120).\nThe Fetch function currently doesn\u0027t apply the clamp at line 119-120, so I didn\u0027t want to clamp it. Should it apply the clamp too?",
      "parentUuid": "c49023fd_70f17570",
      "range": {
        "startLine": 94,
        "startChar": 1,
        "endLine": 105,
        "endChar": 6
      },
      "revId": "ebe3f326c9129a5aae9c7a9919781ffb428d97a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7088eda0_a446832b",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 8
      },
      "lineNbr": 105,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-02-12T16:41:18Z",
      "side": 1,
      "message": "\u0027Base\u0027 can cover that too.",
      "parentUuid": "2242867e_dff54939",
      "range": {
        "startLine": 105,
        "startChar": 21,
        "endLine": 105,
        "endChar": 25
      },
      "revId": "ebe3f326c9129a5aae9c7a9919781ffb428d97a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64e08c85_6d9c7660",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 8
      },
      "lineNbr": 105,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-02-12T16:41:18Z",
      "side": 1,
      "message": "I think we\u0027d save considerably more than an addition if constant propagation can happen. LLVM can do that aggressively and eliminate the clamp and the conversion. For Subzero we\u0027ll have b/155302798 but it may not cover all cases.",
      "parentUuid": "60df657d_bc2d4e93",
      "range": {
        "startLine": 94,
        "startChar": 1,
        "endLine": 105,
        "endChar": 6
      },
      "revId": "ebe3f326c9129a5aae9c7a9919781ffb428d97a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed15d34c_0cbaa2c8",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 8
      },
      "lineNbr": 105,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-02-17T20:55:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7088eda0_a446832b",
      "range": {
        "startLine": 105,
        "startChar": 21,
        "endLine": 105,
        "endChar": 25
      },
      "revId": "ebe3f326c9129a5aae9c7a9919781ffb428d97a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5f63bd1_c7332d4e",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 8
      },
      "lineNbr": 105,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-02-17T20:55:59Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "64e08c85_6d9c7660",
      "range": {
        "startLine": 94,
        "startChar": 1,
        "endLine": 105,
        "endChar": 6
      },
      "revId": "ebe3f326c9129a5aae9c7a9919781ffb428d97a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03f14411_1bb5a3e2",
        "filename": "src/Pipeline/SamplerCore.cpp",
        "patchSetId": 8
      },
      "lineNbr": 105,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-02-17T22:23:21Z",
      "side": 1,
      "message": "Turns out using Base isn\u0027t a practical solution. Changing the samplerMethod affects the order of the parameters received by the texture sampling routine in SpirvShader::emitSamplerRoutine() and fixing that is less appealing than doing the simple code change here.\nI reverted to my original solution, which I think is the simplest one which provides the desired optimization.",
      "parentUuid": "ed15d34c_0cbaa2c8",
      "range": {
        "startLine": 105,
        "startChar": 21,
        "endLine": 105,
        "endChar": 25
      },
      "revId": "ebe3f326c9129a5aae9c7a9919781ffb428d97a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01092458_54fc6274",
        "filename": "src/Pipeline/SpirvShaderSampling.cpp",
        "patchSetId": 8
      },
      "lineNbr": 83,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-02-11T16:10:42Z",
      "side": 1,
      "message": "As noted in another comment, can we just do samplerState.compareEnable \u003d Base instead?",
      "range": {
        "startLine": 83,
        "startChar": 3,
        "endLine": 83,
        "endChar": 5
      },
      "revId": "ebe3f326c9129a5aae9c7a9919781ffb428d97a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec76fb90_d8b77bbf",
        "filename": "src/Pipeline/SpirvShaderSampling.cpp",
        "patchSetId": 8
      },
      "lineNbr": 83,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-02-11T16:27:54Z",
      "side": 1,
      "message": "samplerState.compareEnable is a bool\ndid you mean:\ninstruction.samplerMethod \u003d Base\n?\nIf so, that should probably be done before the routine key is generated, since a different input samplerMethod wouldn\u0027t end up generating a different image sampler routine.",
      "parentUuid": "01092458_54fc6274",
      "range": {
        "startLine": 83,
        "startChar": 3,
        "endLine": 83,
        "endChar": 5
      },
      "revId": "ebe3f326c9129a5aae9c7a9919781ffb428d97a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c47dae13_37ece01a",
        "filename": "src/Pipeline/SpirvShaderSampling.cpp",
        "patchSetId": 8
      },
      "lineNbr": 83,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-02-12T16:41:18Z",
      "side": 1,
      "message": "Sorry, that was some kind of typo. Indeed `samplerMethod` is the one.\n\nAnd indeed this affects the relation between descriptors and their state again in ways that could be buggy, which makes me think we should first take care of the 1:1 mapping between descriptor identifiers and their state, and make only the former available directly to the shader routine.",
      "parentUuid": "ec76fb90_d8b77bbf",
      "range": {
        "startLine": 83,
        "startChar": 3,
        "endLine": 83,
        "endChar": 5
      },
      "revId": "ebe3f326c9129a5aae9c7a9919781ffb428d97a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84789a10_67b9cca9",
        "filename": "src/Pipeline/SpirvShaderSampling.cpp",
        "patchSetId": 8
      },
      "lineNbr": 83,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-02-17T20:55:59Z",
      "side": 1,
      "message": "After looking into it, for now, I\u0027m not very keen on adding extra mandatory logic in order to compute the cache key, so I\u0027ll leave the logic here. We can circle back to this later if it makes a difference.",
      "parentUuid": "c47dae13_37ece01a",
      "range": {
        "startLine": 83,
        "startChar": 3,
        "endLine": 83,
        "endChar": 5
      },
      "revId": "ebe3f326c9129a5aae9c7a9919781ffb428d97a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8dc6761_3143da08",
        "filename": "src/Vulkan/VkImageView.hpp",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-02-11T16:10:42Z",
      "side": 1,
      "message": "Looks like it might be a mistake to pass in an Image here, instead of an ImageView? We should be able to obtain the `hasMultipleMipLevels` info from the latter, and eliminate the explicit parameter here.\n\nIn fact that would allow eliminating every other parameter here?",
      "range": {
        "startLine": 35,
        "startChar": 12,
        "endLine": 35,
        "endChar": 30
      },
      "revId": "ebe3f326c9129a5aae9c7a9919781ffb428d97a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23ba0746_29e42c6c",
        "filename": "src/Vulkan/VkImageView.hpp",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-02-11T16:27:54Z",
      "side": 1,
      "message": "This is called inside the ImageView\u0027s constructor, so it doesn\u0027t exist yet.",
      "parentUuid": "b8dc6761_3143da08",
      "range": {
        "startLine": 35,
        "startChar": 12,
        "endLine": 35,
        "endChar": 30
      },
      "revId": "ebe3f326c9129a5aae9c7a9919781ffb428d97a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e21c4ea_85e1cd46",
        "filename": "src/Vulkan/VkImageView.hpp",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-02-12T16:41:18Z",
      "side": 1,
      "message": "Right. It\u0027s risky to pass it \u0027this\u0027, but valid when we know all the members that we\u0027ll access have been initialized. The clean solution would be to move those members to a base class of vk::ImageView, which is then guaranteed available within its constructor. I think vk::Sampler might already do something like that.\n\nAlternatively perhaps this could just take VkImageViewCreateInfo.\n\nIn any case, that\u0027s a step towards having the identifier as the only descriptor data.",
      "parentUuid": "23ba0746_29e42c6c",
      "range": {
        "startLine": 35,
        "startChar": 12,
        "endLine": 35,
        "endChar": 30
      },
      "revId": "ebe3f326c9129a5aae9c7a9919781ffb428d97a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "508a50b4_e155327d",
        "filename": "src/Vulkan/VkImageView.hpp",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-02-17T20:55:59Z",
      "side": 1,
      "message": "Used VkImageViewCreateInfo. That causes a tiny bit of code duplication, but I think it\u0027s worth it.",
      "parentUuid": "1e21c4ea_85e1cd46",
      "range": {
        "startLine": 35,
        "startChar": 12,
        "endLine": 35,
        "endChar": 30
      },
      "revId": "ebe3f326c9129a5aae9c7a9919781ffb428d97a9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}