{
  "comments": [
    {
      "key": {
        "uuid": "cd0b1d5b_9b47b8ed",
        "filename": "src/Vulkan/VkImage.cpp",
        "patchSetId": 20
      },
      "lineNbr": 1052,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-06-19T03:45:56Z",
      "side": 1,
      "message": "This could also check for usage as attachment so we can reuse this method (I suggest renaming it to \u0027lock\u0027) instead of explicitly having to call \u0027markDirty\u0027 on them.",
      "range": {
        "startLine": 1052,
        "startChar": 0,
        "endLine": 1052,
        "endChar": 91
      },
      "revId": "8db683af380af4835f500a71aedc4b6ed00b4ace",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a491111b_37b785d1",
        "filename": "src/Vulkan/VkImage.cpp",
        "patchSetId": 20
      },
      "lineNbr": 1052,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-06-19T14:44:12Z",
      "side": 1,
      "message": "lock and markDirty have opposite meanings in my mind\nmarkDirty means \"you\u0027ll need to preprocess it next time you need to read it\"\nlock means \"I\u0027m accessing it, preprocess it now\"",
      "parentUuid": "cd0b1d5b_9b47b8ed",
      "range": {
        "startLine": 1052,
        "startChar": 0,
        "endLine": 1052,
        "endChar": 91
      },
      "revId": "8db683af380af4835f500a71aedc4b6ed00b4ace",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69202b18_2d9025c3",
        "filename": "src/Vulkan/VkImage.hpp",
        "patchSetId": 20
      },
      "lineNbr": 86,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-06-19T03:45:56Z",
      "side": 1,
      "message": "There seems to be a bit of semantic overload in this new interface. If we keep the original getTexelPointer() and instead add \u0027lock\u0027 methods for indicating which subresource will be read/written this could make it clearer what happens under the hood.\n\nBasically getTexelPointer() would still just be responsible for computing the pointer, and could remain \u0027const\u0027. It\u0027s also what would be used for \u0027raw\u0027 access to the data during the actual \u0027preprocess\u0027 operations. The \u0027lock\u0027 methods would subsume some of the methods below. By indicating that we\u0027re done reading/writing with an \u0027unlock\u0027 method I think it would also make it easier to check that a subresource isn\u0027t \u0027locked\u0027 for reading and writing simultaneously.",
      "range": {
        "startLine": 84,
        "startChar": 1,
        "endLine": 86,
        "endChar": 128
      },
      "revId": "8db683af380af4835f500a71aedc4b6ed00b4ace",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06c3e182_82139f98",
        "filename": "src/Vulkan/VkImage.hpp",
        "patchSetId": 20
      },
      "lineNbr": 86,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-06-19T14:44:12Z",
      "side": 1,
      "message": "I agree that getTexelPointer() could stay const and that I could use another non const function to just take care of handling the dirty subregions structure, but lock/unlock doesn\u0027t make sense here, IMHO. We can write multiple times before we read, there\u0027s no locking happening, we\u0027re just marking subregions are require preprocessing later, so markDirty makes more sense to me.",
      "parentUuid": "69202b18_2d9025c3",
      "range": {
        "startLine": 84,
        "startChar": 1,
        "endLine": 86,
        "endChar": 128
      },
      "revId": "8db683af380af4835f500a71aedc4b6ed00b4ace",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52318972_ed78bfa1",
        "filename": "src/Vulkan/VkImage.hpp",
        "patchSetId": 20
      },
      "lineNbr": 86,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-06-22T15:30:16Z",
      "side": 1,
      "message": "Also note: input textures would only ever get locked and never unlocked, whereas render targets would only ever get unlocked and never locked. It would be really weird to read.\n\nI did the change regarding getTexelPointer(), though.",
      "parentUuid": "06c3e182_82139f98",
      "range": {
        "startLine": 84,
        "startChar": 1,
        "endLine": 86,
        "endChar": 128
      },
      "revId": "8db683af380af4835f500a71aedc4b6ed00b4ace",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9af6e6b_7cfc8aaf",
        "filename": "src/Vulkan/VkImage.hpp",
        "patchSetId": 20
      },
      "lineNbr": 86,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-06-22T18:01:16Z",
      "side": 1,
      "message": "\u003e input textures would only ever get locked and never unlocked, whereas render targets would only ever get unlocked and never locked\n\nMy suggestion is to always lock and unlock, even when one or the other (or both) don\u0027t do anything. That makes it easier to verify that they\u0027re used symmetrically and we\u0027re not reading while something is still writing. It also shifts the complexity to the Image class, which is arguably the right place since the users of this class shouldn\u0027t have to know the details of the dirtying mechanism and when to call what. Locking and unlocking is easily understood.",
      "parentUuid": "52318972_ed78bfa1",
      "range": {
        "startLine": 84,
        "startChar": 1,
        "endLine": 86,
        "endChar": 128
      },
      "revId": "8db683af380af4835f500a71aedc4b6ed00b4ace",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "855e18bf_4ab97a94",
        "filename": "src/Vulkan/VkImage.hpp",
        "patchSetId": 20
      },
      "lineNbr": 86,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-06-22T18:07:17Z",
      "side": 1,
      "message": "This would add an extra set of subregions to keep track of on top of the one we use for general non shader related write operations, like image copies and blits, so I think this would actually add a lot of unwanted complexity, IMHO.",
      "parentUuid": "e9af6e6b_7cfc8aaf",
      "range": {
        "startLine": 84,
        "startChar": 1,
        "endLine": 86,
        "endChar": 128
      },
      "revId": "8db683af380af4835f500a71aedc4b6ed00b4ace",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d88fdca3_27a60563",
        "filename": "src/Vulkan/VkImage.hpp",
        "patchSetId": 20
      },
      "lineNbr": 86,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-06-23T04:39:30Z",
      "side": 1,
      "message": "Okay, so maybe not try to track and validate everything, at least not in a Release build. My main concern is improving readability. Specifically, the \u0027notify()\u0027 method doesn\u0027t just take note of something as the name implies, it can also alter the image (preparing for sampling). It\u0027s also not very clear when we should call \u0027markDirty()\u0027 and when we should call \u0027notify(WRITE)\u0027.\n\nI still wonder if we can replace them by a lock(READ|WRITE|READ_AND_WRITE) + unlock() interface. The unlock() method doesn\u0027t have to do anything at this point.\n\nIn a follow-up change we could add a Debug-only field to ImageSubresource to indicate what state it\u0027s in (e.g. unlocked but dirty, clean but read lock held, etc.) so that unlock() plays a role in validation. I think that would give us much better robustness guarantees, and help catch bugs early during refactorings.",
      "parentUuid": "855e18bf_4ab97a94",
      "range": {
        "startLine": 84,
        "startChar": 1,
        "endLine": 86,
        "endChar": 128
      },
      "revId": "8db683af380af4835f500a71aedc4b6ed00b4ace",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9628e240_5098c8db",
        "filename": "src/Vulkan/VkImage.hpp",
        "patchSetId": 20
      },
      "lineNbr": 86,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-06-23T12:58:26Z",
      "side": 1,
      "message": "IMHO, the notify function is more readable that lock/unlock functions that may do nothing.\n\nI wouldn\u0027t have a choice to track subregions from the lock function, I would need them in the unlock method. If both function take a subregion argument, it\u0027s going to be super confusing.",
      "parentUuid": "d88fdca3_27a60563",
      "range": {
        "startLine": 84,
        "startChar": 1,
        "endLine": 86,
        "endChar": 128
      },
      "revId": "8db683af380af4835f500a71aedc4b6ed00b4ace",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36f4f9e5_1faff016",
        "filename": "src/Vulkan/VkImage.hpp",
        "patchSetId": 20
      },
      "lineNbr": 86,
      "author": {
        "id": 9669
      },
      "writtenOn": "2020-06-23T14:14:33Z",
      "side": 1,
      "message": "I\u0027m a little late to the discussion, and perhaps I\u0027m not seeing the whole thing, but I\u0027ll throw in my two cents. I agree that a markDirty interface is easy to mess up, and having it be done automatically is nice. One example from my past is the Havok physics/animation engine, where they had a class to represent hierarchical skeletal transforms in world and local space, and it internally kept track of dirtiness, and lazily updated transforms as needed. What I liked about their interface is that they exposed \"modify*\" functions, which return non-const pointers, and internally set dirty flags, and \"read*\" functions, which returned const pointers, which would lazily update transforms if needed (actually, modify* would also update if needed). So you\u0027d have code like:\n\n  // This returns the local-space transform of \"torso\", and marks the local-space dirty\n  // bit to true\n  hkTransform* p \u003d skel.modifyBoneLocal(\"torso\");\n  p-\u003epos \u003d ...;\n\n  // This gets the lazily updated world-space transform of \"torso\" because the local\n  // space bit is true, then sets the bit back to false.\n  const hkTransform* p2 \u003d skel.readBoneWorld(\"torso\");\n\nIn general, from the outside, you don\u0027t worry about dirtiness. Of course, for performance reasons, you would try to combine modify calls before read calls if possibly to avoid needless updates, but it worked out quite well most of the time.\n\nPerhaps there\u0027s a way to do something similar on the Image class?",
      "parentUuid": "9628e240_5098c8db",
      "range": {
        "startLine": 84,
        "startChar": 1,
        "endLine": 86,
        "endChar": 128
      },
      "revId": "8db683af380af4835f500a71aedc4b6ed00b4ace",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1d97e78_dd026639",
        "filename": "src/Vulkan/VkImage.hpp",
        "patchSetId": 20
      },
      "lineNbr": 86,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-06-23T14:17:22Z",
      "side": 1,
      "message": "There are no read* functions in Vulkan. We pass data though descriptor sets without ever notifying the image object, which is why some sort of notification mechanism is necessary.",
      "parentUuid": "36f4f9e5_1faff016",
      "range": {
        "startLine": 84,
        "startChar": 1,
        "endLine": 86,
        "endChar": 128
      },
      "revId": "8db683af380af4835f500a71aedc4b6ed00b4ace",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13623ff9_38b6b3aa",
        "filename": "src/Vulkan/VkImage.hpp",
        "patchSetId": 20
      },
      "lineNbr": 86,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-07-02T19:58:44Z",
      "side": 1,
      "message": "New naming convention hopefully makes this clearer",
      "parentUuid": "d1d97e78_dd026639",
      "range": {
        "startLine": 84,
        "startChar": 1,
        "endLine": 86,
        "endChar": 128
      },
      "revId": "8db683af380af4835f500a71aedc4b6ed00b4ace",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e37cd879_846a045b",
        "filename": "src/Vulkan/VkImage.hpp",
        "patchSetId": 20
      },
      "lineNbr": 99,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-06-19T03:45:56Z",
      "side": 1,
      "message": "This seems like a premature optimization. We can just call \u0027lock(AccessType)\u0027 on all of them, and have the implementation determine whether any action is required (preparing for reading or marking as dirty).",
      "range": {
        "startLine": 99,
        "startChar": 6,
        "endLine": 99,
        "endChar": 27
      },
      "revId": "8db683af380af4835f500a71aedc4b6ed00b4ace",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6def7683_b62f487a",
        "filename": "src/Vulkan/VkImage.hpp",
        "patchSetId": 20
      },
      "lineNbr": 99,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-06-19T14:44:12Z",
      "side": 1,
      "message": "The thing is this culls 99% of cases, it\u0027s probably worth keeping.\nAgain, the lock/unlock logic doesn\u0027t make sense to me here.",
      "parentUuid": "e37cd879_846a045b",
      "range": {
        "startLine": 99,
        "startChar": 6,
        "endLine": 99,
        "endChar": 27
      },
      "revId": "8db683af380af4835f500a71aedc4b6ed00b4ace",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d030e37_a4c593fa",
        "filename": "src/Vulkan/VkImage.hpp",
        "patchSetId": 20
      },
      "lineNbr": 99,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-06-22T15:30:16Z",
      "side": 1,
      "message": "I made the change, I\u0027ll let Regres decide if performance is good enough. Hopefully it doesn\u0027t change anything.",
      "parentUuid": "6def7683_b62f487a",
      "range": {
        "startLine": 99,
        "startChar": 6,
        "endLine": 99,
        "endChar": 27
      },
      "revId": "8db683af380af4835f500a71aedc4b6ed00b4ace",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81619cce_e54e9ca7",
        "filename": "src/Vulkan/VkImage.hpp",
        "patchSetId": 20
      },
      "lineNbr": 186,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-06-19T03:45:56Z",
      "side": 1,
      "message": "plural",
      "range": {
        "startLine": 186,
        "startChar": 56,
        "endLine": 186,
        "endChar": 72
      },
      "revId": "8db683af380af4835f500a71aedc4b6ed00b4ace",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef7be600_e05c21b5",
        "filename": "src/Vulkan/VkImage.hpp",
        "patchSetId": 20
      },
      "lineNbr": 186,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-06-19T14:44:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "81619cce_e54e9ca7",
      "range": {
        "startLine": 186,
        "startChar": 56,
        "endLine": 186,
        "endChar": 72
      },
      "revId": "8db683af380af4835f500a71aedc4b6ed00b4ace",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbc1f2b2_c4e7d8c9",
        "filename": "src/Vulkan/VkImage.hpp",
        "patchSetId": 20
      },
      "lineNbr": 186,
      "author": {
        "id": 5050
      },
      "writtenOn": "2020-06-22T15:30:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ef7be600_e05c21b5",
      "range": {
        "startLine": 186,
        "startChar": 56,
        "endLine": 186,
        "endChar": 72
      },
      "revId": "8db683af380af4835f500a71aedc4b6ed00b4ace",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}