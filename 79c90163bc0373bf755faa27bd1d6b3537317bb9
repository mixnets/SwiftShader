{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2064b4fa_eb694178",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5050
      },
      "writtenOn": "2022-09-08T21:10:59Z",
      "side": 1,
      "message": "The change is mostly fine, I just have one discussion point for Nicolas regarding the GetExtendedStruct() helper function.",
      "revId": "79c90163bc0373bf755faa27bd1d6b3537317bb9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49e691b0_6cc8374c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-09-09T03:35:16Z",
      "side": 1,
      "message": "Very nice refactoring, thanks Shabi!",
      "revId": "79c90163bc0373bf755faa27bd1d6b3537317bb9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aef0ae19_fb79d06a",
        "filename": "src/Device/Context.cpp",
        "patchSetId": 1
      },
      "lineNbr": 627,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-09-09T03:35:16Z",
      "side": 1,
      "message": "nit: I find it useful to add the `*` modifier to auto pointer types. It makes it clearer that no deep copy is made, what `if(renderingCreateInfo)` means, and why `-\u003e` must be used.",
      "range": {
        "startLine": 627,
        "startChar": 3,
        "endLine": 627,
        "endChar": 7
      },
      "revId": "79c90163bc0373bf755faa27bd1d6b3537317bb9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "89122415_2430c4c9",
        "filename": "src/Device/Context.cpp",
        "patchSetId": 1
      },
      "lineNbr": 627,
      "author": {
        "id": 46365
      },
      "writtenOn": "2022-09-09T13:47:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aef0ae19_fb79d06a",
      "range": {
        "startLine": 627,
        "startChar": 3,
        "endLine": 627,
        "endChar": 7
      },
      "revId": "79c90163bc0373bf755faa27bd1d6b3537317bb9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fb81424_3f999dcc",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 1
      },
      "lineNbr": 629,
      "author": {
        "id": 46365
      },
      "writtenOn": "2022-09-08T19:59:56Z",
      "side": 1,
      "message": "This should be an assertion IMO",
      "revId": "79c90163bc0373bf755faa27bd1d6b3537317bb9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b72f046d_3c5837e4",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 1
      },
      "lineNbr": 629,
      "author": {
        "id": 5050
      },
      "writtenOn": "2022-09-08T21:10:59Z",
      "side": 1,
      "message": "You can change it to an assert.",
      "parentUuid": "7fb81424_3f999dcc",
      "revId": "79c90163bc0373bf755faa27bd1d6b3537317bb9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b407549b_503d1baa",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 1
      },
      "lineNbr": 629,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-09-09T03:35:16Z",
      "side": 1,
      "message": "Yes, please do. `VUID-VkWriteDescriptorSet-descriptorType-02221` mandates this struct and we shouldn\u0027t silently ignore it when it\u0027s missing.",
      "parentUuid": "b72f046d_3c5837e4",
      "revId": "79c90163bc0373bf755faa27bd1d6b3537317bb9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00989c07_74591bd0",
        "filename": "src/Vulkan/VkDescriptorSetLayout.cpp",
        "patchSetId": 1
      },
      "lineNbr": 629,
      "author": {
        "id": 46365
      },
      "writtenOn": "2022-09-09T13:47:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b407549b_503d1baa",
      "revId": "79c90163bc0373bf755faa27bd1d6b3537317bb9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a02d123_b5258f65",
        "filename": "src/Vulkan/VkObject.hpp",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 5050
      },
      "writtenOn": "2022-09-08T21:10:59Z",
      "side": 1,
      "message": "The one danger with this is that these structures are usually pre-parsed in libVulkan.cpp to make sure we aren\u0027t receiving an unexpected pNext pointer, so by the time we query them for a specific pNext pointer, we already know that there\u0027s no funny business going on in here. It is just a helper function, though, and as it is used now, it\u0027s fine. Nicolas, WDYT?",
      "range": {
        "startLine": 168,
        "startChar": 9,
        "endLine": 168,
        "endChar": 26
      },
      "revId": "79c90163bc0373bf755faa27bd1d6b3537317bb9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5720d8fb_fa500d31",
        "filename": "src/Vulkan/VkObject.hpp",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 46365
      },
      "writtenOn": "2022-09-09T02:07:28Z",
      "side": 1,
      "message": "I specifically didn\u0027t touch places that go through the entire pNext chain (and also assert when there\u0027s something unexpected). This helper is used in a few bits of code that go through the pNext chain and look for a (potentially) optional struct. It\u0027s refactoring existing duplicate code for this purpose.",
      "parentUuid": "1a02d123_b5258f65",
      "range": {
        "startLine": 168,
        "startChar": 9,
        "endLine": 168,
        "endChar": 26
      },
      "revId": "79c90163bc0373bf755faa27bd1d6b3537317bb9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46f0cc14_8a27eb7a",
        "filename": "src/Vulkan/VkObject.hpp",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-09-09T03:35:16Z",
      "side": 1,
      "message": "I think this is perfectly fine. Cases where we handle all the extension structs and cases where we look for a specific one are quite distinct. `pNext` chains are fundamental to Vulkan and well understood by any contributor so I don\u0027t think we risk seeing repeated `GetExtendedStruct()` calls to handle all known extension structs.",
      "parentUuid": "5720d8fb_fa500d31",
      "range": {
        "startLine": 168,
        "startChar": 9,
        "endLine": 168,
        "endChar": 26
      },
      "revId": "79c90163bc0373bf755faa27bd1d6b3537317bb9",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}