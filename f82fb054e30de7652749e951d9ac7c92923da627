{
  "comments": [
    {
      "key": {
        "uuid": "449cb170_b2eea5a8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 9,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-04-24T14:00:54Z",
      "side": 1,
      "message": "Could you clarify? When using regular LLVM load/store instructions it handles all memory-ordering variants, but when using an intrinsic it may end up making an external call?",
      "range": {
        "startLine": 9,
        "startChar": 6,
        "endLine": 9,
        "endChar": 9
      },
      "revId": "f82fb054e30de7652749e951d9ac7c92923da627",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cdcb947_e03e15c5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 9,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-04-24T14:29:35Z",
      "side": 1,
      "message": "It can happen if you attempt to perform a scalar atomic load. This path can theoretically be taken - we just hadn\u0027t seen it as all dEQP tests perform atomic loads / stores on replicated (N, N, N, N) or consecutive scalars (N+0, N+1, N+2, N+3).\n\nAn atomic, scattered load or store will hit these external intrinsics.\n\nI encountered these when playing with the load / store logic, however they are _unlikely_ to be hit.",
      "parentUuid": "449cb170_b2eea5a8",
      "range": {
        "startLine": 9,
        "startChar": 6,
        "endLine": 9,
        "endChar": 9
      },
      "revId": "f82fb054e30de7652749e951d9ac7c92923da627",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87971eee_c0cd693f",
        "filename": "src/Reactor/LLVMReactor.cpp",
        "patchSetId": 6
      },
      "lineNbr": 518,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-04-24T14:00:54Z",
      "side": 1,
      "message": "Where is this being used?",
      "range": {
        "startLine": 492,
        "startChar": 3,
        "endLine": 518,
        "endChar": 5
      },
      "revId": "f82fb054e30de7652749e951d9ac7c92923da627",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e95ad0a3_1eeac69e",
        "filename": "src/Reactor/LLVMReactor.cpp",
        "patchSetId": 6
      },
      "lineNbr": 518,
      "author": {
        "id": 7183
      },
      "writtenOn": "2019-04-24T14:29:35Z",
      "side": 1,
      "message": "L545 L546 below.",
      "parentUuid": "87971eee_c0cd693f",
      "range": {
        "startLine": 492,
        "startChar": 3,
        "endLine": 518,
        "endChar": 5
      },
      "revId": "f82fb054e30de7652749e951d9ac7c92923da627",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "331ae374_a4432e70",
        "filename": "src/Reactor/LLVMReactor.cpp",
        "patchSetId": 6
      },
      "lineNbr": 518,
      "author": {
        "id": 5005
      },
      "writtenOn": "2019-04-24T15:03:55Z",
      "side": 1,
      "message": "Oh, thanks, I missed that those weren\u0027t calling std::atomic_load/store directly. I see why you need all of this now.",
      "parentUuid": "e95ad0a3_1eeac69e",
      "range": {
        "startLine": 492,
        "startChar": 3,
        "endLine": 518,
        "endChar": 5
      },
      "revId": "f82fb054e30de7652749e951d9ac7c92923da627",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}