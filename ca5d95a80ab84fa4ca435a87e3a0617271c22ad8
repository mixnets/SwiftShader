{
  "comments": [
    {
      "key": {
        "uuid": "e1a778a6_b9409d2f",
        "filename": "src/Vulkan/VkPipeline.cpp",
        "patchSetId": 8
      },
      "lineNbr": 72,
      "author": {
        "id": 5065
      },
      "writtenOn": "2018-11-30T14:39:20Z",
      "side": 1,
      "message": "nit: don\u0027t you need a \"bool normalized\" as well?\n\nI suggest having one structure {sw::StreamType type, uint32_t numChannels, bool normalized} and have a single conversion function that does things like return {sw::STREAMTYPE_BYTE, 1, false};",
      "revId": "ca5d95a80ab84fa4ca435a87e3a0617271c22ad8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93de4575_079964ee",
        "filename": "src/Vulkan/VkPipeline.cpp",
        "patchSetId": 8
      },
      "lineNbr": 72,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-11-30T19:53:55Z",
      "side": 1,
      "message": "It\u0027s clearer to me to have a separate switch for each property of the Stream, otherwise a bunch of settings would get intertwined and it would be harder to read.\nThe normalized check is already taken care of below at line 244.",
      "parentUuid": "e1a778a6_b9409d2f",
      "revId": "ca5d95a80ab84fa4ca435a87e3a0617271c22ad8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1623868f_e6596dd9",
        "filename": "src/Vulkan/VkPipeline.cpp",
        "patchSetId": 8
      },
      "lineNbr": 202,
      "author": {
        "id": 5065
      },
      "writtenOn": "2018-11-30T14:39:20Z",
      "side": 1,
      "message": "nit: I would spell out the types explicitly since they\u0027re simple types (even if they are long). Also we could have a block per sub-descriptor of pCreateInfo to delimitate things more clearly.",
      "revId": "ca5d95a80ab84fa4ca435a87e3a0617271c22ad8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e202402_263f441d",
        "filename": "src/Vulkan/VkPipeline.cpp",
        "patchSetId": 8
      },
      "lineNbr": 202,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-11-30T19:53:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1623868f_e6596dd9",
      "revId": "ca5d95a80ab84fa4ca435a87e3a0617271c22ad8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a52a318_eb67df0e",
        "filename": "src/Vulkan/VkPipeline.hpp",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 5065
      },
      "writtenOn": "2018-11-30T14:39:20Z",
      "side": 1,
      "message": "Be careful about this part of the spec: \"A shader module can be destroyed while pipelines created using its shaders are still in use.\"\n\nI assume this will be fine in the end because we\u0027ll generate the routine in vkCreatePipeline, but we can\u0027t rely on VkShaderModule living after the end of the call.",
      "revId": "ca5d95a80ab84fa4ca435a87e3a0617271c22ad8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1572e4e_6c540447",
        "filename": "src/Vulkan/VkPipeline.hpp",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-11-30T15:36:46Z",
      "side": 1,
      "message": "Thanks for pointing that out! Indeed it seems fine for just using the compiled pipeline, but this will bite us when using the shader afterwards for debugging purposes.\n\nI suggest we do a deep copy for the debugging. Doesn\u0027t have to be done now. Alexis, could you make a note about it in b/118401597?\n\nI suggest passing the shader module as arguments to where we need it, while it\u0027s valid. I\u0027d rather not store a pointer here that\u0027s going to point to stale memory.",
      "parentUuid": "5a52a318_eb67df0e",
      "revId": "ca5d95a80ab84fa4ca435a87e3a0617271c22ad8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5cbd67e_80e34f34",
        "filename": "src/Vulkan/VkPipeline.hpp",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-11-30T19:53:55Z",
      "side": 1,
      "message": "I ended adding a function prototype in ShaderModule to address this. It just returns nullptr for now, but could be implemented to return a valid routine once we have to ability to compile SPIR-V code.",
      "parentUuid": "e1572e4e_6c540447",
      "revId": "ca5d95a80ab84fa4ca435a87e3a0617271c22ad8",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}