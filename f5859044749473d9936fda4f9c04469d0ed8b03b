{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "717ea641_1554ac94",
        "filename": "src/Pipeline/SpirvShaderGLSLstd450.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1020,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-01-19T21:20:15Z",
      "side": 1,
      "message": "These don\u0027t need initialization. Note that we can catch bugs with MSan support for Reactor routines now.",
      "range": {
        "startLine": 1018,
        "startChar": 1,
        "endLine": 1020,
        "endChar": 23
      },
      "revId": "f5859044749473d9936fda4f9c04469d0ed8b03b",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c000deb1_d75dd17c",
        "filename": "src/Pipeline/SpirvShaderGLSLstd450.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1020,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-01-21T17:07:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "717ea641_1554ac94",
      "range": {
        "startLine": 1018,
        "startChar": 1,
        "endLine": 1020,
        "endChar": 23
      },
      "revId": "f5859044749473d9936fda4f9c04469d0ed8b03b",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a9201d7_fb6e4efb",
        "filename": "src/Pipeline/SpirvShaderGLSLstd450.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1032,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-01-19T21:20:15Z",
      "side": 1,
      "message": "This should be the actual number of samples obtained from the image, to avoid future issues when we support other multisample counts.\n\nI\u0027m okay with landing this as-is if you file a bug to take care of this later.",
      "range": {
        "startLine": 1032,
        "startChar": 25,
        "endLine": 1032,
        "endChar": 40
      },
      "revId": "f5859044749473d9936fda4f9c04469d0ed8b03b",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db76c54f_8a6c7fd1",
        "filename": "src/Pipeline/SpirvShaderGLSLstd450.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1032,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-01-21T17:07:17Z",
      "side": 1,
      "message": "That\u0027s the reason for the assert right under this. SampleLocationsX and SampleLocationsY are computed specifically for 4 samples, so it only works for 1 or 4 samples at the moment.",
      "parentUuid": "5a9201d7_fb6e4efb",
      "range": {
        "startLine": 1032,
        "startChar": 25,
        "endLine": 1032,
        "endChar": 40
      },
      "revId": "f5859044749473d9936fda4f9c04469d0ed8b03b",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de9f1898_505c5a0e",
        "filename": "src/Pipeline/SpirvShaderGLSLstd450.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1041,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-01-19T21:20:15Z",
      "side": 1,
      "message": "This doesn\u0027t seem necessary. You can do something like `Pointer\u003cFloat\u003e(constants + sizeof(Constants::SampleLocationsX) + i * sizeof(float))` to access it directly.\n\nI\u0027ve filed b/177926425 to make that a bit easier to do in the future. Feel free to either file a bug dependent on that one for simplifying/optimizing this code at a later point, or update this patch to use the explicit pointer arithmetic for now.",
      "range": {
        "startLine": 1035,
        "startChar": 4,
        "endLine": 1041,
        "endChar": 5
      },
      "revId": "f5859044749473d9936fda4f9c04469d0ed8b03b",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a81a534_4a608436",
        "filename": "src/Pipeline/SpirvShaderGLSLstd450.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1041,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-01-21T17:07:17Z",
      "side": 1,
      "message": "That doesn\u0027t work for static members, and SampleLocationsX/SampleLocationsY are static constexpr members of Constants.",
      "parentUuid": "de9f1898_505c5a0e",
      "range": {
        "startLine": 1035,
        "startChar": 4,
        "endLine": 1041,
        "endChar": 5
      },
      "revId": "f5859044749473d9936fda4f9c04469d0ed8b03b",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb95afa5_3f7a24ad",
        "filename": "src/Pipeline/SpirvShaderGLSLstd450.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1048,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-01-19T21:20:15Z",
      "side": 1,
      "message": "This can be done more cheaply as x \u0026 0x3",
      "range": {
        "startLine": 1048,
        "startChar": 24,
        "endLine": 1048,
        "endChar": 31
      },
      "revId": "f5859044749473d9936fda4f9c04469d0ed8b03b",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2bae02e9_f0696276",
        "filename": "src/Pipeline/SpirvShaderGLSLstd450.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1048,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-01-21T17:07:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bb95afa5_3f7a24ad",
      "range": {
        "startLine": 1048,
        "startChar": 24,
        "endLine": 1048,
        "endChar": 31
      },
      "revId": "f5859044749473d9936fda4f9c04469d0ed8b03b",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3eea35c_1b2be0da",
        "filename": "src/Pipeline/SpirvShaderGLSLstd450.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1080,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-01-19T21:20:15Z",
      "side": 1,
      "message": "According to \"The operand interpolant must be a pointer to the Input Storage Class.\" These are globals, so they can\u0027t be offset by a dynamic index. Hence I don\u0027t think we can run into this case?",
      "range": {
        "startLine": 1080,
        "startChar": 4,
        "endLine": 1080,
        "endChar": 57
      },
      "revId": "f5859044749473d9936fda4f9c04469d0ed8b03b",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b400924c_17a47d95",
        "filename": "src/Pipeline/SpirvShaderGLSLstd450.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1080,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-01-21T17:07:17Z",
      "side": 1,
      "message": "I did run into this in OpenGL ES 3.1 conformance tests with SwANGLE. Since these are explicitly made to emulate GLSL 4.50 behavior, I\u0027m assuming they should support the same type of usage.",
      "parentUuid": "b3eea35c_1b2be0da",
      "range": {
        "startLine": 1080,
        "startChar": 4,
        "endLine": 1080,
        "endChar": 57
      },
      "revId": "f5859044749473d9936fda4f9c04469d0ed8b03b",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31c93ca6_3afe2f86",
        "filename": "src/Pipeline/SpirvShaderGLSLstd450.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1080,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-01-25T19:20:04Z",
      "side": 1,
      "message": "Okay, that\u0027s a little odd and indicates either a gap in my understanding or some kind of spec/test bug. Please add the GLSL and resulting SPIR-V of the case where you encountered this to the design doc so we can discuss this in more detail.",
      "parentUuid": "b400924c_17a47d95",
      "range": {
        "startLine": 1080,
        "startChar": 4,
        "endLine": 1080,
        "endChar": 57
      },
      "revId": "f5859044749473d9936fda4f9c04469d0ed8b03b",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "763cc583_f2c1228b",
        "filename": "src/Pipeline/SpirvShaderGLSLstd450.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1080,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-01-29T22:06:33Z",
      "side": 1,
      "message": "Let me retry then, to be sure. Maybe the failures I had originally were due to something else and I wrongly assumed they were due to dynamic arguments.\n\nI updated this cl and I\u0027m re-running the trybots on the top cl.",
      "parentUuid": "31c93ca6_3afe2f86",
      "range": {
        "startLine": 1080,
        "startChar": 4,
        "endLine": 1080,
        "endChar": 57
      },
      "revId": "f5859044749473d9936fda4f9c04469d0ed8b03b",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9369937_3d0ba67c",
        "filename": "src/Pipeline/SpirvShaderGLSLstd450.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1080,
      "author": {
        "id": 5050
      },
      "writtenOn": "2021-01-29T22:57:12Z",
      "side": 1,
      "message": "Yeah, I think was was missing was handling arrays properly, which was done by adding the \"ComputeInterpolantOffset\" function. I removed the code to handle the dynamic case and I updated the issue to remove a request for the dynamic case in https://gitlab.khronos.org/Tracker/vk-gl-cts/-/issues/2733 (it still contains a request for testing arrays and the sample keyword properly).",
      "parentUuid": "763cc583_f2c1228b",
      "range": {
        "startLine": 1080,
        "startChar": 4,
        "endLine": 1080,
        "endChar": 57
      },
      "revId": "f5859044749473d9936fda4f9c04469d0ed8b03b",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4"
    }
  ]
}