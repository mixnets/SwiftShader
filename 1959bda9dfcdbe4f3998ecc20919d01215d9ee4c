{
  "comments": [
    {
      "key": {
        "uuid": "8fecbcb0_6a624ad8",
        "filename": "src/Vulkan/VkDevice.cpp",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 6982
      },
      "writtenOn": "2018-11-21T22:41:37Z",
      "side": 1,
      "message": "Just delete this. A correct implementation ignores pCreateInfo-\u003eenabledLayerCount. There is nothing to do here.",
      "revId": "1959bda9dfcdbe4f3998ecc20919d01215d9ee4c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e80f184_06713403",
        "filename": "src/Vulkan/VkDevice.cpp",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-11-23T16:30:33Z",
      "side": 1,
      "message": "Indeed there\u0027s nothing to do here, but I\u0027d prefer the implementation to be a self-documenting reflection of the spec. Note that the UNIMPLEMENTED() macro is empty in release builds, so there\u0027s no cost to keeping this (as commented, it\u0027s not the best macro name here). Things like these have some value in avoiding to have to check the spec about why something was done a certain way. For example if in the future we have to implement instance layers, someone less familiar with the spec might be tempted to also implement device layers. This comment would save them the trouble. Also, someone (or something, a fuzzer for example) checking API coverage might have questions about this, and wouldn\u0027t have to peruse the spec thanks to this comment. It\u0027s a minor thing, but I\u0027ve ran into cases like this in the past where a comment would have saved me time (even in code I wrote/reviewed a few months before).",
      "parentUuid": "8fecbcb0_6a624ad8",
      "revId": "1959bda9dfcdbe4f3998ecc20919d01215d9ee4c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0a6c6d0_df8c2953",
        "filename": "src/Vulkan/VkDevice.cpp",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 6982
      },
      "writtenOn": "2018-11-23T19:01:25Z",
      "side": 1,
      "message": "So leave a comment here, but don\u0027t be nonconformant in debug builds?",
      "parentUuid": "9e80f184_06713403",
      "revId": "1959bda9dfcdbe4f3998ecc20919d01215d9ee4c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8ee6310_6b3163a0",
        "filename": "src/Vulkan/VkDevice.cpp",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-11-24T05:11:52Z",
      "side": 1,
      "message": "Debug builds don\u0027t strictly have to be conformant. It\u0027s not what we\u0027ll ship. I think it\u0027s OK and often useful for debug builds to alert us of anything unexpected. Note that this is especially true when having a debugger attached, which we do very frequently on Windows with Visual Studio. I understand that this is a less common practice on Linux.",
      "parentUuid": "a0a6c6d0_df8c2953",
      "revId": "1959bda9dfcdbe4f3998ecc20919d01215d9ee4c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f74a6b5b_b0a622e7",
        "filename": "src/Vulkan/VkDevice.cpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-11-20T16:09:40Z",
      "side": 1,
      "message": "Why does this need to be handled twice?",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 55,
        "endChar": 2
      },
      "revId": "1959bda9dfcdbe4f3998ecc20919d01215d9ee4c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25bd728e_3719b135",
        "filename": "src/Vulkan/VkDevice.cpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-11-20T19:53:44Z",
      "side": 1,
      "message": "It\u0027s not entirely clear at this point whether it is best handled in the entry function or here in the constructor (or parts of it in both). Either way we can\u0027t accidentally miss this so I think the duplication is harmless for now.",
      "parentUuid": "f74a6b5b_b0a622e7",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 55,
        "endChar": 2
      },
      "revId": "1959bda9dfcdbe4f3998ecc20919d01215d9ee4c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e73380ba_50ce1f5a",
        "filename": "src/Vulkan/VkDevice.cpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-11-20T21:09:04Z",
      "side": 1,
      "message": "Right, but since it\u0027s impossible to hit these, I\u0027m not sure they\u0027ll ever have any use. It\u0027s unlikely that we would remove the UNIMPLEMENTED() statements from the entry function without actually implementing the relevant code.",
      "parentUuid": "25bd728e_3719b135",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 55,
        "endChar": 2
      },
      "revId": "1959bda9dfcdbe4f3998ecc20919d01215d9ee4c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "838cd134_f1b8235f",
        "filename": "src/Vulkan/VkDevice.cpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-11-20T21:23:53Z",
      "side": 1,
      "message": "I see, yes, it could confuse our later selfs to have it in both places and still hit an UNIMPLEMENTED even when implemented in the other place.\n\nIn a later patch I did implement an extension, and handled it in this constructor, so it felt weird to have various bits of create info  \"handled\" in different places. I think we can move all of it to the constructor? Probably should be a separate patch...",
      "parentUuid": "e73380ba_50ce1f5a",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 55,
        "endChar": 2
      },
      "revId": "1959bda9dfcdbe4f3998ecc20919d01215d9ee4c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7e3b762_36754c7d",
        "filename": "src/Vulkan/VkDevice.cpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-11-23T16:30:33Z",
      "side": 1,
      "message": "On second thought, the reason we\u0027re handling this create info in both the entry function and the Device constructor is because the entry function has to validate it and return an error if necessary, while the constructor can\u0027t return any errors but has to actually create the corresponding functionality. So I\u0027d prefer to keep it in both places even for unimplemented/deprecated functionality. Also see above.",
      "parentUuid": "838cd134_f1b8235f",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 55,
        "endChar": 2
      },
      "revId": "1959bda9dfcdbe4f3998ecc20919d01215d9ee4c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10192ffc_1b715d5c",
        "filename": "src/Vulkan/VkDevice.cpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 5050
      },
      "writtenOn": "2018-11-23T18:19:57Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c7e3b762_36754c7d",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 55,
        "endChar": 2
      },
      "revId": "1959bda9dfcdbe4f3998ecc20919d01215d9ee4c",
      "serverId": "aea13c4a-0b89-3eca-aee9-e193b1b77aa4",
      "unresolved": false
    }
  ]
}